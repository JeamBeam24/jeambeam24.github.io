{"version":3,"file":"static/js/4583.1381940b.chunk.js","mappings":"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","sources":["utils/getInitialLogoURL.ts","graphql/data/pools/usePoolsFromTokenAddress.ts","components/Tokens/TokenDetails/tables/TokenDetailsPoolsTable.tsx","graphql/data/useTokenTransactions.ts","components/Tokens/TokenDetails/tables/TransactionsTable.tsx","components/Tokens/TokenDetails/ActivitySection.tsx","components/Tokens/TokenDetails/BalanceSummary.tsx","components/Tokens/TokenDetails/MobileBalanceSummaryFooter.tsx","components/Tokens/TokenDetails/TokenDescription.tsx","components/Tokens/TokenDetails/index.tsx","assets/svg/eye.svg","components/Tokens/TokenDetails/InvalidTokenDetails.tsx","pages/TokenDetails/utils.ts","pages/TokenDetails/index.tsx","shared-cloud/metatags.ts","utils/addressesAreEquivalent.ts"],"sourcesContent":["import { getChainInfo, isSupportedChainId } from 'constants/chains'\r\nimport { isCelo, nativeOnChain } from 'constants/tokens'\r\nimport { isAddress } from 'utilities/src/addresses'\r\nimport celoLogo from '../assets/svg/celo_logo.svg'\r\n\r\nexport function getInitialLogoUrl(\r\n  address?: string | null,\r\n  chainId?: number | null,\r\n  isNative?: boolean,\r\n  backupImg?: string | null\r\n) {\r\n  const networkName = isSupportedChainId(chainId)\r\n    ? getChainInfo({ chainId }).assetRepoNetworkName ?? 'ethereum'\r\n    : 'ethereum'\r\n  const checksummedAddress = isAddress(address)\r\n\r\n  if (chainId && isCelo(chainId) && address === nativeOnChain(chainId).wrapped.address) {\r\n    return celoLogo\r\n  }\r\n\r\n  if (checksummedAddress) {\r\n    return `https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/${networkName}/assets/${checksummedAddress}/logo.png`\r\n  } else {\r\n    return backupImg ?? undefined\r\n  }\r\n}\r\n","import { ChainId } from '@uniswap/sdk-core'\r\nimport { SupportedInterfaceChainId, chainIdToBackendChain } from 'constants/chains'\r\nimport { PoolTableSortState, TablePool, V2_BIPS, calculateOneDayApr, sortPools } from 'graphql/data/pools/useTopPools'\r\nimport { useCallback, useMemo, useRef } from 'react'\r\nimport {\r\n  useTopV2PairsQuery,\r\n  useTopV3PoolsQuery,\r\n} from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\r\nimport { FeatureFlags } from 'uniswap/src/features/gating/flags'\r\nimport { useFeatureFlag } from 'uniswap/src/features/gating/hooks'\r\n\r\nconst DEFAULT_QUERY_SIZE = 20\r\n\r\nexport function usePoolsFromTokenAddress(\r\n  tokenAddress: string,\r\n  sortState: PoolTableSortState,\r\n  chainId?: SupportedInterfaceChainId\r\n) {\r\n  const v2ExploreEnabled = useFeatureFlag(FeatureFlags.V2Explore)\r\n  const {\r\n    loading: loadingV3,\r\n    error: errorV3,\r\n    data: dataV3,\r\n    fetchMore: fetchMoreV3,\r\n  } = useTopV3PoolsQuery({\r\n    variables: {\r\n      first: DEFAULT_QUERY_SIZE,\r\n      tokenAddress,\r\n      chain: chainIdToBackendChain({ chainId, withFallback: true }),\r\n    },\r\n  })\r\n\r\n  const {\r\n    loading: loadingV2,\r\n    error: errorV2,\r\n    data: dataV2,\r\n    fetchMore: fetchMoreV2,\r\n  } = useTopV2PairsQuery({\r\n    variables: {\r\n      first: DEFAULT_QUERY_SIZE,\r\n      tokenAddress,\r\n      chain: chainIdToBackendChain({ chainId, withFallback: true }),\r\n    },\r\n    skip: !chainId || (chainId !== ChainId.MAINNET && !v2ExploreEnabled),\r\n  })\r\n  const loading = loadingV3 || loadingV2\r\n\r\n  const loadingMoreV3 = useRef(false)\r\n  const loadingMoreV2 = useRef(false)\r\n  const sizeRef = useRef(DEFAULT_QUERY_SIZE)\r\n  const loadMore = useCallback(\r\n    ({ onComplete }: { onComplete?: () => void }) => {\r\n      if (loadingMoreV3.current || (loadingMoreV2.current && (chainId === ChainId.MAINNET || v2ExploreEnabled))) {\r\n        return\r\n      }\r\n      loadingMoreV3.current = true\r\n      loadingMoreV2.current = true\r\n      sizeRef.current += DEFAULT_QUERY_SIZE\r\n      fetchMoreV3({\r\n        variables: {\r\n          cursor: dataV3?.topV3Pools?.[dataV3.topV3Pools.length - 1]?.totalLiquidity?.value,\r\n        },\r\n        updateQuery: (prev, { fetchMoreResult }) => {\r\n          if (!fetchMoreResult || !prev || !Object.keys(prev).length) return prev\r\n          if (!loadingMoreV2.current || (chainId !== ChainId.MAINNET && !v2ExploreEnabled)) onComplete?.()\r\n          const mergedData = {\r\n            topV3Pools: [...(prev.topV3Pools ?? []).slice(), ...(fetchMoreResult.topV3Pools ?? []).slice()],\r\n          }\r\n          loadingMoreV3.current = false\r\n          return mergedData\r\n        },\r\n      })\r\n      if (chainId === ChainId.MAINNET || v2ExploreEnabled) {\r\n        fetchMoreV2({\r\n          variables: {\r\n            cursor: dataV2?.topV2Pairs?.[dataV2.topV2Pairs.length - 1]?.totalLiquidity?.value,\r\n          },\r\n          updateQuery: (prev, { fetchMoreResult }) => {\r\n            if (!fetchMoreResult || !prev || !Object.keys(prev).length) return prev\r\n            if (!loadingMoreV3.current) onComplete?.()\r\n            const mergedData = {\r\n              topV2Pairs: [...(prev.topV2Pairs ?? []).slice(), ...(fetchMoreResult.topV2Pairs ?? []).slice()],\r\n            }\r\n            loadingMoreV2.current = false\r\n            return mergedData\r\n          },\r\n        })\r\n      }\r\n    },\r\n    [chainId, dataV2?.topV2Pairs, dataV3?.topV3Pools, fetchMoreV2, fetchMoreV3, v2ExploreEnabled]\r\n  )\r\n\r\n  return useMemo(() => {\r\n    const topV3Pools: TablePool[] =\r\n      dataV3?.topV3Pools?.map((pool) => {\r\n        return {\r\n          hash: pool.address,\r\n          token0: pool.token0,\r\n          token1: pool.token1,\r\n          txCount: pool.txCount,\r\n          tvl: pool.totalLiquidity?.value,\r\n          volume24h: pool.volume24h?.value,\r\n          volumeWeek: pool.volumeWeek?.value,\r\n          oneDayApr: calculateOneDayApr(pool.volume24h?.value, pool.totalLiquidity?.value, pool.feeTier),\r\n          feeTier: pool.feeTier,\r\n          protocolVersion: pool.protocolVersion,\r\n        } as TablePool\r\n      }) ?? []\r\n    const topV2Pairs: TablePool[] =\r\n      dataV2?.topV2Pairs?.map((pool) => {\r\n        return {\r\n          hash: pool.address,\r\n          token0: pool.token0,\r\n          token1: pool.token1,\r\n          txCount: pool.txCount,\r\n          tvl: pool.totalLiquidity?.value,\r\n          volume24h: pool.volume24h?.value,\r\n          volumeWeek: pool.volumeWeek?.value,\r\n          oneDayApr: calculateOneDayApr(pool.volume24h?.value, pool.totalLiquidity?.value, V2_BIPS),\r\n          feeTier: V2_BIPS,\r\n          protocolVersion: pool.protocolVersion,\r\n        } as TablePool\r\n      }) ?? []\r\n\r\n    const pools = sortPools([...topV3Pools, ...topV2Pairs], sortState).slice(0, sizeRef.current)\r\n    return { loading, errorV2, errorV3, pools, loadMore }\r\n  }, [dataV2?.topV2Pairs, dataV3?.topV3Pools, errorV2, errorV3, loadMore, loading, sortState])\r\n}\r\n","import { ApolloError } from '@apollo/client'\r\nimport { Token } from '@uniswap/sdk-core'\r\nimport { PoolTableColumns, PoolsTable, sortAscendingAtom, sortMethodAtom } from 'components/Pools/PoolTable/PoolTable'\r\nimport { SupportedInterfaceChainId } from 'constants/chains'\r\nimport { useUpdateManualOutage } from 'featureFlags/flags/outageBanner'\r\nimport { usePoolsFromTokenAddress } from 'graphql/data/pools/usePoolsFromTokenAddress'\r\nimport { OrderDirection } from 'graphql/data/util'\r\nimport { useAtomValue, useResetAtom } from 'jotai/utils'\r\nimport { useEffect, useMemo } from 'react'\r\n\r\nconst HIDDEN_COLUMNS = [PoolTableColumns.Transactions]\r\n\r\nexport function TokenDetailsPoolsTable({\r\n  chainId,\r\n  referenceToken,\r\n}: {\r\n  chainId: SupportedInterfaceChainId\r\n  referenceToken: Token\r\n}) {\r\n  const sortMethod = useAtomValue(sortMethodAtom)\r\n  const sortAscending = useAtomValue(sortAscendingAtom)\r\n  const sortState = useMemo(\r\n    () => ({ sortBy: sortMethod, sortDirection: sortAscending ? OrderDirection.Asc : OrderDirection.Desc }),\r\n    [sortAscending, sortMethod]\r\n  )\r\n  const { pools, loading, errorV2, errorV3, loadMore } = usePoolsFromTokenAddress(\r\n    referenceToken.address,\r\n    sortState,\r\n    chainId\r\n  )\r\n  const combinedError =\r\n    errorV2 && errorV3\r\n      ? new ApolloError({\r\n          errorMessage: `Could not retrieve V2 and V3 Pools for token ${referenceToken.address} on chain: ${chainId}`,\r\n        })\r\n      : undefined\r\n  const allDataStillLoading = loading && !pools.length\r\n  useUpdateManualOutage({ chainId, errorV3, errorV2 })\r\n\r\n  const resetSortMethod = useResetAtom(sortMethodAtom)\r\n  const resetSortAscending = useResetAtom(sortAscendingAtom)\r\n  useEffect(() => {\r\n    resetSortMethod()\r\n    resetSortAscending()\r\n  }, [resetSortAscending, resetSortMethod])\r\n\r\n  return (\r\n    <div data-testid={`tdp-pools-table-${referenceToken.address.toLowerCase()}`}>\r\n      <PoolsTable\r\n        pools={pools}\r\n        loading={allDataStillLoading}\r\n        error={combinedError}\r\n        chainId={chainId}\r\n        maxHeight={600}\r\n        hiddenColumns={HIDDEN_COLUMNS}\r\n        loadMore={loadMore}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import { ChainId } from '@uniswap/sdk-core'\r\nimport { SupportedInterfaceChainId, chainIdToBackendChain } from 'constants/chains'\r\nimport { useCallback, useMemo, useRef } from 'react'\r\nimport {\r\n  Chain,\r\n  PoolTransaction,\r\n  PoolTransactionType,\r\n  useV2TokenTransactionsQuery,\r\n  useV3TokenTransactionsQuery,\r\n} from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\r\nimport { FeatureFlags } from 'uniswap/src/features/gating/flags'\r\nimport { useFeatureFlag } from 'uniswap/src/features/gating/hooks'\r\n\r\nexport enum TokenTransactionType {\r\n  BUY = 'Buy',\r\n  SELL = 'Sell',\r\n}\r\n\r\nconst TokenTransactionDefaultQuerySize = 25\r\n\r\nexport function useTokenTransactions(\r\n  address: string,\r\n  chainId: SupportedInterfaceChainId,\r\n  filter: TokenTransactionType[] = [TokenTransactionType.BUY, TokenTransactionType.SELL]\r\n) {\r\n  const v2ExploreEnabled = useFeatureFlag(FeatureFlags.V2Explore)\r\n  const {\r\n    data: dataV3,\r\n    loading: loadingV3,\r\n    fetchMore: fetchMoreV3,\r\n    error: errorV3,\r\n  } = useV3TokenTransactionsQuery({\r\n    variables: {\r\n      address: address.toLowerCase(),\r\n      chain: chainIdToBackendChain({ chainId, withFallback: true }),\r\n      first: TokenTransactionDefaultQuerySize,\r\n    },\r\n  })\r\n  const {\r\n    data: dataV2,\r\n    loading: loadingV2,\r\n    error: errorV2,\r\n    fetchMore: fetchMoreV2,\r\n  } = useV2TokenTransactionsQuery({\r\n    variables: {\r\n      address: address.toLowerCase(),\r\n      first: TokenTransactionDefaultQuerySize,\r\n      chain: chainIdToBackendChain({ chainId }),\r\n    },\r\n    skip: chainId !== ChainId.MAINNET && !v2ExploreEnabled,\r\n  })\r\n  const loadingMoreV3 = useRef(false)\r\n  const loadingMoreV2 = useRef(false)\r\n  const querySizeRef = useRef(TokenTransactionDefaultQuerySize)\r\n  const loadMore = useCallback(\r\n    ({ onComplete }: { onComplete?: () => void }) => {\r\n      if (loadingMoreV3.current || (loadingMoreV2.current && (chainId === ChainId.MAINNET || v2ExploreEnabled))) {\r\n        return\r\n      }\r\n      loadingMoreV3.current = true\r\n      loadingMoreV2.current = true\r\n      querySizeRef.current += TokenTransactionDefaultQuerySize\r\n      fetchMoreV3({\r\n        variables: {\r\n          cursor: dataV3?.token?.v3Transactions?.[dataV3.token?.v3Transactions.length - 1]?.timestamp,\r\n        },\r\n        updateQuery: (prev, { fetchMoreResult }) => {\r\n          if (!fetchMoreResult) {\r\n            return prev\r\n          }\r\n          if (!loadingMoreV2.current || (chainId !== ChainId.MAINNET && !v2ExploreEnabled)) onComplete?.()\r\n          const mergedData = {\r\n            token: {\r\n              ...prev.token,\r\n              id: prev?.token?.id ?? '',\r\n              chain: prev?.token?.chain ?? Chain.Ethereum,\r\n              v3Transactions: [...(prev.token?.v3Transactions ?? []), ...(fetchMoreResult.token?.v3Transactions ?? [])],\r\n            },\r\n          }\r\n          loadingMoreV3.current = false\r\n          return mergedData\r\n        },\r\n      })\r\n      if (chainId === ChainId.MAINNET || v2ExploreEnabled) {\r\n        fetchMoreV2({\r\n          variables: {\r\n            cursor: dataV2?.token?.v2Transactions?.[dataV2.token?.v2Transactions.length - 1]?.timestamp,\r\n          },\r\n          updateQuery: (prev, { fetchMoreResult }) => {\r\n            if (!fetchMoreResult) return prev\r\n            if (!loadingMoreV3.current) onComplete?.()\r\n            const mergedData = {\r\n              token: {\r\n                ...prev.token,\r\n                id: prev?.token?.id ?? '',\r\n                chain: prev?.token?.chain ?? Chain.Ethereum,\r\n                v2Transactions: [\r\n                  ...(prev.token?.v2Transactions ?? []),\r\n                  ...(fetchMoreResult.token?.v2Transactions ?? []),\r\n                ],\r\n              },\r\n            }\r\n            loadingMoreV2.current = false\r\n            return mergedData\r\n          },\r\n        })\r\n      }\r\n    },\r\n    [chainId, dataV2?.token?.v2Transactions, dataV3?.token?.v3Transactions, fetchMoreV2, fetchMoreV3, v2ExploreEnabled]\r\n  )\r\n\r\n  const transactions = useMemo(\r\n    () =>\r\n      [\r\n        ...(dataV3?.token?.v3Transactions?.filter((tx) => {\r\n          if (!tx) {\r\n            return false\r\n          }\r\n          const tokenBeingSold = parseFloat(tx.token0Quantity) < 0 ? tx.token0 : tx.token1\r\n          const isSell = tokenBeingSold.address?.toLowerCase() === address.toLowerCase()\r\n          return (\r\n            tx.type === PoolTransactionType.Swap &&\r\n            filter.includes(isSell ? TokenTransactionType.SELL : TokenTransactionType.BUY)\r\n          )\r\n        }) ?? []),\r\n        ...(dataV2?.token?.v2Transactions?.filter((tx) => {\r\n          if (!tx) {\r\n            return false\r\n          }\r\n          const tokenBeingSold = parseFloat(tx.token0Quantity) < 0 ? tx.token0 : tx.token1\r\n          const isSell = tokenBeingSold.address?.toLowerCase() === address.toLowerCase()\r\n          return (\r\n            tx.type === PoolTransactionType.Swap &&\r\n            filter.includes(isSell ? TokenTransactionType.SELL : TokenTransactionType.BUY)\r\n          )\r\n        }) ?? []),\r\n      ]\r\n        .sort((a, b): number =>\r\n          a?.timestamp && b?.timestamp ? b.timestamp - a.timestamp : a?.timestamp === null ? -1 : 1\r\n        )\r\n        .slice(0, querySizeRef.current),\r\n    [address, dataV2?.token?.v2Transactions, dataV3?.token?.v3Transactions, filter]\r\n  )\r\n\r\n  return useMemo(() => {\r\n    return {\r\n      transactions: transactions as PoolTransaction[],\r\n      loading: loadingV3 || loadingV2,\r\n      loadMore,\r\n      errorV2,\r\n      errorV3,\r\n    }\r\n  }, [transactions, loadingV3, loadingV2, loadMore, errorV2, errorV3])\r\n}\r\n","import { ApolloError } from '@apollo/client'\r\nimport { createColumnHelper } from '@tanstack/react-table'\r\nimport { Token } from '@uniswap/sdk-core'\r\nimport Row from 'components/Row'\r\nimport { Table } from 'components/Table'\r\nimport { Cell } from 'components/Table/Cell'\r\nimport { Filter } from 'components/Table/Filter'\r\nimport {\r\n  FilterHeaderRow,\r\n  HeaderArrow,\r\n  HeaderSortText,\r\n  StyledExternalLink,\r\n  TimestampCell,\r\n  TokenLinkCell,\r\n} from 'components/Table/styled'\r\nimport { SupportedInterfaceChainId } from 'constants/chains'\r\nimport { useUpdateManualOutage } from 'featureFlags/flags/outageBanner'\r\nimport { TokenTransactionType, useTokenTransactions } from 'graphql/data/useTokenTransactions'\r\nimport { unwrapToken } from 'graphql/data/util'\r\nimport { OrderDirection, Swap_OrderBy } from 'graphql/thegraph/__generated__/types-and-hooks'\r\nimport { useActiveLocalCurrency } from 'hooks/useActiveLocalCurrency'\r\nimport { Trans } from 'i18n'\r\nimport { useMemo, useReducer, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { EllipsisStyle, ThemedText } from 'theme/components'\r\nimport { Token as GQLToken } from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\r\nimport { shortenAddress } from 'utilities/src/addresses'\r\nimport { useFormatter } from 'utils/formatNumbers'\r\nimport { ExplorerDataType, getExplorerLink } from 'utils/getExplorerLink'\r\n\r\nconst StyledSwapAmount = styled(ThemedText.BodyPrimary)`\r\n  display: inline-block;\r\n  ${EllipsisStyle}\r\n  max-width: 75px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  min-height: 158px;\r\n`\r\ninterface SwapTransaction {\r\n  hash: string\r\n  timestamp: number\r\n  input: SwapLeg\r\n  output: SwapLeg\r\n  usdValue: number\r\n  makerAddress: string\r\n}\r\n\r\ninterface SwapLeg {\r\n  address?: string\r\n  symbol?: string\r\n  amount: number\r\n  token: GQLToken\r\n}\r\n\r\ntype TokenTxTableSortState = {\r\n  sortBy: Swap_OrderBy\r\n  sortDirection: OrderDirection\r\n}\r\n\r\nexport function TransactionsTable({\r\n  chainId,\r\n  referenceToken,\r\n}: {\r\n  chainId: SupportedInterfaceChainId\r\n  referenceToken: Token\r\n}) {\r\n  const activeLocalCurrency = useActiveLocalCurrency()\r\n  const { formatNumber, formatFiatPrice } = useFormatter()\r\n  const [filterModalIsOpen, toggleFilterModal] = useReducer((s) => !s, false)\r\n  const [filter, setFilters] = useState<TokenTransactionType[]>([TokenTransactionType.BUY, TokenTransactionType.SELL])\r\n  const [sortState] = useState<TokenTxTableSortState>({\r\n    sortBy: Swap_OrderBy.Timestamp,\r\n    sortDirection: OrderDirection.Desc,\r\n  })\r\n  const { transactions, loading, loadMore, errorV2, errorV3 } = useTokenTransactions(\r\n    referenceToken.address,\r\n    chainId,\r\n    filter\r\n  )\r\n  const combinedError =\r\n    errorV2 && errorV3\r\n      ? new ApolloError({\r\n          errorMessage: `Could not retrieve V2 and V3 Transactions for token: ${referenceToken.address} on chain: ${chainId}`,\r\n        })\r\n      : undefined\r\n  const allDataStillLoading = loading && !transactions.length\r\n  useUpdateManualOutage({ chainId, errorV3, errorV2 })\r\n  const unwrappedReferenceToken = unwrapToken(chainId, referenceToken)\r\n\r\n  const data = useMemo(\r\n    () =>\r\n      transactions.map((transaction) => {\r\n        const swapLeg0 = {\r\n          address: transaction.token0.address,\r\n          symbol: transaction.token0.symbol,\r\n          amount: parseFloat(transaction.token0Quantity),\r\n          token: transaction.token0,\r\n        }\r\n        const swapLeg1 = {\r\n          address: transaction.token1.address,\r\n          symbol: transaction.token1.symbol,\r\n          amount: parseFloat(transaction.token1Quantity),\r\n          token: transaction.token1,\r\n        }\r\n        const token0IsBeingSold = parseFloat(transaction.token0Quantity) > 0\r\n        return {\r\n          hash: transaction.hash,\r\n          timestamp: transaction.timestamp,\r\n          input: token0IsBeingSold ? swapLeg0 : swapLeg1,\r\n          output: token0IsBeingSold ? swapLeg1 : swapLeg0,\r\n          usdValue: transaction.usdValue.value,\r\n          makerAddress: transaction.account,\r\n        }\r\n      }),\r\n    [transactions]\r\n  )\r\n\r\n  const showLoadingSkeleton = allDataStillLoading || !!combinedError\r\n  // TODO(WEB-3236): once GQL BE Transaction query is supported add usd, token0 amount, and token1 amount sort support\r\n  const columns = useMemo(() => {\r\n    const columnHelper = createColumnHelper<SwapTransaction>()\r\n    return [\r\n      columnHelper.accessor((row) => row, {\r\n        id: 'timestamp',\r\n        header: () => (\r\n          <Cell minWidth={120} justifyContent=\"flex-start\" grow>\r\n            <Row gap=\"xs\">\r\n              {sortState.sortBy === Swap_OrderBy.Timestamp && <HeaderArrow direction={sortState.sortDirection} />}\r\n              <HeaderSortText $active={sortState.sortBy === Swap_OrderBy.Timestamp}>\r\n                <Trans>Time</Trans>\r\n              </HeaderSortText>\r\n            </Row>\r\n          </Cell>\r\n        ),\r\n        cell: (row) => (\r\n          <Cell loading={showLoadingSkeleton} minWidth={120} justifyContent=\"flex-start\" grow>\r\n            <TimestampCell\r\n              timestamp={Number(row.getValue?.().timestamp)}\r\n              link={getExplorerLink(chainId, row.getValue?.().hash, ExplorerDataType.TRANSACTION)}\r\n            />\r\n          </Cell>\r\n        ),\r\n      }),\r\n      columnHelper.accessor((row) => row.output.address, {\r\n        id: 'swap-type',\r\n        header: () => (\r\n          <Cell minWidth={75} justifyContent=\"flex-start\" grow>\r\n            <FilterHeaderRow modalOpen={filterModalIsOpen} onClick={toggleFilterModal}>\r\n              <Filter\r\n                allFilters={Object.values(TokenTransactionType)}\r\n                activeFilter={filter}\r\n                setFilters={setFilters}\r\n                isOpen={filterModalIsOpen}\r\n                toggleFilterModal={toggleFilterModal}\r\n              />\r\n              <ThemedText.BodySecondary>\r\n                <Trans>Type</Trans>\r\n              </ThemedText.BodySecondary>\r\n            </FilterHeaderRow>\r\n          </Cell>\r\n        ),\r\n        cell: (outputTokenAddress) => {\r\n          const isBuy = String(outputTokenAddress.getValue?.()).toLowerCase() === referenceToken.address.toLowerCase()\r\n          return (\r\n            <Cell loading={showLoadingSkeleton} minWidth={75} justifyContent=\"flex-start\" grow>\r\n              <ThemedText.BodyPrimary color={isBuy ? 'success' : 'critical'}>\r\n                {isBuy ? <Trans>Buy</Trans> : <Trans>Sell</Trans>}\r\n              </ThemedText.BodyPrimary>\r\n            </Cell>\r\n          )\r\n        },\r\n      }),\r\n      columnHelper.accessor(\r\n        (row) =>\r\n          row.input.address?.toLowerCase() === referenceToken.address.toLowerCase()\r\n            ? row.input.amount\r\n            : row.output.amount,\r\n        {\r\n          id: 'reference-amount',\r\n          header: () => (\r\n            <Cell minWidth={100} justifyContent=\"flex-end\">\r\n              <ThemedText.BodySecondary>${unwrappedReferenceToken.symbol}</ThemedText.BodySecondary>\r\n            </Cell>\r\n          ),\r\n          cell: (inputTokenAmount) => (\r\n            <Cell loading={showLoadingSkeleton} minWidth={100} justifyContent=\"flex-end\">\r\n              <ThemedText.BodyPrimary>\r\n                {formatNumber({\r\n                  input: Math.abs(inputTokenAmount.getValue?.()) || 0,\r\n                })}\r\n              </ThemedText.BodyPrimary>\r\n            </Cell>\r\n          ),\r\n        }\r\n      ),\r\n      columnHelper.accessor(\r\n        (row) => {\r\n          const nonReferenceSwapLeg =\r\n            row.input.address?.toLowerCase() === referenceToken.address.toLowerCase() ? row.output : row.input\r\n          return (\r\n            <Row gap=\"8px\" justify=\"flex-end\">\r\n              <StyledSwapAmount>\r\n                {formatNumber({\r\n                  input: Math.abs(nonReferenceSwapLeg.amount) || 0,\r\n                })}\r\n              </StyledSwapAmount>\r\n              <TokenLinkCell token={nonReferenceSwapLeg.token} />\r\n            </Row>\r\n          )\r\n        },\r\n        {\r\n          id: 'non-reference-amount',\r\n          header: () => (\r\n            <Cell minWidth={160} justifyContent=\"flex-end\">\r\n              <ThemedText.BodySecondary>\r\n                <Trans>For</Trans>\r\n              </ThemedText.BodySecondary>\r\n            </Cell>\r\n          ),\r\n          cell: (swapOutput) => (\r\n            <Cell loading={showLoadingSkeleton} minWidth={160} justifyContent=\"flex-end\">\r\n              {swapOutput.getValue?.()}\r\n            </Cell>\r\n          ),\r\n        }\r\n      ),\r\n      columnHelper.accessor((row) => row.usdValue, {\r\n        id: 'fiat-value',\r\n        header: () => (\r\n          <Cell minWidth={125} justifyContent=\"flex-end\">\r\n            <Row gap=\"xs\" justify=\"flex-end\">\r\n              {sortState.sortBy === Swap_OrderBy.AmountUsd && <HeaderArrow direction={sortState.sortDirection} />}\r\n              <HeaderSortText $active={sortState.sortBy === Swap_OrderBy.AmountUsd}>\r\n                {activeLocalCurrency}\r\n              </HeaderSortText>\r\n            </Row>\r\n          </Cell>\r\n        ),\r\n        cell: (fiat) => (\r\n          <Cell loading={showLoadingSkeleton} minWidth={125} justifyContent=\"flex-end\">\r\n            <ThemedText.BodyPrimary>{formatFiatPrice({ price: fiat.getValue?.() })}</ThemedText.BodyPrimary>\r\n          </Cell>\r\n        ),\r\n      }),\r\n      columnHelper.accessor((row) => row.makerAddress, {\r\n        id: 'maker-address',\r\n        header: () => (\r\n          <Cell minWidth={150} justifyContent=\"flex-end\">\r\n            <ThemedText.BodySecondary>\r\n              <Trans>Wallet</Trans>\r\n            </ThemedText.BodySecondary>\r\n          </Cell>\r\n        ),\r\n        cell: (makerAddress) => (\r\n          <Cell loading={showLoadingSkeleton} minWidth={150} justifyContent=\"flex-end\">\r\n            <StyledExternalLink href={getExplorerLink(chainId, makerAddress.getValue?.(), ExplorerDataType.ADDRESS)}>\r\n              {shortenAddress(makerAddress.getValue?.())}\r\n            </StyledExternalLink>\r\n          </Cell>\r\n        ),\r\n      }),\r\n    ]\r\n  }, [\r\n    sortState.sortBy,\r\n    sortState.sortDirection,\r\n    showLoadingSkeleton,\r\n    chainId,\r\n    filterModalIsOpen,\r\n    filter,\r\n    referenceToken.address,\r\n    unwrappedReferenceToken.symbol,\r\n    formatNumber,\r\n    activeLocalCurrency,\r\n    formatFiatPrice,\r\n  ])\r\n\r\n  return (\r\n    <TableWrapper>\r\n      <Table\r\n        columns={columns}\r\n        data={data}\r\n        loading={allDataStillLoading}\r\n        error={combinedError}\r\n        loadMore={loadMore}\r\n        maxHeight={600}\r\n      />\r\n    </TableWrapper>\r\n  )\r\n}\r\n","import Row from 'components/Row'\r\nimport { TokenDetailsPoolsTable } from 'components/Tokens/TokenDetails/tables/TokenDetailsPoolsTable'\r\nimport { Trans } from 'i18n'\r\nimport { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ClickableStyle, ThemedText } from 'theme/components'\r\n\r\nimport { useTDPContext } from 'pages/TokenDetails/TDPContext'\r\nimport { TransactionsTable } from './tables/TransactionsTable'\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\nconst Tab = styled(ThemedText.HeadlineMedium)<{ isActive?: boolean }>`\r\n  cursor: pointer;\r\n  color: ${({ isActive, theme }) => (isActive ? theme.neutral1 : theme.neutral2)};\r\n  ${ClickableStyle};\r\n`\r\nenum ActivityTab {\r\n  Txs,\r\n  Pools,\r\n}\r\nexport function ActivitySection() {\r\n  const { wrapped: referenceToken, chainId } = useTDPContext().currency\r\n\r\n  const [activityInView, setActivityInView] = useState(ActivityTab.Txs)\r\n\r\n  if (!referenceToken) {\r\n    return null\r\n  }\r\n  return (\r\n    <Container data-testid=\"token-details-activity-section\">\r\n      <Row gap=\"24px\" marginBottom=\"24px\" id=\"activity-header\">\r\n        <Tab isActive={activityInView === ActivityTab.Txs} onClick={() => setActivityInView(ActivityTab.Txs)}>\r\n          <Trans>Transactions</Trans>\r\n        </Tab>\r\n        <Tab isActive={activityInView === ActivityTab.Pools} onClick={() => setActivityInView(ActivityTab.Pools)}>\r\n          <Trans>Pools</Trans>\r\n        </Tab>\r\n      </Row>\r\n      {activityInView === ActivityTab.Txs && <TransactionsTable chainId={chainId} referenceToken={referenceToken} />}\r\n      {activityInView === ActivityTab.Pools && (\r\n        <TokenDetailsPoolsTable chainId={chainId} referenceToken={referenceToken} />\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n","import { ChainId, Currency } from '@uniswap/sdk-core'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { PortfolioLogo } from 'components/AccountDrawer/MiniPortfolio/PortfolioLogo'\r\nimport { getTokenDetailsURL, gqlToCurrency, supportedChainIdFromGQLChain } from 'graphql/data/util'\r\nimport { Trans } from 'i18n'\r\nimport { useMemo } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { ThemedText } from 'theme/components'\r\nimport {\r\n  Chain,\r\n  PortfolioTokenBalancePartsFragment,\r\n} from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\r\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\r\n\r\nimport { useTDPContext } from 'pages/TokenDetails/TDPContext'\r\n\r\nconst BalancesCard = styled.div`\r\n  color: ${({ theme }) => theme.neutral1};\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 24px;\r\n  height: fit-content;\r\n  width: 100%;\r\n\r\n  // 768 hardcoded to match NFT-redesign navbar breakpoints\r\n  // src/nft/css/sprinkles.css.ts\r\n  // change to match theme breakpoints when this navbar is updated\r\n  @media screen and (min-width: 768px) {\r\n    display: flex;\r\n  }\r\n`\r\nconst BalanceSection = styled.div`\r\n  height: fit-content;\r\n  width: 100%;\r\n`\r\nconst BalanceRow = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin-top: 12px;\r\n`\r\nconst BalanceItem = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst BalanceAmountsContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width: 100%;\r\n  margin-left: 12px;\r\n`\r\n\r\ninterface BalanceProps {\r\n  currency?: Currency\r\n  chainId?: ChainId\r\n  gqlBalance?: PortfolioTokenBalancePartsFragment\r\n  onClick?: () => void\r\n}\r\nconst Balance = ({ currency, chainId = ChainId.MAINNET, gqlBalance, onClick }: BalanceProps) => {\r\n  const { formatNumber } = useFormatter()\r\n  const currencies = useMemo(() => [currency], [currency])\r\n\r\n  const formattedGqlBalance = formatNumber({\r\n    input: gqlBalance?.quantity,\r\n    type: NumberType.TokenNonTx,\r\n  })\r\n  const formattedUsdGqlValue = formatNumber({\r\n    input: gqlBalance?.denominatedValue?.value,\r\n    type: NumberType.PortfolioBalance,\r\n  })\r\n\r\n  return (\r\n    <BalanceRow onClick={onClick}>\r\n      <PortfolioLogo\r\n        currencies={currencies}\r\n        chainId={chainId}\r\n        images={[gqlBalance?.tokenProjectMarket?.tokenProject.logoUrl]}\r\n        size={32}\r\n      />\r\n      <BalanceAmountsContainer>\r\n        <BalanceItem>\r\n          <ThemedText.BodyPrimary>{formattedUsdGqlValue}</ThemedText.BodyPrimary>\r\n        </BalanceItem>\r\n        <BalanceItem>\r\n          <ThemedText.BodySecondary>{formattedGqlBalance}</ThemedText.BodySecondary>\r\n        </BalanceItem>\r\n      </BalanceAmountsContainer>\r\n    </BalanceRow>\r\n  )\r\n}\r\n\r\nconst PageChainBalanceSummary = ({ pageChainBalance }: { pageChainBalance?: PortfolioTokenBalancePartsFragment }) => {\r\n  if (!pageChainBalance || !pageChainBalance.token) return null\r\n  const currency = gqlToCurrency(pageChainBalance.token)\r\n  return (\r\n    <BalanceSection>\r\n      <ThemedText.HeadlineSmall color=\"neutral1\">\r\n        <Trans>Your balance</Trans>\r\n      </ThemedText.HeadlineSmall>\r\n      <Balance currency={currency} chainId={currency?.chainId} gqlBalance={pageChainBalance} />\r\n    </BalanceSection>\r\n  )\r\n}\r\n\r\nconst OtherChainsBalanceSummary = ({\r\n  otherChainBalances,\r\n  hasPageChainBalance,\r\n}: {\r\n  otherChainBalances: readonly PortfolioTokenBalancePartsFragment[]\r\n  hasPageChainBalance: boolean\r\n}) => {\r\n  const navigate = useNavigate()\r\n\r\n  if (!otherChainBalances.length) return null\r\n  return (\r\n    <BalanceSection>\r\n      {hasPageChainBalance ? (\r\n        <ThemedText.SubHeaderSmall>\r\n          <Trans>On other networks</Trans>\r\n        </ThemedText.SubHeaderSmall>\r\n      ) : (\r\n        <ThemedText.HeadlineSmall>\r\n          <Trans>Balance on other networks</Trans>\r\n        </ThemedText.HeadlineSmall>\r\n      )}\r\n      {otherChainBalances.map((balance) => {\r\n        const currency = balance.token && gqlToCurrency(balance.token)\r\n        const chainId = (balance.token && supportedChainIdFromGQLChain(balance.token.chain)) ?? ChainId.MAINNET\r\n        return (\r\n          <Balance\r\n            key={balance.id}\r\n            currency={currency}\r\n            chainId={chainId}\r\n            gqlBalance={balance}\r\n            onClick={() =>\r\n              navigate(\r\n                getTokenDetailsURL({\r\n                  address: balance.token?.address,\r\n                  chain: balance.token?.chain ?? Chain.Ethereum,\r\n                })\r\n              )\r\n            }\r\n          />\r\n        )\r\n      })}\r\n    </BalanceSection>\r\n  )\r\n}\r\n\r\nexport default function BalanceSummary() {\r\n  const { account } = useWeb3React()\r\n  const { currencyChain, multiChainMap } = useTDPContext()\r\n\r\n  const pageChainBalance = multiChainMap[currencyChain]?.balance\r\n  const otherChainBalances: PortfolioTokenBalancePartsFragment[] = []\r\n  for (const [key, value] of Object.entries(multiChainMap)) {\r\n    if (key !== currencyChain && value?.balance !== undefined) {\r\n      otherChainBalances.push(value.balance)\r\n    }\r\n  }\r\n  const hasBalances = pageChainBalance || Boolean(otherChainBalances.length)\r\n\r\n  if (!account || !hasBalances) {\r\n    return null\r\n  }\r\n  return (\r\n    <BalancesCard>\r\n      <PageChainBalanceSummary pageChainBalance={pageChainBalance} />\r\n      <OtherChainsBalanceSummary otherChainBalances={otherChainBalances} hasPageChainBalance={!!pageChainBalance} />\r\n    </BalancesCard>\r\n  )\r\n}\r\n","import { useWeb3React } from '@web3-react/core'\r\nimport { chainIdToBackendChain, useSupportedChainId } from 'constants/chains'\r\nimport { NATIVE_CHAIN_ID } from 'constants/tokens'\r\nimport { Trans } from 'i18n'\r\nimport { useTDPContext } from 'pages/TokenDetails/TDPContext'\r\nimport styled from 'styled-components'\r\nimport { StyledInternalLink, ThemedText } from 'theme/components'\r\nimport { Z_INDEX } from 'theme/zIndex'\r\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\r\n\r\nconst Wrapper = styled.div`\r\n  align-content: center;\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.surface1};\r\n  border: 1px solid ${({ theme }) => theme.surface3};\r\n  color: ${({ theme }) => theme.neutral2};\r\n  display: none;\r\n  flex-direction: row;\r\n  font-weight: 535;\r\n  font-size: 14px;\r\n  height: fit-content;\r\n  justify-content: space-between;\r\n  left: 0;\r\n  line-height: 20px;\r\n  position: fixed;\r\n  z-index: ${Z_INDEX.sticky};\r\n  border-radius: 20px;\r\n  bottom: 56px;\r\n  margin: 8px;\r\n  padding: 12px 32px;\r\n  width: calc(100vw - 16px);\r\n\r\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.md}px) {\r\n    bottom: 0px;\r\n  }\r\n  @media screen and (max-width: ${({ theme }) => theme.breakpoint.lg}px) {\r\n    display: flex;\r\n  }\r\n`\r\nconst BalanceValue = styled.div`\r\n  color: ${({ theme }) => theme.neutral1};\r\n  font-size: 20px;\r\n  line-height: 20px;\r\n  display: flex;\r\n  gap: 8px;\r\n`\r\nconst Balance = styled.div`\r\n  align-items: flex-end;\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  gap: 8px;\r\n`\r\nconst BalanceInfo = styled.div`\r\n  display: flex;\r\n  flex: 10 1 auto;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  gap: 6px;\r\n`\r\nconst FiatValue = styled(ThemedText.Caption)`\r\n  font-size: 12px;\r\n  line-height: 16px;\r\n\r\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.sm}px) {\r\n    line-height: 24px;\r\n  }\r\n`\r\nconst SwapButton = styled(StyledInternalLink)`\r\n  background-color: ${({ theme }) => theme.accent1};\r\n  border: none;\r\n  border-radius: 22px;\r\n  color: ${({ theme }) => theme.neutralContrast};\r\n  display: flex;\r\n  flex: 1 1 auto;\r\n  padding: 12px 16px;\r\n  font-size: 16px;\r\n  font-weight: 535;\r\n  height: 44px;\r\n  justify-content: center;\r\n  margin: auto;\r\n  max-width: 100vw;\r\n`\r\n\r\nexport default function MobileBalanceSummaryFooter() {\r\n  const { currency, multiChainMap, currencyChain } = useTDPContext()\r\n  const supportedChain = useSupportedChainId(currency.chainId)\r\n  const pageChainBalance = multiChainMap[currencyChain]?.balance\r\n\r\n  const { account } = useWeb3React()\r\n  const { formatNumber } = useFormatter()\r\n\r\n  const formattedGqlBalance = formatNumber({\r\n    input: pageChainBalance?.quantity,\r\n    type: NumberType.TokenNonTx,\r\n  })\r\n  const formattedUsdGqlValue = formatNumber({\r\n    input: pageChainBalance?.denominatedValue?.value,\r\n    type: NumberType.PortfolioBalance,\r\n  })\r\n  const chain = chainIdToBackendChain({ chainId: supportedChain }) ?? ''\r\n\r\n  return (\r\n    <Wrapper>\r\n      {Boolean(account && pageChainBalance) && (\r\n        <BalanceInfo>\r\n          <Trans>Your balance</Trans>\r\n          <Balance>\r\n            <BalanceValue>\r\n              {formattedGqlBalance} {currency.symbol}\r\n            </BalanceValue>\r\n            <FiatValue>{formattedUsdGqlValue}</FiatValue>\r\n          </Balance>\r\n        </BalanceInfo>\r\n      )}\r\n      <SwapButton to={`/swap?chain=${chain}&outputCurrency=${currency.isNative ? NATIVE_CHAIN_ID : currency.address}`}>\r\n        <Trans>Swap</Trans>\r\n      </SwapButton>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import { ChainId } from '@uniswap/sdk-core'\r\nimport Column from 'components/Column'\r\nimport { EtherscanLogo } from 'components/Icons/Etherscan'\r\nimport { Globe } from 'components/Icons/Globe'\r\nimport { TwitterXLogo } from 'components/Icons/TwitterX'\r\nimport Row from 'components/Row'\r\nimport { FOTTooltipContent } from 'components/swap/SwapLineItem'\r\nimport { NoInfoAvailable, truncateDescription, TruncateDescriptionButton } from 'components/Tokens/TokenDetails/shared'\r\nimport Tooltip, { MouseoverTooltip, TooltipSize } from 'components/Tooltip'\r\nimport useCopyClipboard from 'hooks/useCopyClipboard'\r\nimport { useSwapTaxes } from 'hooks/useSwapTaxes'\r\nimport { t, Trans } from 'i18n'\r\nimport { useTDPContext } from 'pages/TokenDetails/TDPContext'\r\nimport { useCallback, useReducer } from 'react'\r\nimport { Copy } from 'react-feather'\r\nimport styled, { useTheme } from 'styled-components'\r\nimport { ClickableStyle, EllipsisStyle, ExternalLink, ThemedText } from 'theme/components'\r\nimport { shortenAddress } from 'utilities/src/addresses'\r\nimport { useFormatter } from 'utils/formatNumbers'\r\nimport { ExplorerDataType, getExplorerLink } from 'utils/getExplorerLink'\r\n\r\nconst TokenInfoSection = styled(Column)`\r\n  gap: 16px;\r\n  width: 100%;\r\n\r\n  @media screen and (max-width: ${({ theme }) => theme.breakpoint.lg}px) {\r\n    gap: 24px;\r\n  }\r\n`\r\n\r\nconst InfoSectionHeader = styled(ThemedText.HeadlineSmall)`\r\n  @media screen and (max-width: ${({ theme }) => theme.breakpoint.lg}px) {\r\n    font-size: 28px !important;\r\n    line-height: 36px !important;\r\n  }\r\n`\r\n\r\nconst TokenNameRow = styled(Row)`\r\n  gap: 8px;\r\n  width: 100%;\r\n`\r\n\r\nconst TokenButtonRow = styled(TokenNameRow)`\r\n  flex-wrap: wrap;\r\n`\r\n\r\nconst TokenInfoButton = styled(Row)`\r\n  gap: 8px;\r\n  padding: 8px 12px;\r\n  border-radius: 20px;\r\n  color: ${({ theme }) => theme.neutral1};\r\n  background-color: ${({ theme }) => theme.surface2};\r\n  font-size: 14px;\r\n  font-weight: 535;\r\n  line-height: 16px;\r\n  width: max-content;\r\n  ${ClickableStyle}\r\n`\r\n\r\nconst TokenDescriptionContainer = styled(ThemedText.BodyPrimary)`\r\n  ${EllipsisStyle}\r\n  max-width: 100%;\r\n  // max-height: fit-content;\r\n  line-height: 24px;\r\n  white-space: pre-wrap;\r\n`\r\n\r\nconst DescriptionVisibilityWrapper = styled.p<{ $visible: boolean }>`\r\n  display: ${({ $visible }) => ($visible ? 'inline' : 'none')};\r\n`\r\n\r\nconst TRUNCATE_CHARACTER_COUNT = 200\r\n\r\nexport function TokenDescription() {\r\n  const { address, currency, tokenQuery } = useTDPContext()\r\n  const { neutral2 } = useTheme()\r\n\r\n  const { description, homepageUrl, twitterName } = tokenQuery.data?.token?.project ?? {}\r\n  const explorerUrl = getExplorerLink(\r\n    currency.chainId,\r\n    address,\r\n    currency.isNative ? ExplorerDataType.NATIVE : ExplorerDataType.TOKEN\r\n  )\r\n\r\n  const [isCopied, setCopied] = useCopyClipboard()\r\n  const copy = useCallback(() => {\r\n    setCopied(address)\r\n  }, [address, setCopied])\r\n\r\n  const [isDescriptionTruncated, toggleIsDescriptionTruncated] = useReducer((x) => !x, true)\r\n  const truncatedDescription = truncateDescription(description ?? '', TRUNCATE_CHARACTER_COUNT)\r\n  const shouldTruncate = !!description && description.length > TRUNCATE_CHARACTER_COUNT\r\n  const showTruncatedDescription = shouldTruncate && isDescriptionTruncated\r\n  const { inputTax: sellFee, outputTax: buyFee } = useSwapTaxes(address, address)\r\n  const { formatPercent } = useFormatter()\r\n  const { sellFeeString, buyFeeString } = {\r\n    sellFeeString: formatPercent(sellFee),\r\n    buyFeeString: formatPercent(buyFee),\r\n  }\r\n  const hasFee = Boolean(parseFloat(sellFeeString)) || Boolean(parseFloat(buyFee.toFixed(2)))\r\n  const sameFee = sellFeeString === buyFeeString\r\n\r\n  return (\r\n    <TokenInfoSection data-testid=\"token-details-info-section\">\r\n      <InfoSectionHeader>\r\n        <Trans>Info</Trans>\r\n      </InfoSectionHeader>\r\n      <TokenButtonRow data-testid=\"token-details-info-links\">\r\n        {!currency.isNative && (\r\n          <Tooltip placement=\"bottom\" size={TooltipSize.Max} show={isCopied} text={t`Copied`}>\r\n            <TokenInfoButton onClick={copy}>\r\n              <Copy width=\"18px\" height=\"18px\" color={neutral2} />\r\n              {shortenAddress(currency.address)}\r\n            </TokenInfoButton>\r\n          </Tooltip>\r\n        )}\r\n        <ExternalLink href={explorerUrl}>\r\n          <TokenInfoButton>\r\n            <EtherscanLogo width=\"18px\" height=\"18px\" fill={neutral2} />\r\n            {currency.chainId === ChainId.MAINNET ? <Trans>Etherscan</Trans> : <Trans>Explorer</Trans>}\r\n          </TokenInfoButton>\r\n        </ExternalLink>\r\n        {homepageUrl && (\r\n          <ExternalLink href={homepageUrl}>\r\n            <TokenInfoButton>\r\n              <Globe width=\"18px\" height=\"18px\" fill={neutral2} />\r\n              <Trans>Website</Trans>\r\n            </TokenInfoButton>\r\n          </ExternalLink>\r\n        )}\r\n        {twitterName && (\r\n          <ExternalLink href={`https://x.com/${twitterName}`}>\r\n            <TokenInfoButton>\r\n              <TwitterXLogo width=\"18px\" height=\"18px\" fill={neutral2} />\r\n              <Trans>Twitter</Trans>\r\n            </TokenInfoButton>\r\n          </ExternalLink>\r\n        )}\r\n      </TokenButtonRow>\r\n      <TokenDescriptionContainer>\r\n        {!description && (\r\n          <NoInfoAvailable>\r\n            <Trans>No token information available</Trans>\r\n          </NoInfoAvailable>\r\n        )}\r\n        {description && (\r\n          <>\r\n            <DescriptionVisibilityWrapper data-testid=\"token-description-full\" $visible={!showTruncatedDescription}>\r\n              {description}\r\n            </DescriptionVisibilityWrapper>\r\n            <DescriptionVisibilityWrapper data-testid=\"token-description-truncated\" $visible={showTruncatedDescription}>\r\n              {truncatedDescription}\r\n            </DescriptionVisibilityWrapper>\r\n          </>\r\n        )}\r\n        {shouldTruncate && (\r\n          <TruncateDescriptionButton\r\n            onClick={toggleIsDescriptionTruncated}\r\n            data-testid=\"token-description-show-more-button\"\r\n          >\r\n            {isDescriptionTruncated ? <Trans>Show more</Trans> : <Trans>Hide</Trans>}\r\n          </TruncateDescriptionButton>\r\n        )}\r\n      </TokenDescriptionContainer>\r\n      {hasFee && (\r\n        <MouseoverTooltip\r\n          placement=\"left\"\r\n          size={TooltipSize.Small}\r\n          text={\r\n            <ThemedText.Caption color=\"neutral2\">\r\n              <FOTTooltipContent />\r\n            </ThemedText.Caption>\r\n          }\r\n        >\r\n          <Column gap=\"sm\">\r\n            {sameFee ? (\r\n              <ThemedText.BodyPrimary>\r\n                {currency.symbol}&nbsp;\r\n                <Trans>fee:</Trans>&nbsp;{sellFeeString}\r\n              </ThemedText.BodyPrimary>\r\n            ) : (\r\n              <>\r\n                <ThemedText.BodyPrimary>\r\n                  {currency.symbol}&nbsp;\r\n                  <Trans>buy fee:</Trans>&nbsp;{buyFeeString}\r\n                </ThemedText.BodyPrimary>{' '}\r\n                <ThemedText.BodyPrimary>\r\n                  {currency.symbol}&nbsp;\r\n                  <Trans>sell fee:</Trans>&nbsp;{sellFeeString}\r\n                </ThemedText.BodyPrimary>{' '}\r\n              </>\r\n            )}\r\n          </Column>\r\n        </MouseoverTooltip>\r\n      )}\r\n    </TokenInfoSection>\r\n  )\r\n}\r\n","import { InterfacePageName } from '@uniswap/analytics-events'\r\nimport { ChainId, Currency } from '@uniswap/sdk-core'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Trace } from 'analytics'\r\nimport { BreadcrumbNavContainer, BreadcrumbNavLink, CurrentPageBreadcrumb } from 'components/BreadcrumbNav'\r\nimport TokenSafetyMessage from 'components/TokenSafety/TokenSafetyMessage'\r\nimport TokenSafetyModal from 'components/TokenSafety/TokenSafetyModal'\r\nimport ChartSection from 'components/Tokens/TokenDetails/ChartSection'\r\nimport { LeftPanel, RightPanel, TokenDetailsLayout, TokenInfoContainer } from 'components/Tokens/TokenDetails/Skeleton'\r\nimport StatsSection from 'components/Tokens/TokenDetails/StatsSection'\r\nimport { NATIVE_CHAIN_ID } from 'constants/tokens'\r\nimport { getTokenDetailsURL } from 'graphql/data/util'\r\nimport { useCurrency } from 'hooks/Tokens'\r\nimport { useScreenSize } from 'hooks/screenSize'\r\nimport useParsedQueryString from 'hooks/useParsedQueryString'\r\nimport { Trans } from 'i18n'\r\nimport { Swap } from 'pages/Swap'\r\nimport { useTDPContext } from 'pages/TokenDetails/TDPContext'\r\nimport { PropsWithChildren, useCallback, useMemo, useState } from 'react'\r\nimport { ChevronRight } from 'react-feather'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { CurrencyState } from 'state/swap/types'\r\nimport styled from 'styled-components'\r\nimport { addressesAreEquivalent } from 'utils/addressesAreEquivalent'\r\nimport { getInitialLogoUrl } from 'utils/getInitialLogoURL'\r\nimport { ActivitySection } from './ActivitySection'\r\nimport BalanceSummary from './BalanceSummary'\r\nimport MobileBalanceSummaryFooter from './MobileBalanceSummaryFooter'\r\nimport { TokenDescription } from './TokenDescription'\r\nimport { TokenDetailsHeader } from './TokenDetailsHeader'\r\nimport { Hr } from './shared'\r\n\r\nconst DividerLine = styled(Hr)`\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n  @media screen and (max-width: ${({ theme }) => theme.breakpoint.sm}px) {\r\n    opacity: 0;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nfunction TDPBreadcrumb() {\r\n  const { address, currency, currencyChain } = useTDPContext()\r\n\r\n  return (\r\n    <BreadcrumbNavContainer aria-label=\"breadcrumb-nav\">\r\n      <BreadcrumbNavLink to={`/explore/${currencyChain.toLowerCase()}`}>\r\n        <Trans>Explore</Trans> <ChevronRight size={14} />\r\n      </BreadcrumbNavLink>\r\n      <BreadcrumbNavLink to={`/explore/tokens/${currencyChain.toLowerCase()}`}>\r\n        <Trans>Tokens</Trans> <ChevronRight size={14} />\r\n      </BreadcrumbNavLink>\r\n      <CurrentPageBreadcrumb address={address} currency={currency} />\r\n    </BreadcrumbNavContainer>\r\n  )\r\n}\r\n\r\nfunction getCurrencyURLAddress(currency?: Currency): string {\r\n  if (!currency) return ''\r\n\r\n  if (currency.isToken) {\r\n    return currency.address\r\n  }\r\n  return NATIVE_CHAIN_ID\r\n}\r\n\r\nfunction useSwapInitialInputCurrency() {\r\n  const { currency } = useTDPContext()\r\n  const parsedQs = useParsedQueryString()\r\n\r\n  const inputTokenAddress = useMemo(() => {\r\n    return typeof parsedQs.inputCurrency === 'string' ? (parsedQs.inputCurrency as string) : undefined\r\n  }, [parsedQs])\r\n\r\n  return useCurrency(inputTokenAddress, currency.chainId)\r\n}\r\n\r\nfunction TDPSwapComponent() {\r\n  const { address, currency, currencyChain, warning } = useTDPContext()\r\n  const appChainId = useWeb3React().chainId ?? ChainId.MAINNET\r\n  const navigate = useNavigate()\r\n\r\n  const handleCurrencyChange = useCallback(\r\n    (tokens: CurrencyState) => {\r\n      const inputCurrencyURLAddress = getCurrencyURLAddress(tokens.inputCurrency)\r\n      const outputCurrencyURLAddress = getCurrencyURLAddress(tokens.outputCurrency)\r\n      if (\r\n        addressesAreEquivalent(inputCurrencyURLAddress, address) ||\r\n        addressesAreEquivalent(outputCurrencyURLAddress, address)\r\n      ) {\r\n        return\r\n      }\r\n\r\n      const newDefaultToken = tokens.outputCurrency ?? tokens.inputCurrency\r\n\r\n      if (!newDefaultToken) return\r\n\r\n      const preloadedLogoSrc = getInitialLogoUrl(\r\n        newDefaultToken.wrapped.address,\r\n        newDefaultToken.chainId,\r\n        newDefaultToken.isNative\r\n      )\r\n      const url = getTokenDetailsURL({\r\n        // The function falls back to \"NATIVE\" if the address is null\r\n        address: newDefaultToken.isNative ? null : newDefaultToken.address,\r\n        chain: currencyChain,\r\n        inputAddress:\r\n          // If only one token was selected before we navigate, then it was the default token and it's being replaced.\r\n          // On the new page, the *new* default token becomes the output, and we don't have another option to set as the input token.\r\n          tokens.inputCurrency && tokens.inputCurrency !== newDefaultToken ? inputCurrencyURLAddress : null,\r\n      })\r\n      navigate(url, { state: { preloadedLogoSrc } })\r\n    },\r\n    [address, currencyChain, navigate]\r\n  )\r\n\r\n  // Other token to prefill the swap form with\r\n  const initialInputCurrency = useSwapInitialInputCurrency()\r\n\r\n  const [openTokenSafetyModal, setOpenTokenSafetyModal] = useState(false)\r\n  const [continueSwap, setContinueSwap] = useState<{ resolve: (value: boolean | PromiseLike<boolean>) => void }>()\r\n\r\n  const onResolveSwap = useCallback(\r\n    (value: boolean) => {\r\n      continueSwap?.resolve(value)\r\n      setContinueSwap(undefined)\r\n    },\r\n    [continueSwap, setContinueSwap]\r\n  )\r\n  const isBlockedToken = warning?.canProceed === false\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{ pointerEvents: isBlockedToken ? 'none' : 'auto' }}\r\n        onClick={() => isBlockedToken && setOpenTokenSafetyModal(true)}\r\n      >\r\n        <Swap\r\n          syncTabToUrl={false}\r\n          chainId={currency.chainId}\r\n          initialInputCurrency={initialInputCurrency}\r\n          initialOutputCurrency={currency}\r\n          onCurrencyChange={handleCurrencyChange}\r\n          disableTokenInputs={currency.chainId !== appChainId}\r\n          compact\r\n        />\r\n      </div>\r\n      {warning && <TokenSafetyMessage tokenAddress={address} warning={warning} />}\r\n      <TokenSafetyModal\r\n        isOpen={openTokenSafetyModal || !!continueSwap}\r\n        token0={currency.isToken ? currency : undefined}\r\n        onContinue={() => onResolveSwap(true)}\r\n        onBlocked={() => {\r\n          setOpenTokenSafetyModal(false)\r\n        }}\r\n        onCancel={() => onResolveSwap(false)}\r\n        showCancel={true}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nfunction TDPAnalytics({ children }: PropsWithChildren) {\r\n  const { address, currency } = useTDPContext()\r\n  return (\r\n    <Trace\r\n      page={InterfacePageName.TOKEN_DETAILS_PAGE}\r\n      properties={{\r\n        tokenAddress: address,\r\n        tokenSymbol: currency.symbol,\r\n        tokenName: currency.name,\r\n        chainId: currency.chainId,\r\n      }}\r\n      shouldLogImpression\r\n    >\r\n      {children}\r\n    </Trace>\r\n  )\r\n}\r\n\r\nexport default function TokenDetails() {\r\n  const { address, currency, tokenQuery } = useTDPContext()\r\n  const tokenQueryData = tokenQuery.data?.token\r\n\r\n  const { lg: isLargeScreenSize } = useScreenSize()\r\n\r\n  return (\r\n    <TDPAnalytics>\r\n      <TokenDetailsLayout>\r\n        <LeftPanel>\r\n          <TDPBreadcrumb />\r\n          <TokenInfoContainer data-testid=\"token-info-container\">\r\n            <TokenDetailsHeader />\r\n          </TokenInfoContainer>\r\n          <ChartSection />\r\n          <StatsSection chainId={currency.chainId} address={address} tokenQueryData={tokenQueryData} />\r\n          <DividerLine />\r\n          <ActivitySection />\r\n        </LeftPanel>\r\n        <RightPanel>\r\n          {isLargeScreenSize && (\r\n            <>\r\n              <TDPSwapComponent />\r\n              <BalanceSummary />\r\n            </>\r\n          )}\r\n          <TokenDescription />\r\n        </RightPanel>\r\n        <MobileBalanceSummaryFooter />\r\n      </TokenDetailsLayout>\r\n    </TDPAnalytics>\r\n  )\r\n}\r\n","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgEye(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14.75 12C14.75 13.517 13.517 14.75 12 14.75C10.483 14.75 9.25004 13.517 9.25004 12C9.25004 11.651 9.32196 11.32 9.44096 11.012C9.63496 11.166 9.86903 11.272 10.136 11.272C10.763 11.272 11.272 10.763 11.272 10.136C11.272 9.86899 11.166 9.63492 11.012 9.44092C11.32 9.32192 11.651 9.25 12 9.25C13.517 9.25 14.75 10.483 14.75 12ZM20.5921 13.4771C19.3651 15.5311 16.609 19 12 19C7.39104 19 4.635 15.5311 3.408 13.4771C2.864 12.5671 2.864 11.4329 3.408 10.5229C4.635 8.46895 7.39104 5 12 5C16.609 5 19.3651 8.46895 20.5921 10.5229C21.1361 11.4329 21.1361 12.5671 20.5921 13.4771ZM16.25 12C16.25 9.657 14.344 7.75 12 7.75C9.65604 7.75 7.75004 9.657 7.75004 12C7.75004 14.343 9.65604 16.25 12 16.25C14.344 16.25 16.25 14.343 16.25 12Z\",\n    fill: \"currentColor\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgEye);\nexport default __webpack_public_path__ + \"static/media/eye.d5b29450daf2ca02a561a18c589c4ccb.svg\";\nexport { ForwardRef as ReactComponent };","import { ChainId } from '@uniswap/sdk-core'\r\nimport { ButtonPrimary } from 'components/Button'\r\nimport { CHAIN_INFO, useIsSupportedChainId } from 'constants/chains'\r\nimport useSelectChain from 'hooks/useSelectChain'\r\nimport { Trans } from 'i18n'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { ThemedText } from 'theme/components'\r\nimport { useChainId } from 'wagmi'\r\n\r\nimport { ReactComponent as EyeIcon } from '../../../assets/svg/eye.svg'\r\n\r\nconst InvalidDetailsContainer = styled.div`\r\n  padding-top: 128px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`\r\n\r\nconst InvalidDetailsText = styled.span`\r\n  margin-top: 28px;\r\n  margin-bottom: 20px;\r\n\r\n  text-align: center;\r\n\r\n  color: ${({ theme }) => theme.neutral2};\r\n  font-size: 20px;\r\n  font-weight: 535;\r\n  line-height: 28px;\r\n`\r\n\r\nconst TokenExploreButton = styled(ButtonPrimary)`\r\n  width: fit-content;\r\n  padding: 12px 16px;\r\n  border-radius: 12px;\r\n\r\n  color: ${({ theme }) => theme.neutral1};\r\n  font-size: 16px;\r\n  font-weight: 535;\r\n`\r\n\r\nexport default function InvalidTokenDetails({\r\n  pageChainId,\r\n  isInvalidAddress,\r\n}: {\r\n  pageChainId: ChainId\r\n  isInvalidAddress?: boolean\r\n}) {\r\n  const chainId = useChainId()\r\n  const isSupportedChain = useIsSupportedChainId(chainId)\r\n  const pageChainIsSupported = useIsSupportedChainId(pageChainId)\r\n  const navigate = useNavigate()\r\n  const selectChain = useSelectChain()\r\n\r\n  // if the token's address is valid and the chains match, it's a non-existant token\r\n  const isNonExistentToken = !isInvalidAddress && pageChainId === chainId\r\n\r\n  const connectedChainLabel = isSupportedChain ? CHAIN_INFO[chainId].label : undefined\r\n\r\n  return (\r\n    <InvalidDetailsContainer>\r\n      <EyeIcon />\r\n      {isInvalidAddress || isNonExistentToken ? (\r\n        <>\r\n          <InvalidDetailsText>\r\n            <Trans>This token doesn&apos;t exist</Trans>\r\n          </InvalidDetailsText>\r\n          <TokenExploreButton onClick={() => navigate('/tokens')}>\r\n            <ThemedText.SubHeader>\r\n              <Trans>Explore tokens</Trans>\r\n            </ThemedText.SubHeader>\r\n          </TokenExploreButton>\r\n        </>\r\n      ) : (\r\n        <>\r\n          {connectedChainLabel && (\r\n            <InvalidDetailsText>\r\n              <Trans>This token doesn&apos;t exist on {{ connectedChainLabel }}</Trans>\r\n            </InvalidDetailsText>\r\n          )}\r\n          <TokenExploreButton onClick={() => selectChain(pageChainId)}>\r\n            <ThemedText.SubHeader>\r\n              <Trans>Switch to {{ label: pageChainIsSupported ? CHAIN_INFO[pageChainId].label : '' }}</Trans>\r\n            </ThemedText.SubHeader>\r\n          </TokenExploreButton>\r\n        </>\r\n      )}\r\n    </InvalidDetailsContainer>\r\n  )\r\n}\r\n","import { ChainId, Currency } from '@uniswap/sdk-core'\r\nimport { CHAIN_INFO, SupportedInterfaceChainId } from 'constants/chains'\r\nimport { t } from 'i18n'\r\n\r\nexport const getTokenPageTitle = (currency?: Currency, chainId?: SupportedInterfaceChainId) => {\r\n  const tokenName = currency?.name\r\n  const tokenSymbol = currency?.symbol\r\n  const baseTitle = t`Buy and sell on Uniswap`\r\n  if (!tokenName && !tokenSymbol) {\r\n    return baseTitle\r\n  }\r\n\r\n  const chainSuffix = chainId && chainId !== ChainId.MAINNET ? ` on ${CHAIN_INFO[chainId].label}` : ''\r\n  if (!tokenName && tokenSymbol) {\r\n    return `${tokenSymbol}${chainSuffix}: ${baseTitle}`\r\n  }\r\n  if (tokenName && !tokenSymbol) {\r\n    return `${tokenName}${chainSuffix}: ${baseTitle}`\r\n  }\r\n  return `${tokenName} (${tokenSymbol})${chainSuffix}: ${baseTitle}`\r\n}\r\n\r\nexport const getTokenPageDescription = (currency?: Currency, chainId?: SupportedInterfaceChainId) => {\r\n  const tokenPageName =\r\n    currency?.name && currency?.symbol\r\n      ? `${currency?.name} (${currency?.symbol})`\r\n      : currency?.name ?? currency?.symbol ?? 'tokens'\r\n  const chainSuffix = chainId && chainId !== ChainId.MAINNET ? ` on ${CHAIN_INFO[chainId].label}` : ''\r\n\r\n  return `Buy, sell, and swap ${tokenPageName}${chainSuffix}. Real-time prices, charts, transaction data, and more.`\r\n}\r\n","import { ChainId } from '@uniswap/sdk-core'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport TokenDetails from 'components/Tokens/TokenDetails'\r\nimport { useCreateTDPChartState } from 'components/Tokens/TokenDetails/ChartSection'\r\nimport InvalidTokenDetails from 'components/Tokens/TokenDetails/InvalidTokenDetails'\r\nimport { TokenDetailsPageSkeleton } from 'components/Tokens/TokenDetails/Skeleton'\r\nimport { useChainFromUrlParam } from 'constants/chains'\r\nimport { useTokenWarning } from 'constants/tokenSafety'\r\nimport { NATIVE_CHAIN_ID, UNKNOWN_TOKEN_SYMBOL, nativeOnChain } from 'constants/tokens'\r\nimport { useTokenBalancesQuery } from 'graphql/data/apollo/TokenBalancesProvider'\r\nimport { getSupportedGraphQlChain, gqlToCurrency } from 'graphql/data/util'\r\nimport { useCurrency } from 'hooks/Tokens'\r\nimport { useSrcColor } from 'hooks/useColor'\r\nimport { useDynamicMetatags } from 'pages/metatags'\r\nimport { useMemo } from 'react'\r\nimport { Helmet } from 'react-helmet-async/lib/index'\r\nimport { useLocation, useParams } from 'react-router-dom'\r\nimport { formatTokenMetatagTitleName } from 'shared-cloud/metatags'\r\nimport { useTheme } from 'styled-components'\r\nimport { ThemeProvider } from 'theme'\r\nimport { useTokenWebQuery } from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\r\nimport { isAddress } from 'utilities/src/addresses'\r\nimport { getNativeTokenDBAddress } from 'utils/nativeTokens'\r\nimport { useChainId } from 'wagmi'\r\nimport { LoadedTDPContext, MultiChainMap, PendingTDPContext, TDPProvider } from './TDPContext'\r\nimport { getTokenPageDescription, getTokenPageTitle } from './utils'\r\n\r\nfunction useOnChainToken(address: string | undefined, chainId: ChainId, skip: boolean) {\r\n  const token = useCurrency(!skip ? address : undefined, chainId)\r\n\r\n  if (skip || !address || (token && token?.symbol === UNKNOWN_TOKEN_SYMBOL)) {\r\n    return undefined\r\n  } else {\r\n    return token\r\n  }\r\n}\r\n\r\n/** Resolves a currency object from the following sources in order of preference: statically stored natives, query data, backup on-chain fetch data */\r\nfunction useTDPCurrency(\r\n  tokenQuery: ReturnType<typeof useTokenWebQuery>,\r\n  tokenAddress: string,\r\n  currencyChainId: ChainId,\r\n  isNative: boolean\r\n) {\r\n  const chainId = useChainId()\r\n  const appChainId = chainId ?? ChainId.MAINNET\r\n\r\n  const queryCurrency = useMemo(() => {\r\n    if (isNative) return nativeOnChain(currencyChainId)\r\n    if (tokenQuery.data?.token) return gqlToCurrency(tokenQuery.data.token)\r\n    return undefined\r\n  }, [isNative, currencyChainId, tokenQuery.data?.token])\r\n  // fetches on-chain token if query data is missing and page chain matches global chain (else fetch won't work)\r\n  const skipOnChainFetch = Boolean(queryCurrency) || currencyChainId !== appChainId\r\n  const onChainToken = useOnChainToken(tokenAddress, currencyChainId, skipOnChainFetch)\r\n  const currency = queryCurrency ?? onChainToken\r\n  const currencyWasFetchedOnChain = !queryCurrency\r\n\r\n  return { currency, currencyWasFetchedOnChain }\r\n}\r\n\r\n/** Returns a map to store addresses and balances of the TDP token on other chains */\r\nfunction useMultiChainMap(tokenQuery: ReturnType<typeof useTokenWebQuery>) {\r\n  // Build map to store addresses and balances of this token on other chains\r\n  const { data: balanceQuery } = useTokenBalancesQuery()\r\n  return useMemo(() => {\r\n    const tokenBalances = balanceQuery?.portfolios?.[0]?.tokenBalances\r\n    const tokensAcrossChains = tokenQuery.data?.token?.project?.tokens\r\n    if (!tokensAcrossChains) return {}\r\n    return tokensAcrossChains.reduce<MultiChainMap>((map, current) => {\r\n      if (current) {\r\n        if (!map[current.chain]) map[current.chain] = {}\r\n        const update = map[current.chain] ?? {}\r\n        update.address = current.address\r\n        update.balance = tokenBalances?.find((tokenBalance) => tokenBalance?.token?.id === current.id)\r\n        map[current.chain] = update\r\n      }\r\n      return map\r\n    }, {})\r\n  }, [balanceQuery?.portfolios, tokenQuery.data?.token?.project?.tokens])\r\n}\r\n\r\nfunction useCreateTDPContext(): PendingTDPContext | LoadedTDPContext {\r\n  const { tokenAddress } = useParams<{ tokenAddress: string }>()\r\n  if (!tokenAddress) throw new Error('Invalid token details route: token address URL param is undefined')\r\n  const currencyChainInfo = getSupportedGraphQlChain(useChainFromUrlParam(), { fallbackToEthereum: true })\r\n\r\n  const isNative = tokenAddress === NATIVE_CHAIN_ID\r\n\r\n  const tokenDBAddress = isNative ? getNativeTokenDBAddress(currencyChainInfo.backendChain.chain) : tokenAddress\r\n\r\n  const tokenQuery = useTokenWebQuery({\r\n    variables: { address: tokenDBAddress, chain: currencyChainInfo.backendChain.chain },\r\n    errorPolicy: 'all',\r\n  })\r\n  const chartState = useCreateTDPChartState(tokenDBAddress, currencyChainInfo.backendChain.chain)\r\n\r\n  const multiChainMap = useMultiChainMap(tokenQuery)\r\n\r\n  const { currency, currencyWasFetchedOnChain } = useTDPCurrency(\r\n    tokenQuery,\r\n    tokenAddress,\r\n    currencyChainInfo.id,\r\n    isNative\r\n  )\r\n\r\n  const warning = useTokenWarning(tokenAddress, currencyChainInfo.id)\r\n\r\n  // Extract color for page usage\r\n  const theme = useTheme()\r\n  const { preloadedLogoSrc } = (useLocation().state as { preloadedLogoSrc?: string }) ?? {}\r\n  const extractedColorSrc = tokenQuery.data?.token?.project?.logoUrl ?? preloadedLogoSrc\r\n  const tokenColor =\r\n    useSrcColor(extractedColorSrc, tokenQuery.data?.token?.name, theme.surface2).tokenColor ?? undefined\r\n\r\n  return useMemo(() => {\r\n    return {\r\n      currency,\r\n      currencyChain: currencyChainInfo.backendChain.chain,\r\n      currencyChainId: currencyChainInfo.id,\r\n      // `currency.address` is checksummed, whereas the `tokenAddress` url param may not be\r\n      address: (currency?.isNative ? NATIVE_CHAIN_ID : currency?.address) ?? tokenAddress,\r\n      currencyWasFetchedOnChain,\r\n      tokenQuery,\r\n      chartState,\r\n      warning,\r\n      multiChainMap,\r\n      tokenColor,\r\n    }\r\n  }, [\r\n    currency,\r\n    currencyChainInfo.backendChain.chain,\r\n    currencyChainInfo.id,\r\n    tokenAddress,\r\n    currencyWasFetchedOnChain,\r\n    tokenQuery,\r\n    chartState,\r\n    warning,\r\n    multiChainMap,\r\n    tokenColor,\r\n  ])\r\n}\r\n\r\nexport default function TokenDetailsPage() {\r\n  const pageChainId = useWeb3React().chainId ?? ChainId.MAINNET\r\n  const contextValue = useCreateTDPContext()\r\n  const { tokenColor, address, currency, currencyChain, currencyChainId, tokenQuery } = contextValue\r\n\r\n  const tokenQueryData = tokenQuery.data?.token\r\n  const metatagProperties = useMemo(() => {\r\n    return {\r\n      title: formatTokenMetatagTitleName(tokenQueryData?.symbol, tokenQueryData?.name),\r\n      image:\r\n        window.location.origin +\r\n        '/api/image/tokens/' +\r\n        currencyChain.toLowerCase() +\r\n        '/' +\r\n        (currency?.isNative ? getNativeTokenDBAddress(currencyChain) : address),\r\n      url: window.location.href,\r\n      description: getTokenPageDescription(currency, currencyChainId),\r\n    }\r\n  }, [address, currency, currencyChain, currencyChainId, tokenQueryData?.name, tokenQueryData?.symbol])\r\n  const metatags = useDynamicMetatags(metatagProperties)\r\n\r\n  return (\r\n    <ThemeProvider accent1={tokenColor ?? undefined}>\r\n      <Helmet>\r\n        <title>{getTokenPageTitle(currency, currencyChainId)}</title>\r\n        {metatags.map((tag, index) => (\r\n          <meta key={index} {...tag} />\r\n        ))}\r\n      </Helmet>\r\n      {(() => {\r\n        if (currency) {\r\n          return (\r\n            <TDPProvider contextValue={contextValue}>\r\n              <TokenDetails />\r\n            </TDPProvider>\r\n          )\r\n        }\r\n\r\n        if (tokenQuery.loading) {\r\n          return <TokenDetailsPageSkeleton />\r\n        } else {\r\n          return <InvalidTokenDetails pageChainId={pageChainId} isInvalidAddress={!isAddress(address)} />\r\n        }\r\n      })()}\r\n    </ThemeProvider>\r\n  )\r\n}\r\n","export type MetaTagInjectorInput = {\r\n  title: string\r\n  image?: string\r\n  url: string\r\n  description?: string\r\n}\r\n\r\nexport function formatTokenMetatagTitleName(symbol: string | undefined, name: string | undefined) {\r\n  if (symbol) {\r\n    return 'Get ' + symbol + ' on Uniswap'\r\n  }\r\n  if (name) {\r\n    return 'Get ' + name + ' on Uniswap'\r\n  }\r\n  return 'View Token on Uniswap'\r\n}\r\n\r\nexport function formatNFTAssetMetatagTitleName(\r\n  name: string | undefined,\r\n  collectionName: string | undefined,\r\n  tokenId: string\r\n) {\r\n  if (name) {\r\n    return name\r\n  }\r\n  if (collectionName && tokenId) {\r\n    return collectionName + ' #' + tokenId\r\n  }\r\n  if (tokenId) {\r\n    return 'Asset #' + tokenId\r\n  }\r\n  return 'View NFT on Uniswap'\r\n}\r\n","export function addressesAreEquivalent(a: string | null | undefined, b: string | null | undefined) {\r\n  if (!a || !b) return false\r\n  return a === b || a.toLowerCase() === b.toLowerCase()\r\n}\r\n"],"names":["getInitialLogoUrl","address","chainId","isNative","backupImg","networkName","isSupportedChainId","getChainInfo","assetRepoNetworkName","checksummedAddress","isAddress","isCelo","nativeOnChain","wrapped","celoLogo","undefined","DEFAULT_QUERY_SIZE","HIDDEN_COLUMNS","PoolTableColumns","Transactions","TokenDetailsPoolsTable","referenceToken","sortMethod","useAtomValue","sortMethodAtom","sortAscending","sortAscendingAtom","sortState","useMemo","sortBy","sortDirection","OrderDirection","Asc","Desc","pools","loading","errorV2","errorV3","loadMore","tokenAddress","dataV2","dataV3","v2ExploreEnabled","useFeatureFlag","FeatureFlags","V2Explore","loadingV3","error","data","fetchMore","fetchMoreV3","useTopV3PoolsQuery","variables","first","chain","chainIdToBackendChain","withFallback","loadingV2","fetchMoreV2","useTopV2PairsQuery","skip","ChainId","MAINNET","loadingMoreV3","useRef","loadingMoreV2","sizeRef","useCallback","onComplete","current","cursor","topV3Pools","length","totalLiquidity","value","updateQuery","prev","fetchMoreResult","Object","keys","mergedData","slice","topV2Pairs","map","pool","hash","token0","token1","txCount","tvl","volume24h","volumeWeek","oneDayApr","calculateOneDayApr","feeTier","protocolVersion","V2_BIPS","sortPools","usePoolsFromTokenAddress","combinedError","ApolloError","errorMessage","allDataStillLoading","useUpdateManualOutage","resetSortMethod","useResetAtom","resetSortAscending","useEffect","div","data-testid","toLowerCase","PoolsTable","maxHeight","hiddenColumns","TokenTransactionType","BUY","SELL","TokenTransactionDefaultQuerySize","StyledSwapAmount","styled","ThemedText","BodyPrimary","EllipsisStyle","TableWrapper","TransactionsTable","activeLocalCurrency","useActiveLocalCurrency","formatNumber","formatFiatPrice","useFormatter","filterModalIsOpen","toggleFilterModal","useReducer","s","filter","setFilters","useState","Swap_OrderBy","Timestamp","transactions","useV3TokenTransactionsQuery","useV2TokenTransactionsQuery","querySizeRef","token","v3Transactions","timestamp","id","Chain","Ethereum","v2Transactions","tx","tokenBeingSold","isSell","parseFloat","token0Quantity","type","PoolTransactionType","Swap","includes","sort","a","b","useTokenTransactions","unwrappedReferenceToken","unwrapToken","transaction","swapLeg0","symbol","amount","swapLeg1","token1Quantity","token0IsBeingSold","input","output","usdValue","makerAddress","account","showLoadingSkeleton","columns","columnHelper","createColumnHelper","accessor","row","header","Cell","minWidth","justifyContent","grow","Row","gap","HeaderArrow","direction","HeaderSortText","$active","Trans","cell","TimestampCell","Number","getValue","link","getExplorerLink","ExplorerDataType","TRANSACTION","FilterHeaderRow","modalOpen","onClick","Filter","allFilters","values","activeFilter","isOpen","BodySecondary","outputTokenAddress","isBuy","String","color","inputTokenAmount","Math","abs","nonReferenceSwapLeg","justify","TokenLinkCell","swapOutput","AmountUsd","fiat","price","StyledExternalLink","href","ADDRESS","shortenAddress","Table","Container","Tab","HeadlineMedium","isActive","theme","neutral1","neutral2","ClickableStyle","ActivitySection","useTDPContext","currency","activityInView","setActivityInView","ActivityTab","Txs","marginBottom","Pools","BalancesCard","BalanceSection","BalanceRow","BalanceItem","BalanceAmountsContainer","Balance","gqlBalance","currencies","formattedGqlBalance","quantity","NumberType","TokenNonTx","formattedUsdGqlValue","denominatedValue","PortfolioBalance","PortfolioLogo","images","tokenProjectMarket","tokenProject","logoUrl","size","PageChainBalanceSummary","pageChainBalance","gqlToCurrency","HeadlineSmall","OtherChainsBalanceSummary","otherChainBalances","hasPageChainBalance","navigate","useNavigate","SubHeaderSmall","balance","supportedChainIdFromGQLChain","getTokenDetailsURL","BalanceSummary","multiChainMap","useWeb3React","currencyChain","key","entries","push","hasBalances","Boolean","Wrapper","surface1","surface3","Z_INDEX","sticky","breakpoint","md","lg","BalanceValue","BalanceInfo","FiatValue","Caption","sm","SwapButton","StyledInternalLink","accent1","neutralContrast","MobileBalanceSummaryFooter","supportedChain","useSupportedChainId","to","NATIVE_CHAIN_ID","TokenInfoSection","Column","InfoSectionHeader","TokenNameRow","TokenButtonRow","TokenInfoButton","surface2","TokenDescriptionContainer","DescriptionVisibilityWrapper","p","$visible","TRUNCATE_CHARACTER_COUNT","TokenDescription","tokenQuery","useTheme","description","homepageUrl","twitterName","project","explorerUrl","NATIVE","TOKEN","isCopied","setCopied","useCopyClipboard","copy","isDescriptionTruncated","toggleIsDescriptionTruncated","x","truncatedDescription","truncateDescription","shouldTruncate","showTruncatedDescription","inputTax","sellFee","outputTax","buyFee","useSwapTaxes","formatPercent","sellFeeString","buyFeeString","hasFee","toFixed","sameFee","Tooltip","placement","TooltipSize","Max","show","text","t","Copy","width","height","ExternalLink","EtherscanLogo","fill","Globe","TwitterXLogo","NoInfoAvailable","TruncateDescriptionButton","MouseoverTooltip","Small","FOTTooltipContent","DividerLine","Hr","TDPBreadcrumb","BreadcrumbNavContainer","aria-label","BreadcrumbNavLink","ChevronRight","CurrentPageBreadcrumb","getCurrencyURLAddress","isToken","TDPSwapComponent","warning","appChainId","handleCurrencyChange","tokens","inputCurrencyURLAddress","inputCurrency","outputCurrencyURLAddress","outputCurrency","addressesAreEquivalent","newDefaultToken","preloadedLogoSrc","url","inputAddress","state","initialInputCurrency","parsedQs","useParsedQueryString","inputTokenAddress","useCurrency","useSwapInitialInputCurrency","openTokenSafetyModal","setOpenTokenSafetyModal","continueSwap","setContinueSwap","onResolveSwap","resolve","isBlockedToken","canProceed","style","pointerEvents","syncTabToUrl","initialOutputCurrency","onCurrencyChange","disableTokenInputs","compact","TokenSafetyMessage","TokenSafetyModal","onContinue","onBlocked","onCancel","showCancel","TDPAnalytics","children","Trace","page","InterfacePageName","TOKEN_DETAILS_PAGE","properties","tokenSymbol","tokenName","name","shouldLogImpression","TokenDetails","tokenQueryData","isLargeScreenSize","useScreenSize","TokenDetailsLayout","LeftPanel","TokenInfoContainer","TokenDetailsHeader","ChartSection","StatsSection","RightPanel","_path","_extends","assign","bind","target","i","arguments","source","prototype","hasOwnProperty","call","apply","this","SvgEye","_ref","svgRef","title","titleId","props","xmlns","viewBox","ref","d","ForwardRef","InvalidDetailsContainer","InvalidDetailsText","span","TokenExploreButton","ButtonPrimary","InvalidTokenDetails","pageChainId","isInvalidAddress","useChainId","isSupportedChain","useIsSupportedChainId","pageChainIsSupported","selectChain","useSelectChain","isNonExistentToken","connectedChainLabel","CHAIN_INFO","label","EyeIcon","SubHeader","getTokenPageTitle","baseTitle","chainSuffix","getTokenPageDescription","useTDPCurrency","currencyChainId","queryCurrency","skipOnChainFetch","onChainToken","UNKNOWN_TOKEN_SYMBOL","useOnChainToken","currencyWasFetchedOnChain","useCreateTDPContext","useParams","Error","currencyChainInfo","getSupportedGraphQlChain","useChainFromUrlParam","fallbackToEthereum","tokenDBAddress","getNativeTokenDBAddress","backendChain","useTokenWebQuery","errorPolicy","chartState","useCreateTDPChartState","balanceQuery","useTokenBalancesQuery","tokenBalances","portfolios","tokensAcrossChains","reduce","update","find","tokenBalance","useMultiChainMap","useTokenWarning","extractedColorSrc","tokenColor","useSrcColor","TokenDetailsPage","contextValue","metatagProperties","formatTokenMetatagTitleName","image","window","location","origin","metatags","useDynamicMetatags","ThemeProvider","Helmet","tag","index","meta","TDPProvider","TokenDetailsPageSkeleton","formatNFTAssetMetatagTitleName","collectionName","tokenId"],"sourceRoot":""}