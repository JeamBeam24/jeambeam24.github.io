{"version":3,"file":"static/js/5773.c4aad2ad.chunk.js","mappings":"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","sources":["nft/components/profile/list/Modal/BelowFloorWarningModal.tsx","nft/components/profile/list/shared.tsx","nft/queries/looksRare/constants.ts","nft/queries/openSea/constants.ts","nft/queries/x2y2/index.ts","nft/queries/looksRare/createLooksRareOrder.ts","nft/queries/openSea/PostOpenSeaSellOrder.ts","nft/utils/x2y2.ts","nft/utils/listNfts.ts","nft/components/profile/list/utils.ts","nft/components/profile/list/ListingButton.tsx","nft/components/profile/list/Modal/ContentRow.tsx","nft/components/profile/list/Modal/ListModalSection.tsx","nft/components/profile/list/Modal/SuccessScreen.tsx","nft/components/profile/list/Modal/ListModal.tsx","nft/components/profile/list/Dropdown.tsx","nft/components/profile/list/PriceTextInput.tsx","nft/components/profile/list/RoyaltyTooltip.tsx","nft/components/profile/list/MarketplaceRow.tsx","nft/components/profile/list/NFTListRow.tsx","nft/components/profile/list/NFTListingsGrid.tsx","nft/components/profile/list/SelectMarketplacesDropdown.tsx","nft/components/profile/list/SetDurationModal.tsx","nft/components/profile/list/ListPage.tsx","nft/components/profile/view/FilterSidebar.tsx","nft/components/layout/Checkbox.css.ts","nft/components/profile/view/ProfilePage.css.ts","constants/query.ts","nft/queries/openSea/OSCollectionsFetcher.ts","nft/components/profile/view/ProfilePageLoadingSkeleton.tsx","nft/components/profile/view/ViewMyNftsAsset.tsx","nft/components/profile/view/ProfilePage.tsx","nft/pages/profile/index.tsx","nft/pages/profile/shared.ts"],"sourcesContent":["import { ButtonPrimary } from 'components/Button'\r\nimport Column from 'components/Column'\r\nimport { Plural, t, Trans } from 'i18n'\r\nimport { Portal } from 'nft/components/common/Portal'\r\nimport { Overlay } from 'nft/components/modals/Overlay'\r\nimport { Listing, WalletAsset } from 'nft/types'\r\nimport React from 'react'\r\nimport { AlertTriangle, X } from 'react-feather'\r\nimport styled, { useTheme } from 'styled-components'\r\nimport { BREAKPOINTS } from 'theme'\r\nimport { ThemedText } from 'theme/components'\r\nimport { Z_INDEX } from 'theme/zIndex'\r\nimport { useFormatter } from 'utils/formatNumbers'\r\n\r\nconst ModalWrapper = styled(Column)`\r\n  position: fixed;\r\n  left: 50%;\r\n  top: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 420px;\r\n  z-index: ${Z_INDEX.modal};\r\n  background: ${({ theme }) => theme.surface1};\r\n  border-radius: 20px;\r\n  border: 1px solid ${({ theme }) => theme.surface3};\r\n  box-shadow: ${({ theme }) => theme.deprecated_deepShadow};\r\n  padding: 20px 24px 24px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    width: 100%;\r\n  }\r\n`\r\nconst CloseIconWrapper = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n`\r\nconst CloseIcon = styled(X)`\r\n  cursor: pointer;\r\n  &:hover {\r\n    opacity: 0.6;\r\n  }\r\n`\r\n\r\nconst HazardIconWrap = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 32px 120px;\r\n`\r\n\r\nconst ContinueButton = styled(ButtonPrimary)`\r\n  font-weight: 535;\r\n  font-size: 20px;\r\n  line-height: 24px;\r\n  margin-top: 12px;\r\n`\r\n\r\nconst EditListings = styled.span`\r\n  font-weight: 535;\r\n  font-size: 16px;\r\n  line-height: 20px;\r\n  color: ${({ theme }) => theme.accent1};\r\n  text-align: center;\r\n  cursor: pointer;\r\n  padding: 12px 16px;\r\n\r\n  &:hover {\r\n    opacity: 0.6;\r\n  }\r\n`\r\n\r\nexport const BelowFloorWarningModal = ({\r\n  listingsBelowFloor,\r\n  closeModal,\r\n  startListing,\r\n}: {\r\n  listingsBelowFloor: [WalletAsset, Listing][]\r\n  closeModal: () => void\r\n  startListing: () => void\r\n}) => {\r\n  const theme = useTheme()\r\n  const { formatDelta } = useFormatter()\r\n  const clickContinue = (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    startListing()\r\n    closeModal()\r\n  }\r\n  return (\r\n    <Portal>\r\n      <ModalWrapper>\r\n        <CloseIconWrapper>\r\n          <CloseIcon width={24} height={24} onClick={closeModal} />{' '}\r\n        </CloseIconWrapper>\r\n        <HazardIconWrap>\r\n          <AlertTriangle height={90} width={90} color={theme.critical} />\r\n        </HazardIconWrap>\r\n        <ThemedText.HeadlineSmall lineHeight=\"28px\" textAlign=\"center\">\r\n          <Trans>Low listing price</Trans>\r\n        </ThemedText.HeadlineSmall>\r\n        <ThemedText.BodyPrimary textAlign=\"center\">\r\n          <Plural\r\n            value={listingsBelowFloor.length !== 1 ? 2 : 1}\r\n            one={t(`One NFT is listed {{delta}} `, {\r\n              delta: formatDelta(\r\n                (1 - (listingsBelowFloor[0][1].price ?? 0) / (listingsBelowFloor[0][0].floorPrice ?? 0)) * 100\r\n              ),\r\n            })}\r\n            other={t(`{{count}} NFTs are listed significantly `, {\r\n              count: listingsBelowFloor.length,\r\n            })}\r\n          />\r\n          &nbsp;\r\n          <Trans>below the collection’s floor price. Are you sure you want to continue?</Trans>\r\n        </ThemedText.BodyPrimary>\r\n        <ContinueButton onClick={clickContinue}>\r\n          <Trans>Continue</Trans>\r\n        </ContinueButton>\r\n        <EditListings onClick={closeModal}>\r\n          <Trans>Edit listings</Trans>\r\n        </EditListings>\r\n      </ModalWrapper>\r\n      <Overlay onClick={closeModal} />\r\n    </Portal>\r\n  )\r\n}\r\n","import Row from 'components/Row'\r\nimport styled from 'styled-components'\r\n\r\nexport const RemoveIconWrap = styled.div<{ hovered: boolean }>`\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 30px;\r\n  transform: translateX(-50%);\r\n  width: 32px;\r\n  visibility: ${({ hovered }) => (hovered ? 'visible' : 'hidden')};\r\n`\r\n\r\nexport const TitleRow = styled(Row)`\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nexport enum SetPriceMethod {\r\n  SAME_PRICE,\r\n  FLOOR_PRICE,\r\n  LAST_PRICE,\r\n  CUSTOM,\r\n}\r\n\r\nexport enum WarningType {\r\n  BELOW_FLOOR,\r\n  ALREADY_LISTED,\r\n  NONE,\r\n}\r\n","export const LOOKSRARE_MARKETPLACE_CONTRACT_721 = '0x59728544B08AB483533076417FbBB2fD0B17CE3a'\r\nexport const LOOKSRARE_MARKETPLACE_CONTRACT_1155 = '0xfed24ec7e22f573c2e08aef55aa6797ca2b3a051'\r\n","export const OPENSEA_FEE_ADDRESS = '0x0000a26b00c1F0DF003000390027140000fAa719'\r\nexport const OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY =\r\n  '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\r\nexport const OPENSEA_CROSS_CHAIN_CONDUIT = '0x1e0049783f008a0085193e00003d00cd54003c71'\r\nexport const OPENSEA_SEAPORT_V1_5_CONTRACT = '0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC'\r\nexport const OPENSEA_KEY_TO_CONDUIT = { [OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY]: OPENSEA_CROSS_CHAIN_CONDUIT }\r\nexport const INVERSE_BASIS_POINTS = 10000\r\n","import { OrderPayload } from '../../utils/x2y2'\r\n\r\nexport const X2Y2_TRANSFER_CONTRACT_721 = '0xf849de01b080adc3a814fabe1e2087475cf2e354'\r\nexport const X2Y2_TRANSFER_CONTRACT_1155 = '0x024ac22acdb367a3ae52a3d94ac6649fdc1f0779'\r\n\r\nexport const newX2Y2Order = async (payload: OrderPayload): Promise<boolean> => {\r\n  const body = JSON.stringify(payload)\r\n  const url = `${process.env.REACT_APP_TEMP_API_URL}/nft/postX2Y2SellOrderWithApiKey`\r\n  const ac = new AbortController()\r\n  const req = new Request(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json; charset=utf-8',\r\n    },\r\n    body,\r\n    signal: ac.signal,\r\n  })\r\n  const timeout = setTimeout(() => ac.abort(), 60 * 1000)\r\n  try {\r\n    const res = await fetch(req)\r\n    const data = await res.json()\r\n    return data.code === 200\r\n  } catch (e) {\r\n    return false\r\n  } finally {\r\n    clearTimeout(timeout)\r\n  }\r\n}\r\n\r\nexport const getX2Y2OrderId = async (collectionAddress: string, tokenId: string): Promise<number | undefined> => {\r\n  const url = `${process.env.REACT_APP_TEMP_API_URL}/nft/getX2Y2OrderId?collectionAddress=${collectionAddress}&tokenId=${tokenId}`\r\n  const r = await fetch(url, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json; charset=utf-8',\r\n    },\r\n  })\r\n  const data = await r.json()\r\n  return data?.data?.data?.[0]?.id\r\n}\r\n","export const createLooksRareOrder = async (payload: any): Promise<boolean> => {\r\n  const url = `${process.env.REACT_APP_TEMP_API_URL}/nft/createLooksRareOrder`\r\n  const res = await fetch(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(payload),\r\n  })\r\n  try {\r\n    const data = await res.json()\r\n    return data.success\r\n  } catch (e) {\r\n    return false\r\n  }\r\n}\r\n","import ms from 'ms'\r\n\r\nexport async function PostOpenSeaSellOrder(payload?: Record<string, unknown>): Promise<boolean> {\r\n  const body = payload ? JSON.stringify(payload) : undefined\r\n  const url = `${process.env.REACT_APP_TEMP_API_URL}/nft/postOpenSeaSellOrderWithApiKey`\r\n  const ac = new AbortController()\r\n  const req = new Request(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json; charset=utf-8',\r\n    },\r\n    body,\r\n    signal: ac.signal,\r\n  })\r\n  const timeout = setTimeout(() => ac.abort(), ms(`60s`))\r\n  try {\r\n    const res = await fetch(req)\r\n    const data = await res.json()\r\n\r\n    return data.code === 200\r\n  } catch (e) {\r\n    return false\r\n  } finally {\r\n    clearTimeout(timeout)\r\n  }\r\n}\r\n","import { defaultAbiCoder } from '@ethersproject/abi'\r\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber'\r\nimport { hexZeroPad } from '@ethersproject/bytes'\r\nimport { AddressZero } from '@ethersproject/constants'\r\nimport { keccak256 } from '@ethersproject/keccak256'\r\nimport type { Web3Provider } from '@ethersproject/providers'\r\nimport { randomBytes } from '@ethersproject/random'\r\nimport { NftStandard } from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\r\n\r\nconst dataParamType = `tuple(address token, uint256 tokenId, uint256 amount)[]`\r\nconst orderItemParamType = `tuple(uint256 price, bytes data)`\r\nconst orderParamTypes = [\r\n  `uint256`,\r\n  `address`,\r\n  `uint256`,\r\n  `uint256`,\r\n  `uint256`,\r\n  `uint256`,\r\n  `address`,\r\n  `bytes`,\r\n  `uint256`,\r\n  `${orderItemParamType}[]`,\r\n]\r\nconst orderParamType = `tuple(uint256 salt, address user, uint256 network, uint256 intent, uint256 delegateType, uint256 deadline, address currency, bytes dataMask, ${orderItemParamType}[] items, bytes32 r, bytes32 s, uint8 v, uint8 signVersion)`\r\n\r\nexport type OfferItem = {\r\n  price: BigNumber\r\n  tokens: {\r\n    token: string\r\n    tokenId: BigNumberish\r\n    amount: number\r\n  }[]\r\n}\r\n\r\ntype OrderItem = {\r\n  price: BigNumberish\r\n  data: string\r\n}\r\n\r\ntype Order = {\r\n  salt: BigNumberish\r\n  user: string\r\n  network: BigNumberish\r\n  intent: BigNumberish\r\n  delegateType: BigNumberish\r\n  deadline: BigNumberish\r\n  currency: string\r\n  dataMask: string\r\n  items: OrderItem[]\r\n  // signature\r\n  r: string\r\n  s: string\r\n  v: number\r\n  signVersion: number\r\n}\r\n\r\nexport type OrderPayload = {\r\n  order: string\r\n  isBundle: boolean\r\n  bundleName: string\r\n  bundleDesc: string\r\n  orderIds: number[]\r\n  changePrice: boolean\r\n  isCollection: boolean\r\n}\r\n\r\nconst randomSalt = () => {\r\n  const randomHex = BigNumber.from(randomBytes(16)).toHexString()\r\n  return hexZeroPad(randomHex, 64)\r\n}\r\n\r\nconst encodeItemData = (data: { token: string; tokenId: BigNumberish; amount: number }[]) => {\r\n  return defaultAbiCoder.encode([dataParamType], [data])\r\n}\r\n\r\nexport const signOrderData = async (web3Provider: Web3Provider, order: Order) => {\r\n  const orderData = defaultAbiCoder.encode(orderParamTypes, [\r\n    order.salt,\r\n    order.user,\r\n    order.network,\r\n    order.intent,\r\n    order.delegateType,\r\n    order.deadline,\r\n    order.currency,\r\n    order.dataMask,\r\n    order.items.length,\r\n    order.items,\r\n  ])\r\n  const orderHash = keccak256(orderData)\r\n  const orderSig = (await web3Provider.send('personal_sign', [orderHash, order.user])) as string\r\n  order.r = `0x${orderSig.slice(2, 66)}`\r\n  order.s = `0x${orderSig.slice(66, 130)}`\r\n  order.v = parseInt(orderSig.slice(130, 132), 16)\r\n  fixSignature(order)\r\n}\r\n\r\nconst fixSignature = (data: Order) => {\r\n  // in geth its always 27/28, in ganache its 0/1. Change to 27/28 to prevent\r\n  // signature malleability if version is 0/1\r\n  // see https://github.com/ethereum/go-ethereum/blob/v1.8.23/internal/ethapi/api.go#L465\r\n  if (data.v < 27) {\r\n    data.v = data.v + 27\r\n  }\r\n}\r\n\r\nexport const encodeOrder = (order: Order): string => {\r\n  return defaultAbiCoder.encode([orderParamType], [order])\r\n}\r\n\r\nexport const createSellOrder = (\r\n  user: string,\r\n  deadline: number,\r\n  items: OfferItem[],\r\n  nftStandard: NftStandard = NftStandard.Erc721\r\n): Order => {\r\n  const salt = randomSalt()\r\n  const network = 1 // mainnet\r\n  const intent = 1 // INTENT_SELL\r\n  const delegateType = nftStandard === NftStandard.Erc721 ? 1 : 2\r\n  const currency = AddressZero // ETH\r\n  return {\r\n    salt,\r\n    user,\r\n    network,\r\n    intent,\r\n    delegateType,\r\n    deadline,\r\n    currency,\r\n    dataMask: '0x',\r\n    items: items.map((item) => ({\r\n      price: item.price,\r\n      data: encodeItemData(item.tokens),\r\n    })),\r\n    r: '',\r\n    s: '',\r\n    v: 0,\r\n    signVersion: 1,\r\n  }\r\n}\r\n","import { Signer } from '@ethersproject/abstract-signer'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport type { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\r\nimport { parseEther } from '@ethersproject/units'\r\nimport { MakerOrder, SupportedChainId, addressesByNetwork, signMakerOrder } from '@looksrare/sdk'\r\nimport { Seaport } from '@opensea/seaport-js'\r\nimport { ItemType } from '@opensea/seaport-js/lib/constants'\r\nimport { ConsiderationInputItem } from '@opensea/seaport-js/lib/types'\r\nimport { ZERO_ADDRESS } from 'constants/misc'\r\nimport { createLooksRareOrder } from 'nft/queries/looksRare'\r\nimport { LOOKSRARE_MARKETPLACE_CONTRACT_721 } from 'nft/queries/looksRare/constants'\r\nimport { PostOpenSeaSellOrder } from 'nft/queries/openSea'\r\nimport {\r\n  INVERSE_BASIS_POINTS,\r\n  OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY,\r\n  OPENSEA_FEE_ADDRESS,\r\n  OPENSEA_KEY_TO_CONDUIT,\r\n  OPENSEA_SEAPORT_V1_5_CONTRACT,\r\n} from 'nft/queries/openSea/constants'\r\nimport { getX2Y2OrderId, newX2Y2Order } from 'nft/queries/x2y2'\r\nimport ERC1155 from 'uniswap/src/abis/erc1155.json'\r\nimport ERC721 from 'uniswap/src/abis/erc721.json'\r\nimport { NftStandard } from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\r\n\r\nimport { ListingMarket, ListingStatus, WalletAsset } from '../types'\r\nimport { OfferItem, OrderPayload, createSellOrder, encodeOrder, signOrderData } from './x2y2'\r\n\r\nexport const LOOKS_RARE_CREATOR_BASIS_POINTS = 50\r\n\r\nexport const ListingMarkets: ListingMarket[] = [\r\n  {\r\n    name: 'X2Y2',\r\n    fee: 0.5,\r\n  },\r\n  {\r\n    name: 'OpenSea',\r\n    fee: 2.5,\r\n  },\r\n]\r\n\r\nconst createConsiderationItem = (basisPoints: string, recipient: string): ConsiderationInputItem => {\r\n  return {\r\n    amount: basisPoints,\r\n    recipient,\r\n  }\r\n}\r\n\r\nconst getConsiderationItems = (\r\n  asset: WalletAsset,\r\n  price: BigNumber,\r\n  signerAddress: string\r\n): {\r\n  sellerFee: ConsiderationInputItem\r\n  creatorFee?: ConsiderationInputItem\r\n  openSeaFee?: ConsiderationInputItem\r\n} => {\r\n  const creatorFeeBasisPoints = asset?.basisPoints ?? 0\r\n  const openSeaBasisPoints = (ListingMarkets.find((market) => market.name === 'OpenSea')?.fee ?? 0) * 100\r\n  const sellerBasisPoints = INVERSE_BASIS_POINTS - creatorFeeBasisPoints - openSeaBasisPoints\r\n\r\n  const creatorFee = price\r\n    .mul(BigNumber.from(creatorFeeBasisPoints))\r\n    .div(BigNumber.from(INVERSE_BASIS_POINTS))\r\n    .toString()\r\n  const sellerFee = price.mul(BigNumber.from(sellerBasisPoints)).div(BigNumber.from(INVERSE_BASIS_POINTS)).toString()\r\n  const openSeaFee = price.mul(BigNumber.from(openSeaBasisPoints)).div(BigNumber.from(INVERSE_BASIS_POINTS)).toString()\r\n\r\n  return {\r\n    sellerFee: createConsiderationItem(sellerFee, signerAddress),\r\n    creatorFee:\r\n      creatorFeeBasisPoints > 0\r\n        ? createConsiderationItem(creatorFee, asset?.asset_contract?.payout_address ?? '')\r\n        : undefined,\r\n    openSeaFee: openSeaBasisPoints ? createConsiderationItem(openSeaFee, OPENSEA_FEE_ADDRESS) : undefined,\r\n  }\r\n}\r\n\r\nexport async function approveCollection(\r\n  operator: string,\r\n  collectionAddress: string,\r\n  signer: Signer,\r\n  setStatus: (newStatus: ListingStatus) => void,\r\n  nftStandard: NftStandard = NftStandard.Erc721\r\n): Promise<void> {\r\n  const contract = new Contract(collectionAddress, nftStandard === NftStandard.Erc721 ? ERC721 : ERC1155, signer)\r\n  const signerAddress = await signer.getAddress()\r\n\r\n  try {\r\n    const approved = await contract.isApprovedForAll(signerAddress, operator)\r\n    if (approved) {\r\n      setStatus(ListingStatus.APPROVED)\r\n      return\r\n    }\r\n\r\n    setStatus(ListingStatus.SIGNING)\r\n    const approvalTransaction = await contract.setApprovalForAll(operator, true)\r\n\r\n    setStatus(ListingStatus.PENDING)\r\n    const tx = await approvalTransaction.wait()\r\n\r\n    tx.status === 1 ? setStatus(ListingStatus.APPROVED) : setStatus(ListingStatus.FAILED)\r\n  } catch (error) {\r\n    if (error.code === 4001) setStatus(ListingStatus.REJECTED)\r\n    else setStatus(ListingStatus.FAILED)\r\n  }\r\n}\r\n\r\nexport async function signListing(\r\n  marketplace: ListingMarket,\r\n  asset: WalletAsset,\r\n  signer: JsonRpcSigner,\r\n  provider: Web3Provider,\r\n  looksRareNonce = 0,\r\n  setStatus: (newStatus: ListingStatus) => void\r\n): Promise<boolean> {\r\n  const seaport = new Seaport(provider, {\r\n    conduitKeyToConduit: OPENSEA_KEY_TO_CONDUIT,\r\n    overrides: {\r\n      defaultConduitKey: OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY,\r\n    },\r\n    seaportVersion: '1.5',\r\n  })\r\n\r\n  const signerAddress = await signer.getAddress()\r\n  const listingPrice = asset.newListings?.find((listing) => listing.marketplace.name === marketplace.name)?.price\r\n  if (!listingPrice || !asset.expirationTime || !asset.asset_contract.address || !asset.tokenId) return false\r\n  switch (marketplace.name) {\r\n    case 'OpenSea':\r\n      try {\r\n        const listingInWei = parseEther(`${listingPrice}`)\r\n        const { sellerFee, creatorFee, openSeaFee } = getConsiderationItems(asset, listingInWei, signerAddress)\r\n        const considerationItems = [sellerFee, creatorFee, openSeaFee].filter(\r\n          (item): item is ConsiderationInputItem => item !== undefined\r\n        )\r\n\r\n        const { executeAllActions } = await seaport.createOrder(\r\n          {\r\n            offer: [\r\n              {\r\n                itemType: asset.asset_contract.tokenType === NftStandard.Erc721 ? ItemType.ERC721 : ItemType.ERC1155,\r\n                token: asset.asset_contract.address,\r\n                identifier: asset.tokenId,\r\n                amount: '1',\r\n              },\r\n            ],\r\n            consideration: considerationItems,\r\n            endTime: asset.expirationTime.toString(),\r\n            zone: ZERO_ADDRESS,\r\n            allowPartialFills: true,\r\n          },\r\n          signerAddress\r\n        )\r\n\r\n        const order = await executeAllActions()\r\n        const seaportV15Order = { ...order, protocol_address: OPENSEA_SEAPORT_V1_5_CONTRACT }\r\n        setStatus(ListingStatus.PENDING)\r\n        const res = await PostOpenSeaSellOrder(seaportV15Order)\r\n        res ? setStatus(ListingStatus.APPROVED) : setStatus(ListingStatus.FAILED)\r\n        return res\r\n      } catch (error) {\r\n        if (error.code === 4001) setStatus(ListingStatus.REJECTED)\r\n        else setStatus(ListingStatus.FAILED)\r\n        return false\r\n      }\r\n    case 'LooksRare': {\r\n      const addresses = addressesByNetwork[SupportedChainId.MAINNET]\r\n      const currentTime = Math.round(Date.now() / 1000)\r\n      const makerOrder: MakerOrder = {\r\n        // true --> ask / false --> bid\r\n        isOrderAsk: true,\r\n        // signer address of the maker order\r\n        signer: signerAddress,\r\n        // collection address\r\n        collection: asset.asset_contract.address,\r\n        // Price in WEI\r\n        price: parseEther(listingPrice.toString()),\r\n        // Token ID\r\n        tokenId: BigNumber.from(asset.tokenId),\r\n        // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\r\n        amount: BigNumber.from(1),\r\n        // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice), see addresses in the SDK\r\n        strategy: addresses.STRATEGY_STANDARD_SALE,\r\n        // currency address\r\n        currency: addresses.WETH,\r\n        // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\r\n        nonce: BigNumber.from(looksRareNonce),\r\n        // startTime timestamp in seconds\r\n        startTime: BigNumber.from(currentTime),\r\n        // endTime timestamp in seconds\r\n        endTime: BigNumber.from(asset.expirationTime),\r\n        // minimum ratio to be received by the user (per 10000)\r\n        // As of 11.10.22 LooksRare charges 1.5% + 0.5% if there's creator royalties set https://docs.looksrare.org/blog/looksrare-offers-zero-royalty-trading-shares-protocol-fees-with-creators-instead\r\n        minPercentageToAsk: BigNumber.from(10000)\r\n          .sub(BigNumber.from(150 + (asset.basisPoints ? 50 : 0)))\r\n          .toNumber(),\r\n        // params (e.g., price, target account for private sale)\r\n        params: [],\r\n      }\r\n\r\n      try {\r\n        const signatureHash = await signMakerOrder(\r\n          signer,\r\n          SupportedChainId.MAINNET,\r\n          makerOrder,\r\n          LOOKSRARE_MARKETPLACE_CONTRACT_721\r\n        )\r\n        setStatus(ListingStatus.PENDING)\r\n        const payload = {\r\n          signature: signatureHash,\r\n          tokenId: asset.tokenId,\r\n          collection: asset.asset_contract.address,\r\n          strategy: addresses.STRATEGY_STANDARD_SALE,\r\n          currency: addresses.WETH,\r\n          signer: signerAddress,\r\n          isOrderAsk: true,\r\n          nonce: looksRareNonce,\r\n          amount: 1,\r\n          price: parseEther(listingPrice.toString()).toString(),\r\n          startTime: currentTime,\r\n          endTime: asset.expirationTime,\r\n          minPercentageToAsk: 10000 - (150 + (asset.basisPoints ? 50 : 0)),\r\n          params: [],\r\n        }\r\n        const res = await createLooksRareOrder(payload)\r\n        res ? setStatus(ListingStatus.APPROVED) : setStatus(ListingStatus.FAILED)\r\n        return res\r\n      } catch (error) {\r\n        if (error.code === 4001) setStatus(ListingStatus.REJECTED)\r\n        else setStatus(ListingStatus.FAILED)\r\n        return false\r\n      }\r\n    }\r\n    case 'X2Y2': {\r\n      const orderItem: OfferItem = {\r\n        price: parseEther(listingPrice.toString()),\r\n        tokens: [\r\n          {\r\n            token: asset.asset_contract.address,\r\n            tokenId: BigNumber.from(asset.tokenId),\r\n            amount: 1,\r\n          },\r\n        ],\r\n      }\r\n      const order = createSellOrder(signerAddress, asset.expirationTime, [orderItem], asset.asset_contract.tokenType)\r\n      try {\r\n        const prevOrderId = await getX2Y2OrderId(asset.asset_contract.address, asset.tokenId)\r\n        await signOrderData(provider, order)\r\n        const payload: OrderPayload = {\r\n          order: encodeOrder(order),\r\n          isBundle: false,\r\n          bundleName: '',\r\n          bundleDesc: '',\r\n          orderIds: prevOrderId ? [prevOrderId] : [],\r\n          changePrice: Boolean(prevOrderId),\r\n          isCollection: false,\r\n        }\r\n        setStatus(ListingStatus.PENDING)\r\n        // call server api\r\n        const resp = await newX2Y2Order(payload)\r\n        resp ? setStatus(ListingStatus.APPROVED) : setStatus(ListingStatus.FAILED)\r\n        return resp\r\n      } catch (error) {\r\n        if (error.code === 4001) setStatus(ListingStatus.REJECTED)\r\n        else setStatus(ListingStatus.FAILED)\r\n        return false\r\n      }\r\n    }\r\n    default:\r\n      return false\r\n  }\r\n}\r\n","import type { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\r\nimport { SupportedChainId, addressesByNetwork } from '@looksrare/sdk'\r\nimport ms from 'ms'\r\nimport { SetPriceMethod, WarningType } from 'nft/components/profile/list/shared'\r\nimport { useNFTList, useSellAsset } from 'nft/hooks'\r\nimport {\r\n  LOOKSRARE_MARKETPLACE_CONTRACT_1155,\r\n  LOOKSRARE_MARKETPLACE_CONTRACT_721,\r\n} from 'nft/queries/looksRare/constants'\r\nimport { OPENSEA_CROSS_CHAIN_CONDUIT } from 'nft/queries/openSea/constants'\r\nimport { X2Y2_TRANSFER_CONTRACT_1155, X2Y2_TRANSFER_CONTRACT_721 } from 'nft/queries/x2y2'\r\nimport { CollectionRow, Listing, ListingMarket, ListingRow, ListingStatus, WalletAsset } from 'nft/types'\r\nimport { LOOKS_RARE_CREATOR_BASIS_POINTS, approveCollection, signListing } from 'nft/utils/listNfts'\r\nimport { Dispatch, useEffect } from 'react'\r\nimport { NftStandard } from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\r\n\r\nexport async function approveCollectionRow(\r\n  collectionRow: CollectionRow,\r\n  signer: JsonRpcSigner,\r\n  setCollectionStatusAndCallback: (\r\n    collection: CollectionRow,\r\n    status: ListingStatus,\r\n    callback?: () => Promise<void>\r\n  ) => void\r\n) {\r\n  const callback = () => approveCollectionRow(collectionRow, signer, setCollectionStatusAndCallback)\r\n  setCollectionStatusAndCallback(collectionRow, ListingStatus.SIGNING, callback)\r\n  const { marketplace, collectionAddress, nftStandard } = collectionRow\r\n  const addresses = addressesByNetwork[SupportedChainId.MAINNET]\r\n  const spender =\r\n    marketplace.name === 'OpenSea'\r\n      ? OPENSEA_CROSS_CHAIN_CONDUIT\r\n      : marketplace.name === 'LooksRare'\r\n      ? collectionRow.nftStandard === NftStandard.Erc721\r\n        ? LOOKSRARE_MARKETPLACE_CONTRACT_721\r\n        : LOOKSRARE_MARKETPLACE_CONTRACT_1155\r\n      : marketplace.name === 'X2Y2'\r\n      ? collectionRow.nftStandard === NftStandard.Erc721\r\n        ? X2Y2_TRANSFER_CONTRACT_721\r\n        : X2Y2_TRANSFER_CONTRACT_1155\r\n      : addresses.TRANSFER_MANAGER_ERC721\r\n  !!collectionAddress &&\r\n    (await approveCollection(\r\n      spender,\r\n      collectionAddress,\r\n      signer,\r\n      (newStatus: ListingStatus) => setCollectionStatusAndCallback(collectionRow, newStatus, callback),\r\n      nftStandard\r\n    ))\r\n}\r\n\r\nexport async function signListingRow(\r\n  listing: ListingRow,\r\n  signer: JsonRpcSigner,\r\n  provider: Web3Provider,\r\n  getLooksRareNonce: () => number,\r\n  setLooksRareNonce: (nonce: number) => void,\r\n  setListingStatusAndCallback: (listing: ListingRow, status: ListingStatus, callback?: () => Promise<void>) => void\r\n) {\r\n  const looksRareNonce = getLooksRareNonce()\r\n  const callback = () => {\r\n    return signListingRow(listing, signer, provider, getLooksRareNonce, setLooksRareNonce, setListingStatusAndCallback)\r\n  }\r\n  setListingStatusAndCallback(listing, ListingStatus.SIGNING, callback)\r\n  const { asset, marketplace } = listing\r\n  const res = await signListing(marketplace, asset, signer, provider, looksRareNonce, (newStatus: ListingStatus) =>\r\n    setListingStatusAndCallback(listing, newStatus, callback)\r\n  )\r\n  res && listing.marketplace.name === 'LooksRare' && setLooksRareNonce(looksRareNonce + 1)\r\n}\r\n\r\nexport const getTotalEthValue = (sellAssets: WalletAsset[]) => {\r\n  const total = sellAssets.reduce((total, asset: WalletAsset) => {\r\n    if (asset.newListings?.length) {\r\n      const maxListing = asset.newListings.reduce((a, b) => ((a.price ?? 0) > (b.price ?? 0) ? a : b))\r\n      // LooksRare is a unique case where creator royalties are a flat 0.5% or 50 basis points\r\n      const maxFee =\r\n        maxListing.marketplace.fee +\r\n        (maxListing.marketplace.name === 'LooksRare' ? LOOKS_RARE_CREATOR_BASIS_POINTS : asset?.basisPoints ?? 0) / 100\r\n      return total + (maxListing.price ?? 0) - (maxListing.price ?? 0) * (maxFee / 100)\r\n    }\r\n    return total\r\n  }, 0)\r\n  return total ? Math.round(total * 10000 + Number.EPSILON) / 10000 : 0\r\n}\r\n\r\nconst getListings = (sellAssets: WalletAsset[]): [CollectionRow[], ListingRow[]] => {\r\n  const newCollectionsToApprove: CollectionRow[] = []\r\n\r\n  const newListings: ListingRow[] = []\r\n  sellAssets.forEach((asset) => {\r\n    asset.marketplaces?.forEach((marketplace: ListingMarket) => {\r\n      const newListing = {\r\n        image: asset.smallImageUrl,\r\n        name: asset.name || `#${asset.tokenId}`,\r\n        status: ListingStatus.DEFINED,\r\n        asset,\r\n        marketplace,\r\n        price: asset.newListings?.find((listing) => listing.marketplace.name === marketplace.name)?.price,\r\n      }\r\n      newListings.push(newListing)\r\n      if (\r\n        !newCollectionsToApprove.some(\r\n          (collectionRow: CollectionRow) =>\r\n            collectionRow.collectionAddress === asset.asset_contract.address &&\r\n            collectionRow.marketplace.name === marketplace.name\r\n        )\r\n      ) {\r\n        const newCollectionRow = {\r\n          image: asset.asset_contract.image_url,\r\n          name: asset.asset_contract.name,\r\n          status: ListingStatus.DEFINED,\r\n          collectionAddress: asset.asset_contract.address,\r\n          isVerified: asset.collectionIsVerified,\r\n          marketplace,\r\n          nftStandard: asset.asset_contract.tokenType,\r\n        }\r\n        newCollectionsToApprove.push(newCollectionRow)\r\n      }\r\n    })\r\n  })\r\n  return [newCollectionsToApprove, newListings]\r\n}\r\n\r\nexport const verifyStatus = (status: ListingStatus) => {\r\n  return status !== ListingStatus.PAUSED && status !== ListingStatus.APPROVED\r\n}\r\n\r\nexport function useSubscribeListingState() {\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  const { setListings, setCollectionsRequiringApproval } = useNFTList(\r\n    ({ setListings, setCollectionsRequiringApproval }) => ({\r\n      setListings,\r\n      setCollectionsRequiringApproval,\r\n    })\r\n  )\r\n  useEffect(() => {\r\n    const [newCollectionsToApprove, newListings] = getListings(sellAssets)\r\n    setListings(newListings)\r\n    setCollectionsRequiringApproval(newCollectionsToApprove)\r\n  }, [sellAssets, setCollectionsRequiringApproval, setListings])\r\n}\r\n\r\nexport function useHandleGlobalPriceToggle(\r\n  globalOverride: boolean,\r\n  setListPrice: Dispatch<number | undefined>,\r\n  setPrice: (price?: number) => void,\r\n  listPrice?: number,\r\n  globalPrice?: number\r\n) {\r\n  useEffect(() => {\r\n    let price: number | undefined\r\n    if (globalOverride) {\r\n      if (!listPrice) setListPrice(globalPrice)\r\n      price = globalPrice\r\n    } else {\r\n      price = listPrice\r\n    }\r\n    setPrice(price)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [globalOverride])\r\n}\r\n\r\nexport function useSyncPriceWithGlobalMethod(\r\n  asset: WalletAsset,\r\n  setListPrice: Dispatch<number | undefined>,\r\n  setGlobalPrice: Dispatch<number | undefined>,\r\n  setGlobalOverride: Dispatch<boolean>,\r\n  listPrice?: number,\r\n  globalPrice?: number,\r\n  globalPriceMethod?: SetPriceMethod\r\n) {\r\n  useEffect(() => {\r\n    if (globalPriceMethod === SetPriceMethod.FLOOR_PRICE) {\r\n      setListPrice(asset?.floorPrice)\r\n      setGlobalPrice(asset.floorPrice)\r\n    } else if (globalPriceMethod === SetPriceMethod.LAST_PRICE) {\r\n      setListPrice(asset.lastPrice)\r\n      setGlobalPrice(asset.lastPrice)\r\n    } else if (globalPriceMethod === SetPriceMethod.SAME_PRICE)\r\n      listPrice && !globalPrice ? setGlobalPrice(listPrice) : setListPrice(globalPrice)\r\n\r\n    setGlobalOverride(false)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [globalPriceMethod])\r\n}\r\n\r\nexport function useUpdateInputAndWarnings(\r\n  setWarningType: Dispatch<WarningType>,\r\n  inputRef: React.MutableRefObject<HTMLInputElement>,\r\n  asset: WalletAsset,\r\n  listPrice?: number\r\n) {\r\n  useEffect(() => {\r\n    setWarningType(WarningType.NONE)\r\n    const price = listPrice ?? 0\r\n    inputRef.current.value = `${price}`\r\n    if (price < (asset?.floorPrice ?? 0) && price > 0) setWarningType(WarningType.BELOW_FLOOR)\r\n    else if (\r\n      asset.floor_sell_order_price &&\r\n      price >= asset.floor_sell_order_price &&\r\n      asset.asset_contract.tokenType !== NftStandard.Erc1155\r\n    )\r\n      setWarningType(WarningType.ALREADY_LISTED)\r\n  }, [\r\n    asset.asset_contract.tokenType,\r\n    asset?.floorPrice,\r\n    asset.floor_sell_order_price,\r\n    inputRef,\r\n    listPrice,\r\n    setWarningType,\r\n  ])\r\n}\r\n\r\nexport const getRoyalty = (listingMarket: ListingMarket, asset: WalletAsset) => {\r\n  // LooksRare is a unique case where royalties for creators are a flat 0.5% or 50 basis points if royalty is set\r\n  const baseFee =\r\n    listingMarket.name === 'LooksRare'\r\n      ? asset.basisPoints\r\n        ? LOOKS_RARE_CREATOR_BASIS_POINTS\r\n        : 0\r\n      : asset.basisPoints ?? 0\r\n\r\n  return baseFee * 0.01\r\n}\r\n\r\nconst BELOW_FLOOR_PRICE_THRESHOLD = 0.8\r\n\r\nexport const findListingIssues = (sellAssets: WalletAsset[]) => {\r\n  const missingExpiration = sellAssets.some((asset) => {\r\n    return (\r\n      asset.expirationTime != null &&\r\n      (isNaN(asset.expirationTime) || asset.expirationTime * 1000 - Date.now() < ms(`60s`))\r\n    )\r\n  })\r\n  const overMaxExpiration = sellAssets.some((asset) => {\r\n    return asset.expirationTime != null && asset.expirationTime * 1000 - Date.now() > ms(`180d`)\r\n  })\r\n\r\n  const listingsMissingPrice: [WalletAsset, Listing][] = []\r\n  const listingsBelowFloor: [WalletAsset, Listing][] = []\r\n  const listingsAboveSellOrderFloor: [WalletAsset, Listing][] = []\r\n  for (const asset of sellAssets) {\r\n    if (asset.newListings) {\r\n      for (const listing of asset.newListings) {\r\n        if (!listing.price) listingsMissingPrice.push([asset, listing])\r\n        else if (listing.price < (asset?.floorPrice ?? 0) * BELOW_FLOOR_PRICE_THRESHOLD && !listing.overrideFloorPrice)\r\n          listingsBelowFloor.push([asset, listing])\r\n        else if (\r\n          asset.floor_sell_order_price &&\r\n          listing.price >= asset.floor_sell_order_price &&\r\n          asset.asset_contract.tokenType !== NftStandard.Erc1155\r\n        )\r\n          listingsAboveSellOrderFloor.push([asset, listing])\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    missingExpiration,\r\n    overMaxExpiration,\r\n    listingsMissingPrice,\r\n    listingsBelowFloor,\r\n    listingsAboveSellOrderFloor,\r\n  }\r\n}\r\n","import { BaseButton } from 'components/Button'\r\nimport { Plural, t, Trans } from 'i18n'\r\nimport { BelowFloorWarningModal } from 'nft/components/profile/list/Modal/BelowFloorWarningModal'\r\nimport { useSellAsset } from 'nft/hooks'\r\nimport { useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { BREAKPOINTS } from 'theme'\r\n\r\nimport { useIsMobile } from 'hooks/screenSize'\r\nimport { findListingIssues } from './utils'\r\n\r\nconst StyledListingButton = styled(BaseButton)<{ showResolveIssues: boolean; missingPrices: boolean }>`\r\n  background: ${({ showResolveIssues, theme }) => (showResolveIssues ? theme.critical : theme.accent1)};\r\n  color: ${({ theme }) => theme.deprecated_accentTextLightPrimary};\r\n  font-weight: 535;\r\n  font-size: 20px;\r\n  line-height: 24px;\r\n  padding: 16px;\r\n  border-radius: 12px;\r\n  width: min-content;\r\n  border: none;\r\n  cursor: ${({ missingPrices }) => (missingPrices ? 'auto' : 'pointer')};\r\n  opacity: ${({ showResolveIssues, missingPrices }) => !showResolveIssues && missingPrices && '0.3'};\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    font-size: 16px;\r\n    line-height: 20px;\r\n    padding: 10px 12px;\r\n  }\r\n`\r\n\r\nexport const ListingButton = ({ onClick }: { onClick: () => void }) => {\r\n  const { sellAssets, showResolveIssues, toggleShowResolveIssues, issues, setIssues } = useSellAsset(\r\n    ({ sellAssets, showResolveIssues, toggleShowResolveIssues, issues, setIssues }) => ({\r\n      sellAssets,\r\n      showResolveIssues,\r\n      toggleShowResolveIssues,\r\n      issues,\r\n      setIssues,\r\n    })\r\n  )\r\n  const [showWarning, setShowWarning] = useState(false)\r\n  const isMobile = useIsMobile()\r\n\r\n  // Find issues with item listing data\r\n  const [listingsMissingPrice, listingsBelowFloor] = useMemo(() => {\r\n    const {\r\n      missingExpiration,\r\n      overMaxExpiration,\r\n      listingsMissingPrice,\r\n      listingsBelowFloor,\r\n      listingsAboveSellOrderFloor,\r\n    } = findListingIssues(sellAssets)\r\n\r\n    // set number of issues\r\n    const foundIssues =\r\n      Number(missingExpiration) +\r\n      Number(overMaxExpiration) +\r\n      listingsMissingPrice.length +\r\n      listingsAboveSellOrderFloor.length\r\n    setIssues(foundIssues)\r\n    !foundIssues && showResolveIssues && toggleShowResolveIssues()\r\n    // Only show Resolve Issue text if there was a user submitted error (ie not when page loads with no prices set)\r\n    if ((missingExpiration || overMaxExpiration || listingsAboveSellOrderFloor.length) && !showResolveIssues)\r\n      toggleShowResolveIssues()\r\n\r\n    return [listingsMissingPrice, listingsBelowFloor]\r\n  }, [sellAssets, setIssues, showResolveIssues, toggleShowResolveIssues])\r\n\r\n  const warningWrappedClick = () => {\r\n    if (issues) !showResolveIssues && toggleShowResolveIssues()\r\n    else if (listingsBelowFloor.length) setShowWarning(true)\r\n    else onClick()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <StyledListingButton\r\n        onClick={warningWrappedClick}\r\n        missingPrices={!!listingsMissingPrice.length}\r\n        showResolveIssues={showResolveIssues}\r\n      >\r\n        {showResolveIssues ? (\r\n          <Plural\r\n            value={issues !== 1 ? 2 : 1}\r\n            one={t`Resolve issue`}\r\n            other={t(`Resolve {{issues}} issues`, { issues })}\r\n          />\r\n        ) : listingsMissingPrice.length && !isMobile ? (\r\n          <Trans>Set prices to continue</Trans>\r\n        ) : (\r\n          <Trans>Start listing</Trans>\r\n        )}\r\n      </StyledListingButton>\r\n\r\n      {showWarning && (\r\n        <BelowFloorWarningModal\r\n          listingsBelowFloor={listingsBelowFloor}\r\n          closeModal={() => setShowWarning(false)}\r\n          startListing={onClick}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import Column from 'components/Column'\r\nimport Loader from 'components/Icons/LoadingSpinner'\r\nimport Row from 'components/Row'\r\nimport { Trans } from 'i18n'\r\nimport { VerifiedIcon } from 'nft/components/icons'\r\nimport { AssetRow, CollectionRow, ListingStatus } from 'nft/types'\r\nimport { getMarketplaceIcon } from 'nft/utils'\r\nimport { useEffect, useRef } from 'react'\r\nimport { Check, XOctagon } from 'react-feather'\r\nimport styled, { css, useTheme } from 'styled-components'\r\nimport { ThemedText } from 'theme/components'\r\nimport { opacify } from 'theme/utils'\r\n\r\nconst ContentColumn = styled(Column)<{ failed: boolean }>`\r\n  background-color: ${({ theme, failed }) => failed && opacify(12, theme.critical)};\r\n  border-radius: 12px;\r\n  padding-bottom: ${({ failed }) => failed && '16px'};\r\n`\r\n\r\nconst ContentRowWrapper = styled(Row)<{ active: boolean; failed: boolean }>`\r\n  padding: 16px;\r\n  border: ${({ failed, theme }) => !failed && `1px solid ${theme.surface3}`};\r\n  border-radius: 12px;\r\n  opacity: ${({ active, failed }) => (active || failed ? '1' : '0.6')};\r\n`\r\n\r\nconst CollectionIcon = styled.img`\r\n  border-radius: 100px;\r\n  height: 24px;\r\n  width: 24px;\r\n  z-index: 1;\r\n`\r\n\r\nconst AssetIcon = styled.img`\r\n  border-radius: 4px;\r\n  height: 24px;\r\n  width: 24px;\r\n  z-index: 1;\r\n`\r\n\r\nconst MarketplaceIcon = styled.div`\r\n  border-radius: 4px;\r\n  height: 24px;\r\n  width: 24px;\r\n  margin-left: -4px;\r\n  margin-right: 12px;\r\n`\r\n\r\nconst ContentName = styled(ThemedText.SubHeaderSmall)`\r\n  color: ${({ theme }) => theme.neutral1};\r\n  line-height: 20px;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  max-width: 40%;\r\n`\r\n\r\nconst ProceedText = styled.span`\r\n  font-weight: 535;\r\n  font-size: 12px;\r\n  line-height: 16px;\r\n  color: ${({ theme }) => theme.neutral2};\r\n`\r\n\r\nconst FailedText = styled.span`\r\n  font-weight: 535;\r\n  font-size: 10px;\r\n  line-height: 12px;\r\n  color: ${({ theme }) => theme.critical};\r\n  margin-left: 4px;\r\n`\r\n\r\nconst StyledVerifiedIcon = styled(VerifiedIcon)`\r\n  height: 16px;\r\n  width: 16px;\r\n  margin-left: 4px;\r\n`\r\n\r\nconst IconWrapper = styled.div`\r\n  margin-left: auto;\r\n  margin-right: 0px;\r\n`\r\n\r\nconst ButtonRow = styled(Row)`\r\n  padding: 0px 16px;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst failedButtonStyle = css`\r\n  width: 152px;\r\n  cursor: pointer;\r\n  padding: 8px 0px;\r\n  text-align: center;\r\n  font-weight: 535;\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  border-radius: 12px;\r\n  border: none;\r\n\r\n  &:hover {\r\n    opacity: 0.6;\r\n  }\r\n`\r\n\r\nconst RemoveButton = styled.button`\r\n  background-color: ${({ theme }) => theme.critical};\r\n  color: ${({ theme }) => theme.neutral1};\r\n  ${failedButtonStyle}\r\n`\r\n\r\nconst RetryButton = styled.button`\r\n  background-color: ${({ theme }) => theme.surface3};\r\n  color: ${({ theme }) => theme.neutral1};\r\n  ${failedButtonStyle}\r\n`\r\n\r\nexport const ContentRow = ({\r\n  row,\r\n  isCollectionApprovalSection,\r\n  removeRow,\r\n}: {\r\n  row: AssetRow\r\n  isCollectionApprovalSection: boolean\r\n  removeRow: (row: AssetRow) => void\r\n}) => {\r\n  const theme = useTheme()\r\n  const rowRef = useRef<HTMLDivElement>()\r\n  const failed = row.status === ListingStatus.FAILED || row.status === ListingStatus.REJECTED\r\n\r\n  useEffect(() => {\r\n    row.status === ListingStatus.SIGNING && rowRef.current?.scroll\r\n  }, [row.status])\r\n\r\n  return (\r\n    <ContentColumn failed={failed}>\r\n      <ContentRowWrapper\r\n        active={row.status === ListingStatus.SIGNING || row.status === ListingStatus.APPROVED}\r\n        failed={failed}\r\n        ref={rowRef}\r\n      >\r\n        {isCollectionApprovalSection ? <CollectionIcon src={row.image} /> : <AssetIcon src={row.image} />}\r\n        <MarketplaceIcon>{getMarketplaceIcon(row.marketplace.name, '24')}</MarketplaceIcon>\r\n        <ContentName>{row.name}</ContentName>\r\n        {isCollectionApprovalSection && (row as CollectionRow).isVerified && <StyledVerifiedIcon />}\r\n        <IconWrapper>\r\n          {row.status === ListingStatus.DEFINED || row.status === ListingStatus.PENDING ? (\r\n            <Loader\r\n              height=\"14px\"\r\n              width=\"14px\"\r\n              stroke={row.status === ListingStatus.PENDING ? theme.accent1 : theme.neutral3}\r\n            />\r\n          ) : row.status === ListingStatus.SIGNING ? (\r\n            <ProceedText>\r\n              <Trans>Proceed in wallet</Trans>\r\n            </ProceedText>\r\n          ) : row.status === ListingStatus.APPROVED ? (\r\n            <Check height=\"20\" width=\"20\" stroke={theme.success} />\r\n          ) : (\r\n            failed && (\r\n              <Row>\r\n                <XOctagon height=\"20\" width=\"20\" color={theme.critical} />\r\n                <FailedText>\r\n                  {row.status === ListingStatus.FAILED ? <Trans>Failed</Trans> : <Trans>Rejected</Trans>}\r\n                </FailedText>\r\n              </Row>\r\n            )\r\n          )}\r\n        </IconWrapper>\r\n      </ContentRowWrapper>\r\n      {failed && (\r\n        <ButtonRow justify=\"space-between\">\r\n          <RemoveButton onClick={() => removeRow(row)}>\r\n            <Trans>Remove</Trans>\r\n          </RemoveButton>\r\n          <RetryButton onClick={row.callback}>\r\n            <Trans>Retry</Trans>\r\n          </RetryButton>\r\n        </ButtonRow>\r\n      )}\r\n    </ContentColumn>\r\n  )\r\n}\r\n","import Column from 'components/Column'\r\nimport { ScrollBarStyles } from 'components/Common'\r\nimport Row from 'components/Row'\r\nimport { MouseoverTooltip } from 'components/Tooltip'\r\nimport { Plural, Trans, t } from 'i18n'\r\nimport { ChevronUpIcon, ListingModalWindowActive, ListingModalWindowClosed } from 'nft/components/icons'\r\nimport { useSellAsset } from 'nft/hooks'\r\nimport { AssetRow, CollectionRow, ListingRow, ListingStatus } from 'nft/types'\r\nimport { useMemo } from 'react'\r\nimport { Info } from 'react-feather'\r\nimport styled, { useTheme } from 'styled-components'\r\nimport { colors } from 'theme/colors'\r\nimport { ThemedText } from 'theme/components'\r\nimport { TRANSITION_DURATIONS } from 'theme/styles'\r\n\r\nimport { ContentRow } from './ContentRow'\r\n\r\nconst SectionHeader = styled(Row)`\r\n  justify-content: space-between;\r\n`\r\n\r\nconst SectionTitle = styled(ThemedText.SubHeader)<{ active: boolean; approved: boolean }>`\r\n  line-height: 24px;\r\n  color: ${({ theme, active, approved }) => (approved ? theme.success : active ? theme.neutral1 : theme.neutral2)};\r\n`\r\n\r\nconst SectionArrow = styled(ChevronUpIcon)<{ active: boolean }>`\r\n  height: 24px;\r\n  width: 24px;\r\n  cursor: pointer;\r\n  transition: ${TRANSITION_DURATIONS.medium}ms;\r\n  transform: rotate(${({ active }) => (active ? 0 : 180)}deg);\r\n`\r\n\r\nconst SectionBody = styled(Column)`\r\n  border-left: 1.5px solid ${colors.gray650};\r\n  margin-top: 4px;\r\n  margin-left: 7px;\r\n  padding-top: 4px;\r\n  padding-left: 20px;\r\n  max-height: 394px;\r\n  overflow-y: auto;\r\n  ${ScrollBarStyles}\r\n`\r\n\r\nconst StyledInfoIcon = styled(Info)`\r\n  height: 16px;\r\n  width: 16px;\r\n  margin-left: 4px;\r\n  color: ${({ theme }) => theme.neutral2};\r\n`\r\n\r\nconst ContentRowContainer = styled(Column)`\r\n  gap: 8px;\r\n  scroll-behavior: smooth;\r\n`\r\n\r\nexport const enum Section {\r\n  APPROVE,\r\n  SIGN,\r\n}\r\n\r\ninterface ListModalSectionProps {\r\n  sectionType: Section\r\n  active: boolean\r\n  content: AssetRow[]\r\n  toggleSection: React.DispatchWithoutAction\r\n}\r\n\r\nexport const ListModalSection = ({ sectionType, active, content, toggleSection }: ListModalSectionProps) => {\r\n  const theme = useTheme()\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  const removeAssetMarketplace = useSellAsset((state) => state.removeAssetMarketplace)\r\n  const allContentApproved = useMemo(() => !content.some((row) => row.status !== ListingStatus.APPROVED), [content])\r\n  const isCollectionApprovalSection = sectionType === Section.APPROVE\r\n  const uniqueCollections = useMemo(() => {\r\n    if (isCollectionApprovalSection) {\r\n      const collections = content.map((collection) => (collection as CollectionRow).collectionAddress)\r\n      const uniqueCollections = [...new Set(collections)]\r\n      return uniqueCollections.length\r\n    }\r\n    return undefined\r\n  }, [content, isCollectionApprovalSection])\r\n  const removeRow = (row: AssetRow) => {\r\n    // collections\r\n    if (isCollectionApprovalSection) {\r\n      const collectionRow = row as CollectionRow\r\n      for (const asset of sellAssets)\r\n        if (asset.asset_contract.address === collectionRow.collectionAddress)\r\n          removeAssetMarketplace(asset, collectionRow.marketplace)\r\n    }\r\n    // listings\r\n    else {\r\n      const listingRow = row as ListingRow\r\n      removeAssetMarketplace(listingRow.asset, listingRow.marketplace)\r\n    }\r\n  }\r\n  return (\r\n    <Column>\r\n      <SectionHeader>\r\n        <Row>\r\n          {active || allContentApproved ? (\r\n            <ListingModalWindowActive fill={allContentApproved ? theme.success : theme.accent1} />\r\n          ) : (\r\n            <ListingModalWindowClosed />\r\n          )}\r\n          <SectionTitle active={active} marginLeft=\"12px\" approved={allContentApproved}>\r\n            {isCollectionApprovalSection ? (\r\n              <>\r\n                <Trans>Approve</Trans>&nbsp;\r\n                <Plural value={uniqueCollections ?? 1} one={t`collection`} other={t`collections`} />\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Trans>Sign</Trans> &nbsp;{content.length}&nbsp;{' '}\r\n                <Plural value={content.length} one={t`listing`} other={t`listings`} />\r\n              </>\r\n            )}\r\n          </SectionTitle>\r\n        </Row>\r\n        <SectionArrow\r\n          active={active}\r\n          secondaryColor={active ? theme.neutral1 : theme.neutral2}\r\n          onClick={toggleSection}\r\n        />\r\n      </SectionHeader>\r\n      {active && (\r\n        <SectionBody>\r\n          {isCollectionApprovalSection && (\r\n            <Row height=\"16px\" marginBottom=\"16px\">\r\n              <ThemedText.BodySmall lineHeight=\"16px\" color=\"neutral2\">\r\n                <Trans>Why is a transaction required?</Trans>\r\n              </ThemedText.BodySmall>\r\n              <MouseoverTooltip\r\n                text={<Trans>Listing an NFT requires a one-time marketplace approval for each NFT collection.</Trans>}\r\n              >\r\n                <StyledInfoIcon />\r\n              </MouseoverTooltip>\r\n            </Row>\r\n          )}\r\n          <ContentRowContainer>\r\n            {content.map((row: AssetRow) => (\r\n              <ContentRow\r\n                row={row}\r\n                key={row?.name ?? row.marketplace.name}\r\n                removeRow={removeRow}\r\n                isCollectionApprovalSection={isCollectionApprovalSection}\r\n              />\r\n            ))}\r\n          </ContentRowContainer>\r\n        </SectionBody>\r\n      )}\r\n    </Column>\r\n  )\r\n}\r\n","import Column from 'components/Column'\r\nimport { ScrollBarStyles } from 'components/Common'\r\nimport Row from 'components/Row'\r\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\r\nimport { Trans } from 'i18n'\r\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\r\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\r\nimport { getTotalEthValue } from 'nft/components/profile/list/utils'\r\nimport { useSellAsset } from 'nft/hooks'\r\nimport { generateTweetForList, pluralize } from 'nft/utils'\r\nimport { useMemo } from 'react'\r\nimport { Twitter, X } from 'react-feather'\r\nimport styled, { css, useTheme } from 'styled-components'\r\nimport { BREAKPOINTS } from 'theme'\r\nimport { ThemedText } from 'theme/components'\r\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\r\nimport { useChainId } from 'wagmi'\r\n\r\nimport { TitleRow } from '../shared'\r\n\r\nconst SuccessImage = styled.img<{ numImages: number }>`\r\n  width: calc(${({ numImages }) => (numImages > 1 ? (numImages > 2 ? '33%' : '50%') : '100%')} - 12px);\r\n  border-radius: 12px;\r\n`\r\n\r\nconst SuccessImageWrapper = styled(Row)`\r\n  flex-wrap: wrap;\r\n  gap: 12px;\r\n  justify-content: center;\r\n  overflow-y: scroll;\r\n  margin-bottom: 16px;\r\n  ${ScrollBarStyles}\r\n`\r\n\r\nconst ProceedsColumn = styled(Column)`\r\n  text-align: right;\r\n`\r\n\r\nconst buttonStyle = css`\r\n  width: 182px;\r\n  cursor: pointer;\r\n  padding: 12px 0px;\r\n  text-align: center;\r\n  font-weight: 535;\r\n  font-size: 16px;\r\n  line-height: 20px;\r\n  border-radius: 12px;\r\n  border: none;\r\n\r\n  &:hover {\r\n    opacity: 0.6;\r\n  }\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    width: 100%;\r\n    margin-bottom: 8px;\r\n  }\r\n`\r\n\r\nconst ReturnButton = styled.button`\r\n  background-color: ${({ theme }) => theme.surface3};\r\n  color: ${({ theme }) => theme.neutral1};\r\n  ${buttonStyle}\r\n`\r\n\r\nconst TweetButton = styled.a`\r\n  background-color: ${({ theme }) => theme.accent1};\r\n  color: ${({ theme }) => theme.deprecated_accentTextLightPrimary};\r\n  text-decoration: none;\r\n  ${buttonStyle}\r\n`\r\n\r\nconst TweetRow = styled(Row)`\r\n  justify-content: center;\r\n  gap: 4px;\r\n`\r\n\r\nexport const SuccessScreen = ({ overlayClick }: { overlayClick: () => void }) => {\r\n  const theme = useTheme()\r\n  const { formatNumberOrString } = useFormatter()\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  const chainId = useChainId()\r\n  const nativeCurrency = useNativeCurrency(chainId)\r\n  const { formatCurrencyAmount } = useFormatter()\r\n\r\n  const totalEthListingValue = useMemo(() => getTotalEthValue(sellAssets), [sellAssets])\r\n  const parsedAmount = tryParseCurrencyAmount(totalEthListingValue.toString(), nativeCurrency)\r\n  const usdcValue = useStablecoinValue(parsedAmount)\r\n\r\n  return (\r\n    <>\r\n      <TitleRow>\r\n        <ThemedText.HeadlineSmall lineHeight=\"28px\">\r\n          <Trans>Successfully listed</Trans>&nbsp;{sellAssets.length > 1 ? ` ${sellAssets.length} ` : ''}\r\n          NFT{pluralize(sellAssets.length)}!\r\n        </ThemedText.HeadlineSmall>\r\n        <X size={24} cursor=\"pointer\" onClick={overlayClick} />\r\n      </TitleRow>\r\n      <SuccessImageWrapper>\r\n        {sellAssets.map((asset) => (\r\n          <SuccessImage\r\n            src={asset.imageUrl}\r\n            key={asset?.asset_contract?.address ?? '' + asset?.tokenId}\r\n            numImages={sellAssets.length}\r\n          />\r\n        ))}\r\n      </SuccessImageWrapper>\r\n      <Row justify=\"space-between\" align=\"flex-start\" marginBottom=\"16px\">\r\n        <ThemedText.SubHeader>\r\n          <Trans>Proceeds if sold</Trans>\r\n        </ThemedText.SubHeader>\r\n        <ProceedsColumn>\r\n          <ThemedText.SubHeader>\r\n            {formatNumberOrString({ input: totalEthListingValue, type: NumberType.NFTToken })} ETH\r\n          </ThemedText.SubHeader>\r\n          {usdcValue && (\r\n            <ThemedText.BodySmall lineHeight=\"20px\" color=\"neutral2\">\r\n              {formatCurrencyAmount({\r\n                amount: usdcValue,\r\n                type: NumberType.FiatTokenPrice,\r\n              })}\r\n            </ThemedText.BodySmall>\r\n          )}\r\n        </ProceedsColumn>\r\n      </Row>\r\n      <Row justify=\"space-between\" style={{ flexWrap: 'wrap' }}>\r\n        <ReturnButton onClick={() => window.location.reload()}>\r\n          <Trans>Return to My NFTs</Trans>\r\n        </ReturnButton>\r\n        <TweetButton href={generateTweetForList(sellAssets)} target=\"_blank\" rel=\"noreferrer\">\r\n          <TweetRow>\r\n            <Twitter\r\n              height={20}\r\n              width={20}\r\n              color={theme.deprecated_accentTextLightPrimary}\r\n              fill={theme.deprecated_accentTextLightPrimary}\r\n            />\r\n            <Trans>Share on Twitter</Trans>\r\n          </TweetRow>\r\n        </TweetButton>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n","import { InterfaceModalName, NFTEventName } from '@uniswap/analytics-events'\r\nimport { Trace, sendAnalyticsEvent, useTrace } from 'analytics'\r\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\r\nimport { Trans } from 'i18n'\r\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\r\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\r\nimport { Portal } from 'nft/components/common/Portal'\r\nimport { Overlay } from 'nft/components/modals/Overlay'\r\nimport { getTotalEthValue, signListingRow } from 'nft/components/profile/list/utils'\r\nimport { useNFTList, useSellAsset } from 'nft/hooks'\r\nimport { ListingStatus } from 'nft/types'\r\nimport { useCallback, useEffect, useMemo, useReducer } from 'react'\r\nimport { X } from 'react-feather'\r\nimport styled from 'styled-components'\r\nimport { BREAKPOINTS } from 'theme'\r\nimport { ThemedText } from 'theme/components'\r\nimport { Z_INDEX } from 'theme/zIndex'\r\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\r\n\r\nimport { useEthersWeb3Provider } from 'hooks/useEthersProvider'\r\nimport { useAccount } from 'wagmi'\r\nimport { TitleRow } from '../shared'\r\nimport { ListModalSection, Section } from './ListModalSection'\r\nimport { SuccessScreen } from './SuccessScreen'\r\n\r\nconst ListModalWrapper = styled.div`\r\n  position: fixed;\r\n  left: 50%;\r\n  top: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 420px;\r\n  z-index: ${Z_INDEX.modal};\r\n  background: ${({ theme }) => theme.surface1};\r\n  border-radius: 20px;\r\n  border: 1px solid ${({ theme }) => theme.surface3};\r\n  box-shadow: ${({ theme }) => theme.deprecated_deepShadow};\r\n  padding: 20px 24px 24px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n`\r\n\r\nexport const ListModal = ({ overlayClick }: { overlayClick: () => void }) => {\r\n  const account = useAccount()\r\n  const provider = useEthersWeb3Provider()\r\n  const signer = provider?.getSigner()\r\n  const trace = useTrace({ modal: InterfaceModalName.NFT_LISTING })\r\n  const { formatCurrencyAmount } = useFormatter()\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  const { setListingStatusAndCallback, setLooksRareNonce, getLooksRareNonce, collectionsRequiringApproval, listings } =\r\n    useNFTList(\r\n      ({\r\n        setListingStatusAndCallback,\r\n        setLooksRareNonce,\r\n        getLooksRareNonce,\r\n        collectionsRequiringApproval,\r\n        listings,\r\n      }) => ({\r\n        setListingStatusAndCallback,\r\n        setLooksRareNonce,\r\n        getLooksRareNonce,\r\n        collectionsRequiringApproval,\r\n        listings,\r\n      })\r\n    )\r\n\r\n  const totalEthListingValue = useMemo(() => getTotalEthValue(sellAssets), [sellAssets])\r\n  const [openSection, toggleOpenSection] = useReducer(\r\n    (s) => (s === Section.APPROVE ? Section.SIGN : Section.APPROVE),\r\n    Section.APPROVE\r\n  )\r\n  const nativeCurrency = useNativeCurrency(account.chainId)\r\n  const parsedAmount = tryParseCurrencyAmount(totalEthListingValue.toString(), nativeCurrency)\r\n  const usdcValue = useStablecoinValue(parsedAmount)\r\n  const usdcAmount = formatCurrencyAmount({\r\n    amount: usdcValue,\r\n    type: NumberType.FiatTokenPrice,\r\n  })\r\n\r\n  const allCollectionsApproved = useMemo(\r\n    () => collectionsRequiringApproval.every((collection) => collection.status === ListingStatus.APPROVED),\r\n    [collectionsRequiringApproval]\r\n  )\r\n\r\n  const allListingsApproved = useMemo(\r\n    () => listings.every((listing) => listing.status === ListingStatus.APPROVED),\r\n    [listings]\r\n  )\r\n\r\n  const signListings = async () => {\r\n    if (!signer || !provider) return\r\n    // sign listings\r\n    for (const listing of listings) {\r\n      await signListingRow(listing, signer, provider, getLooksRareNonce, setLooksRareNonce, setListingStatusAndCallback)\r\n    }\r\n\r\n    sendAnalyticsEvent(NFTEventName.NFT_LISTING_COMPLETED, {\r\n      signatures_approved: listings.filter((asset) => asset.status === ListingStatus.APPROVED),\r\n      list_quantity: listings.length,\r\n      usd_value: usdcAmount,\r\n      ...trace,\r\n    })\r\n  }\r\n\r\n  // Once all collections have been approved, go to next section and start signing listings\r\n  useEffect(() => {\r\n    if (allCollectionsApproved) {\r\n      signListings()\r\n      openSection === Section.APPROVE && toggleOpenSection()\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [allCollectionsApproved])\r\n\r\n  const closeModalOnClick = useCallback(() => {\r\n    allListingsApproved ? window.location.reload() : overlayClick()\r\n  }, [allListingsApproved, overlayClick])\r\n\r\n  // In the case that a user removes all listings via retry logic, close modal\r\n  useEffect(() => {\r\n    !listings.length && closeModalOnClick()\r\n  }, [listings, closeModalOnClick])\r\n\r\n  return (\r\n    <Portal>\r\n      <Trace modal={InterfaceModalName.NFT_LISTING}>\r\n        <ListModalWrapper>\r\n          {allListingsApproved ? (\r\n            <SuccessScreen overlayClick={closeModalOnClick} />\r\n          ) : (\r\n            <>\r\n              <TitleRow>\r\n                <ThemedText.HeadlineSmall lineHeight=\"28px\">\r\n                  <Trans>List NFTs</Trans>\r\n                </ThemedText.HeadlineSmall>\r\n                <X size={24} cursor=\"pointer\" onClick={closeModalOnClick} />\r\n              </TitleRow>\r\n              <ListModalSection\r\n                sectionType={Section.APPROVE}\r\n                active={openSection === Section.APPROVE}\r\n                content={collectionsRequiringApproval}\r\n                toggleSection={toggleOpenSection}\r\n              />\r\n              <ListModalSection\r\n                sectionType={Section.SIGN}\r\n                active={openSection === Section.SIGN}\r\n                content={listings}\r\n                toggleSection={toggleOpenSection}\r\n              />\r\n            </>\r\n          )}\r\n        </ListModalWrapper>\r\n      </Trace>\r\n      <Overlay onClick={closeModalOnClick} />\r\n    </Portal>\r\n  )\r\n}\r\n","import Column from 'components/Column'\r\nimport Row from 'components/Row'\r\nimport { DropDownOption } from 'nft/types'\r\nimport { Check } from 'react-feather'\r\nimport styled, { useTheme } from 'styled-components'\r\nimport { ThemedText } from 'theme/components'\r\n\r\nconst DropdownWrapper = styled(Column)<{ $width: number }>`\r\n  gap: 4px;\r\n  background: ${({ theme }) => theme.surface1};\r\n  padding: 8px;\r\n  width: ${({ $width }) => $width}px;\r\n  border-radius: 12px;\r\n  box-shadow: ${({ theme }) => theme.deprecated_deepShadow};\r\n  border: 1px solid ${({ theme }) => theme.surface3};\r\n`\r\n\r\nconst DropdownRow = styled(Row)`\r\n  justify-content: space-between;\r\n  padding: 8px;\r\n  cursor: pointer;\r\n  border-radius: 12px;\r\n\r\n  &:hover {\r\n    background: ${({ theme }) => theme.surface3};\r\n  }\r\n`\r\n\r\ninterface DropdownArgs {\r\n  dropDownOptions: DropDownOption[]\r\n  width: number\r\n}\r\n\r\nexport const Dropdown = ({ dropDownOptions, width }: DropdownArgs) => {\r\n  const theme = useTheme()\r\n  return (\r\n    <DropdownWrapper $width={width}>\r\n      {dropDownOptions.map((option) => (\r\n        <DropdownRow key={option.displayText} onClick={option.onClick}>\r\n          <ThemedText.BodyPrimary lineHeight=\"24px\">{option.displayText}</ThemedText.BodyPrimary>\r\n          {option.isSelected && <Check height={20} width={20} color={theme.accent1} />}\r\n        </DropdownRow>\r\n      ))}\r\n    </DropdownWrapper>\r\n  )\r\n}\r\n","import Column from 'components/Column'\r\nimport Row from 'components/Row'\r\nimport { Trans } from 'i18n'\r\nimport { BrokenLinkIcon } from 'nft/components/icons'\r\nimport { NumericInput } from 'nft/components/layout/Input'\r\nimport { useUpdateInputAndWarnings } from 'nft/components/profile/list/utils'\r\nimport { body } from 'nft/css/common.css'\r\nimport { useSellAsset } from 'nft/hooks'\r\nimport { WalletAsset } from 'nft/types'\r\nimport { Dispatch, useRef, useState } from 'react'\r\nimport { AlertTriangle, Link } from 'react-feather'\r\nimport styled, { useTheme } from 'styled-components'\r\nimport { BREAKPOINTS } from 'theme'\r\nimport { colors } from 'theme/colors'\r\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\r\n\r\nimport { WarningType } from './shared'\r\n\r\nconst PriceTextInputWrapper = styled(Column)`\r\n  gap: 12px;\r\n  position: relative;\r\n`\r\n\r\nconst InputWrapper = styled(Row)<{ borderColor: string }>`\r\n  height: 48px;\r\n  color: ${({ theme }) => theme.neutral3};\r\n  padding: 12px;\r\n  border: 2px solid;\r\n  border-radius: 8px;\r\n  border-color: ${({ borderColor }) => borderColor};\r\n  margin-right: auto;\r\n  box-sizing: border-box;\r\n`\r\n\r\nconst CurrencyWrapper = styled.div<{ listPrice?: number }>`\r\n  color: ${({ listPrice, theme }) => (listPrice ? theme.neutral1 : theme.neutral2)};\r\n`\r\n\r\nconst GlobalPriceIcon = styled.div`\r\n  display: flex;\r\n  cursor: pointer;\r\n  position: absolute;\r\n  bottom: 32px;\r\n  right: -10px;\r\n  background-color: ${({ theme }) => theme.surface1};\r\n  border-radius: 50%;\r\n  height: 28px;\r\n  width: 28px;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n\r\nconst WarningRow = styled(Row)`\r\n  gap: 4px;\r\n`\r\n\r\nconst WarningMessage = styled(Row)<{ $color: string }>`\r\n  top: 52px;\r\n  width: max-content;\r\n  position: absolute;\r\n  right: 0;\r\n  font-weight: 535;\r\n  font-size: 10px;\r\n  line-height: 12px;\r\n  color: ${({ $color }) => $color};\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    right: unset;\r\n  }\r\n`\r\n\r\nconst WarningAction = styled.div`\r\n  cursor: pointer;\r\n  color: ${({ theme }) => theme.accent1};\r\n`\r\n\r\nconst getWarningMessage = (warning: WarningType) => {\r\n  let message = <></>\r\n  switch (warning) {\r\n    case WarningType.BELOW_FLOOR:\r\n      message = <Trans>below floor price.</Trans>\r\n      break\r\n    case WarningType.ALREADY_LISTED:\r\n      message = <Trans>Already listed at</Trans>\r\n      break\r\n  }\r\n  return message\r\n}\r\n\r\ninterface PriceTextInputProps {\r\n  listPrice?: number\r\n  setListPrice: Dispatch<number | undefined>\r\n  isGlobalPrice: boolean\r\n  setGlobalOverride: Dispatch<boolean>\r\n  globalOverride: boolean\r\n  asset: WalletAsset\r\n}\r\n\r\nexport const PriceTextInput = ({\r\n  listPrice,\r\n  setListPrice,\r\n  isGlobalPrice,\r\n  setGlobalOverride,\r\n  globalOverride,\r\n  asset,\r\n}: PriceTextInputProps) => {\r\n  const { formatNumberOrString, formatDelta } = useFormatter()\r\n  const [warningType, setWarningType] = useState(WarningType.NONE)\r\n  const removeSellAsset = useSellAsset((state) => state.removeSellAsset)\r\n  const showResolveIssues = useSellAsset((state) => state.showResolveIssues)\r\n  const inputRef = useRef() as React.MutableRefObject<HTMLInputElement>\r\n  const theme = useTheme()\r\n\r\n  const percentBelowFloor = (1 - (listPrice ?? 0) / (asset.floorPrice ?? 0)) * 100\r\n  const warningColor =\r\n    (showResolveIssues && !listPrice) ||\r\n    warningType === WarningType.ALREADY_LISTED ||\r\n    (warningType === WarningType.BELOW_FLOOR && percentBelowFloor >= 20)\r\n      ? colors.red400\r\n      : warningType === WarningType.BELOW_FLOOR\r\n      ? theme.deprecated_accentWarning\r\n      : isGlobalPrice || !!listPrice\r\n      ? theme.accent1\r\n      : theme.neutral2\r\n\r\n  const setPrice = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (!listPrice && event.target.value.includes('.') && parseFloat(event.target.value) === 0) {\r\n      return\r\n    }\r\n    const val = parseFloat(event.target.value)\r\n    setListPrice(isNaN(val) ? undefined : val)\r\n  }\r\n\r\n  useUpdateInputAndWarnings(setWarningType, inputRef, asset, listPrice)\r\n\r\n  return (\r\n    <PriceTextInputWrapper>\r\n      <InputWrapper borderColor={warningColor}>\r\n        <NumericInput\r\n          as=\"input\"\r\n          pattern=\"[0-9]\"\r\n          borderStyle=\"none\"\r\n          className={body}\r\n          color={{ placeholder: 'neutral2', default: 'neutral1' }}\r\n          placeholder=\"0\"\r\n          backgroundColor=\"none\"\r\n          width={{ sm: '54', md: '68' }}\r\n          ref={inputRef}\r\n          onChange={setPrice}\r\n        />\r\n        <CurrencyWrapper listPrice={listPrice}>&nbsp;ETH</CurrencyWrapper>\r\n        {(isGlobalPrice || globalOverride) && (\r\n          <GlobalPriceIcon onClick={() => setGlobalOverride(!globalOverride)}>\r\n            {globalOverride ? <BrokenLinkIcon /> : <Link size={20} color={warningColor} />}\r\n          </GlobalPriceIcon>\r\n        )}\r\n      </InputWrapper>\r\n      <WarningMessage $color={warningColor}>\r\n        {warningType !== WarningType.NONE && (\r\n          <WarningRow>\r\n            <AlertTriangle height={16} width={16} color={warningColor} />\r\n            <span>\r\n              {warningType === WarningType.BELOW_FLOOR && `${formatDelta(percentBelowFloor)} `}\r\n              {getWarningMessage(warningType)}\r\n              &nbsp;\r\n              {warningType === WarningType.ALREADY_LISTED &&\r\n                `${formatNumberOrString({\r\n                  input: asset?.floor_sell_order_price ?? 0,\r\n                  type: NumberType.NFTToken,\r\n                })} ETH`}\r\n            </span>\r\n            <WarningAction\r\n              onClick={() => {\r\n                warningType === WarningType.ALREADY_LISTED && removeSellAsset(asset)\r\n                setWarningType(WarningType.NONE)\r\n              }}\r\n            >\r\n              {warningType === WarningType.BELOW_FLOOR ? <Trans>Dismiss</Trans> : <Trans>Remove item</Trans>}\r\n            </WarningAction>\r\n          </WarningRow>\r\n        )}\r\n      </WarningMessage>\r\n    </PriceTextInputWrapper>\r\n  )\r\n}\r\n","import Column from 'components/Column'\r\nimport Row from 'components/Row'\r\nimport { Trans } from 'i18n'\r\nimport { getRoyalty } from 'nft/components/profile/list/utils'\r\nimport { ListingMarket, WalletAsset } from 'nft/types'\r\nimport { getMarketplaceIcon } from 'nft/utils'\r\nimport styled, { css } from 'styled-components'\r\nimport { ThemedText } from 'theme/components'\r\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\r\n\r\nconst FeeWrap = styled(Row)`\r\n  margin-bottom: 4px;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst RoyaltyContainer = styled(Column)`\r\n  gap: 12px;\r\n  padding: 4px 0px;\r\n`\r\n\r\nconst iconStyles = css`\r\n  width: 16px;\r\n  height: 16px;\r\n  outline: 1px solid ${({ theme }) => theme.surface3};\r\n  margin-right: 8px;\r\n`\r\n\r\nconst MarketIcon = styled.div`\r\n  border-radius: 4px;\r\n  ${iconStyles}\r\n`\r\n\r\nconst CollectionIcon = styled.img`\r\n  object-fit: cover;\r\n  border-radius: 50%;\r\n  ${iconStyles}\r\n`\r\n\r\nconst FeePercent = styled(ThemedText.BodySmall)`\r\n  line-height: 16px;\r\n  color: ${({ theme }) => theme.neutral2};\r\n  white-space: nowrap;\r\n`\r\n\r\nconst MaxFeeContainer = styled(Row)`\r\n  justify-content: space-between;\r\n  padding-top: 12px;\r\n  border-top: 1px solid ${({ theme }) => theme.surface3};\r\n`\r\n\r\nexport const RoyaltyTooltip = ({\r\n  selectedMarkets,\r\n  asset,\r\n  fees,\r\n}: {\r\n  selectedMarkets: ListingMarket[]\r\n  asset: WalletAsset\r\n  fees?: number\r\n}) => {\r\n  const { formatNumberOrString, formatDelta } = useFormatter()\r\n  const maxRoyalty = Math.max(...selectedMarkets.map((market) => getRoyalty(market, asset) ?? 0))\r\n  return (\r\n    <RoyaltyContainer>\r\n      {selectedMarkets.map((market) => (\r\n        <FeeWrap key={asset.collection?.address ?? '' + asset.tokenId + market.name + 'fee'}>\r\n          <Row>\r\n            <MarketIcon>{getMarketplaceIcon(market.name, '16')}</MarketIcon>\r\n            <ThemedText.BodySmall lineHeight=\"16px\" marginRight=\"12px\">\r\n              {market.name}&nbsp;\r\n              <Trans>fee</Trans>\r\n            </ThemedText.BodySmall>\r\n          </Row>\r\n          <FeePercent>{formatDelta(market.fee)}</FeePercent>\r\n        </FeeWrap>\r\n      ))}\r\n      <FeeWrap>\r\n        <Row>\r\n          <CollectionIcon src={asset.collection?.imageUrl} />\r\n          <ThemedText.BodySmall lineHeight=\"16px\" marginRight=\"12px\">\r\n            <Trans>Max creator royalties</Trans>\r\n          </ThemedText.BodySmall>\r\n        </Row>\r\n        <FeePercent>{maxRoyalty}%</FeePercent>\r\n      </FeeWrap>\r\n      <MaxFeeContainer>\r\n        <ThemedText.BodySmall lineHeight=\"16px\">\r\n          <Trans>Max fees</Trans>\r\n        </ThemedText.BodySmall>\r\n        <ThemedText.BodySmall lineHeight=\"16px\" color={fees ? 'neutral1' : 'neutral2'}>\r\n          {fees ? formatNumberOrString({ input: fees, type: NumberType.NFTToken }) : '-'} ETH\r\n        </ThemedText.BodySmall>\r\n      </MaxFeeContainer>\r\n    </RoyaltyContainer>\r\n  )\r\n}\r\n","import Column from 'components/Column'\r\nimport Row from 'components/Row'\r\nimport { MouseoverTooltip } from 'components/Tooltip'\r\nimport { t } from 'i18n'\r\nimport { RowsCollpsedIcon, RowsExpandedIcon } from 'nft/components/icons'\r\nimport { getRoyalty, useHandleGlobalPriceToggle, useSyncPriceWithGlobalMethod } from 'nft/components/profile/list/utils'\r\nimport { useSellAsset } from 'nft/hooks'\r\nimport { useNativeUsdPrice } from 'nft/hooks/useUsdPrice'\r\nimport { ListingMarket, WalletAsset } from 'nft/types'\r\nimport { getMarketplaceIcon } from 'nft/utils'\r\nimport { Dispatch, DispatchWithoutAction, useCallback, useEffect, useMemo, useReducer, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { BREAKPOINTS } from 'theme'\r\nimport { ThemedText } from 'theme/components'\r\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\r\n\r\nimport { PriceTextInput } from './PriceTextInput'\r\nimport { RoyaltyTooltip } from './RoyaltyTooltip'\r\nimport { RemoveIconWrap, SetPriceMethod } from './shared'\r\n\r\nconst LastPriceInfo = styled(Column)`\r\n  text-align: left;\r\n  display: none;\r\n  flex: 1;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.lg}px) {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst FloorPriceInfo = styled(Column)`\r\n  text-align: left;\r\n  display: none;\r\n  flex: 1;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst RemoveMarketplaceWrap = styled(RemoveIconWrap)`\r\n  top: 8px;\r\n  left: 16px;\r\n  z-index: 3;\r\n`\r\n\r\nconst MarketIconsWrapper = styled(Row)`\r\n  position: relative;\r\n  margin-right: 12px;\r\n  width: 44px;\r\n  justify-content: flex-end;\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst MarketIconWrapper = styled(Column)`\r\n  position: relative;\r\n  cursor: pointer;\r\n`\r\n\r\nconst MarketIcon = styled.div<{ index: number }>`\r\n  width: 20px;\r\n  height: 20px;\r\n  border-radius: 4px;\r\n  z-index: ${({ index }) => 2 - index};\r\n  margin-left: ${({ index }) => `${index === 0 ? 0 : -8}px`};\r\n  outline: 1px solid ${({ theme }) => theme.surface3};\r\n`\r\n\r\nconst ExpandMarketIconWrapper = styled.div`\r\n  cursor: pointer;\r\n  margin-left: 4px;\r\n  height: 28px;\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst FeeColumnWrapper = styled(Column)`\r\n  flex: 1;\r\n  align-items: flex-end;\r\n  display: none;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst FeeWrapper = styled.div`\r\n  width: min-content;\r\n  white-space: nowrap;\r\n`\r\n\r\nconst ReturnColumn = styled(Column)`\r\n  flex: 1.5;\r\n  display: none;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    display: flex;\r\n  }\r\n`\r\n\r\ninterface MarketplaceRowProps {\r\n  globalPriceMethod?: SetPriceMethod\r\n  globalPrice?: number\r\n  setGlobalPrice: Dispatch<number | undefined>\r\n  selectedMarkets: ListingMarket[]\r\n  removeMarket?: () => void\r\n  asset: WalletAsset\r\n  expandMarketplaceRows?: boolean\r\n  rowHovered?: boolean\r\n  toggleExpandMarketplaceRows: DispatchWithoutAction\r\n}\r\n\r\nexport const MarketplaceRow = ({\r\n  globalPriceMethod,\r\n  globalPrice,\r\n  setGlobalPrice,\r\n  selectedMarkets,\r\n  removeMarket = undefined,\r\n  asset,\r\n  expandMarketplaceRows,\r\n  toggleExpandMarketplaceRows,\r\n  rowHovered,\r\n}: MarketplaceRowProps) => {\r\n  const { formatNumberOrString, formatDelta } = useFormatter()\r\n  const setAssetListPrice = useSellAsset((state) => state.setAssetListPrice)\r\n  const removeAssetMarketplace = useSellAsset((state) => state.removeAssetMarketplace)\r\n  const [marketIconHovered, toggleMarketIconHovered] = useReducer((s) => !s, false)\r\n  const [marketRowHovered, toggleMarketRowHovered] = useReducer((s) => !s, false)\r\n  const [listPrice, setListPrice] = useState<number | undefined>(\r\n    () =>\r\n      asset.newListings?.find((listing) =>\r\n        expandMarketplaceRows ? listing.marketplace.name === selectedMarkets?.[0].name : !!listing.price\r\n      )?.price\r\n  )\r\n  const [globalOverride, setGlobalOverride] = useState(false)\r\n\r\n  const showGlobalPrice = globalPriceMethod === SetPriceMethod.SAME_PRICE && !globalOverride\r\n  const price = showGlobalPrice ? globalPrice : listPrice\r\n  const setPrice = useCallback(\r\n    (price?: number) => {\r\n      showGlobalPrice ? setGlobalPrice(price) : setListPrice(price)\r\n      for (const marketplace of selectedMarkets) setAssetListPrice(asset, price, marketplace)\r\n    },\r\n    [asset, selectedMarkets, setAssetListPrice, setGlobalPrice, showGlobalPrice]\r\n  )\r\n\r\n  const fees = useMemo(() => {\r\n    let maxFee = 0\r\n    for (const selectedMarket of selectedMarkets) {\r\n      const fee = getRoyalty(selectedMarket, asset) + selectedMarket.fee\r\n      maxFee = Math.max(fee, maxFee)\r\n    }\r\n\r\n    return maxFee\r\n  }, [asset, selectedMarkets])\r\n\r\n  const feeInEth = price && (price * fees) / 100\r\n  const userReceives = price && feeInEth && price - feeInEth\r\n\r\n  useHandleGlobalPriceToggle(globalOverride, setListPrice, setPrice, listPrice, globalPrice)\r\n  useSyncPriceWithGlobalMethod(\r\n    asset,\r\n    setListPrice,\r\n    setGlobalPrice,\r\n    setGlobalOverride,\r\n    listPrice,\r\n    globalPrice,\r\n    globalPriceMethod\r\n  )\r\n\r\n  // When in Same Price Mode and not overriding, update local price when global price changes\r\n  useEffect(() => {\r\n    if (showGlobalPrice) {\r\n      setPrice(globalPrice)\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [globalPrice])\r\n\r\n  return (\r\n    <Row onMouseEnter={toggleMarketRowHovered} onMouseLeave={toggleMarketRowHovered}>\r\n      <FloorPriceInfo>\r\n        <ThemedText.BodyPrimary color=\"neutral2\" lineHeight=\"24px\">\r\n          {formatNumberOrString({\r\n            input: asset.floorPrice,\r\n            type: NumberType.NFTToken,\r\n          }) + asset.floorPrice\r\n            ? ' ETH'\r\n            : ''}\r\n        </ThemedText.BodyPrimary>\r\n      </FloorPriceInfo>\r\n      <LastPriceInfo>\r\n        <ThemedText.BodyPrimary color=\"neutral2\" lineHeight=\"24px\">\r\n          {asset.lastPrice ? `${formatNumberOrString({ input: asset.lastPrice, type: NumberType.NFTToken })} ETH` : '-'}\r\n        </ThemedText.BodyPrimary>\r\n      </LastPriceInfo>\r\n\r\n      <Row flex=\"2\">\r\n        {(expandMarketplaceRows || selectedMarkets.length > 1) && (\r\n          <MarketIconsWrapper onMouseEnter={toggleMarketIconHovered} onMouseLeave={toggleMarketIconHovered}>\r\n            {selectedMarkets.map((market, index) => (\r\n              <MarketIconWrapper\r\n                key={market.name + asset.collection?.address + asset.tokenId}\r\n                onClick={(e) => {\r\n                  e.stopPropagation()\r\n                  removeAssetMarketplace(asset, market)\r\n                  removeMarket && removeMarket()\r\n                }}\r\n              >\r\n                <MarketIcon index={index}>{getMarketplaceIcon(market.name, '20')}</MarketIcon>\r\n                <RemoveMarketplaceWrap hovered={marketIconHovered && (expandMarketplaceRows ?? false)}>\r\n                  <img width=\"20px\" src=\"/nft/svgs/minusCircle.svg\" alt=\"Remove item\" />\r\n                </RemoveMarketplaceWrap>\r\n              </MarketIconWrapper>\r\n            ))}\r\n          </MarketIconsWrapper>\r\n        )}\r\n        <PriceTextInput\r\n          listPrice={price}\r\n          setListPrice={setPrice}\r\n          isGlobalPrice={showGlobalPrice}\r\n          setGlobalOverride={setGlobalOverride}\r\n          globalOverride={globalOverride}\r\n          asset={asset}\r\n        />\r\n        {rowHovered && ((expandMarketplaceRows && marketRowHovered) || selectedMarkets.length > 1) && (\r\n          <ExpandMarketIconWrapper onClick={toggleExpandMarketplaceRows}>\r\n            {expandMarketplaceRows ? <RowsExpandedIcon /> : <RowsCollpsedIcon />}\r\n          </ExpandMarketIconWrapper>\r\n        )}\r\n      </Row>\r\n\r\n      <FeeColumnWrapper>\r\n        <MouseoverTooltip\r\n          text={<RoyaltyTooltip selectedMarkets={selectedMarkets} asset={asset} fees={feeInEth} />}\r\n          placement=\"left\"\r\n        >\r\n          <FeeWrapper>\r\n            <ThemedText.BodyPrimary color=\"neutral2\">\r\n              {fees > 0 ? `${formatDelta(fees)}${selectedMarkets.length > 1 ? t`max` : ''}` : '--%'}\r\n            </ThemedText.BodyPrimary>\r\n          </FeeWrapper>\r\n        </MouseoverTooltip>\r\n      </FeeColumnWrapper>\r\n\r\n      <ReturnColumn>\r\n        <EthPriceDisplay ethPrice={userReceives} />\r\n      </ReturnColumn>\r\n    </Row>\r\n  )\r\n}\r\n\r\nconst EthPriceDisplay = ({ ethPrice = 0 }: { ethPrice?: number }) => {\r\n  const { formatNumberOrString } = useFormatter()\r\n  const ethUsdPrice = useNativeUsdPrice()\r\n\r\n  return (\r\n    <Row width=\"100%\" justify=\"flex-end\">\r\n      <ThemedText.BodyPrimary lineHeight=\"24px\" color={ethPrice ? 'neutral1' : 'neutral2'} textAlign=\"right\">\r\n        {ethPrice !== 0 ? (\r\n          <Column>\r\n            <span>{formatNumberOrString({ input: ethPrice, type: NumberType.NFTToken })} ETH</span>\r\n            <ThemedText.BodyPrimary color=\"neutral2\">\r\n              {formatNumberOrString({ input: ethPrice * ethUsdPrice, type: NumberType.FiatNFTToken })}\r\n            </ThemedText.BodyPrimary>\r\n          </Column>\r\n        ) : (\r\n          '- ETH'\r\n        )}\r\n      </ThemedText.BodyPrimary>\r\n    </Row>\r\n  )\r\n}\r\n","import Column from 'components/Column'\r\nimport Row from 'components/Row'\r\nimport { VerifiedIcon } from 'nft/components/icons'\r\nimport { useSellAsset } from 'nft/hooks'\r\nimport { ListingMarket, WalletAsset } from 'nft/types'\r\nimport { Dispatch, useEffect, useReducer, useState } from 'react'\r\nimport { Trash2 } from 'react-feather'\r\nimport styled, { css, useTheme } from 'styled-components'\r\nimport { BREAKPOINTS } from 'theme'\r\nimport { ThemedText } from 'theme/components'\r\n\r\nimport { MarketplaceRow } from './MarketplaceRow'\r\nimport { SetPriceMethod } from './shared'\r\n\r\nconst IMAGE_THUMBNAIL_SIZE = 60\r\n\r\nconst NFTListRowWrapper = styled(Row)`\r\n  padding: 24px 0px;\r\n  align-items: center;\r\n  border-radius: 8px;\r\n\r\n  &:hover {\r\n    background: ${({ theme }) => theme.surface3};\r\n  }\r\n`\r\n\r\nconst RemoveIconContainer = styled.div`\r\n  width: ${IMAGE_THUMBNAIL_SIZE}px;\r\n  height: ${IMAGE_THUMBNAIL_SIZE}px;\r\n  padding-left: 12px;\r\n  align-self: flex-start;\r\n  align-items: center;\r\n  display: flex;\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    display: none;\r\n  }\r\n\r\n  &:hover {\r\n    opacity: ${({ theme }) => theme.opacity.hover};\r\n  }\r\n`\r\n\r\nconst NFTInfoWrapper = styled(Row)`\r\n  align-items: center;\r\n  min-width: 0px;\r\n  flex: 2;\r\n  margin-bottom: auto;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    flex: 1.5;\r\n  }\r\n`\r\n\r\nconst NFTImage = styled.img`\r\n  width: ${IMAGE_THUMBNAIL_SIZE}px;\r\n  height: ${IMAGE_THUMBNAIL_SIZE}px;\r\n  border-radius: 8px;\r\n  margin-right: 8px;\r\n`\r\n\r\nconst HideTextOverflow = css`\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n`\r\n\r\nconst TokenInfoWrapper = styled(Column)`\r\n  margin-right: 8px;\r\n  min-width: 0px;\r\n`\r\n\r\nconst TokenName = styled.div`\r\n  font-weight: 535;\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n  ${HideTextOverflow}\r\n`\r\n\r\nconst CollectionName = styled(ThemedText.BodySmall)`\r\n  color: ${({ theme }) => theme.neutral2};\r\n  line-height: 20px;\r\n  ${HideTextOverflow};\r\n`\r\n\r\nconst MarketPlaceRowWrapper = styled(Column)`\r\n  gap: 24px;\r\n  flex: 1.5;\r\n  margin-right: 12px;\r\n  padding: 6px 0px;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    flex: 2;\r\n  }\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    flex: 3;\r\n  }\r\n`\r\n\r\ninterface NFTListRowProps {\r\n  asset: WalletAsset\r\n  globalPriceMethod?: SetPriceMethod\r\n  setGlobalPrice: Dispatch<number | undefined>\r\n  globalPrice?: number\r\n  selectedMarkets: ListingMarket[]\r\n}\r\n\r\n/**\r\n * NFTListRow is the outermost row wrapper for an NFT Listing, which shows either the composite of multiple marketplaces listings\r\n * or can be expanded to show listings per marketplace\r\n */\r\nexport const NFTListRow = ({\r\n  asset,\r\n  globalPriceMethod,\r\n  globalPrice,\r\n  setGlobalPrice,\r\n  selectedMarkets,\r\n}: NFTListRowProps) => {\r\n  const [expandMarketplaceRows, toggleExpandMarketplaceRows] = useReducer((s) => !s, false)\r\n  const removeAsset = useSellAsset((state) => state.removeSellAsset)\r\n  const [localMarkets, setLocalMarkets] = useState<ListingMarket[]>([])\r\n  const [hovered, toggleHovered] = useReducer((s) => !s, false)\r\n  const theme = useTheme()\r\n\r\n  // Keep localMarkets up to date with changes to globalMarkets\r\n  useEffect(() => {\r\n    setLocalMarkets(JSON.parse(JSON.stringify(selectedMarkets)))\r\n  }, [selectedMarkets])\r\n\r\n  return (\r\n    <NFTListRowWrapper\r\n      onMouseEnter={() => {\r\n        !hovered && toggleHovered()\r\n      }}\r\n      onMouseLeave={() => {\r\n        hovered && toggleHovered()\r\n      }}\r\n    >\r\n      <RemoveIconContainer>\r\n        {hovered && (\r\n          <Trash2\r\n            size={20}\r\n            color={theme.neutral2}\r\n            cursor=\"pointer\"\r\n            onClick={() => {\r\n              removeAsset(asset)\r\n            }}\r\n          />\r\n        )}\r\n      </RemoveIconContainer>\r\n\r\n      <NFTInfoWrapper>\r\n        <NFTImage alt={asset.name} src={asset.imageUrl || '/nft/svgs/image-placeholder.svg'} />\r\n        <TokenInfoWrapper>\r\n          <TokenName>{asset.name ? asset.name : `#${asset.tokenId}`}</TokenName>\r\n          <CollectionName>\r\n            {asset.collection?.name}\r\n            {asset.collectionIsVerified && <VerifiedIcon style={{ marginBottom: '-5px' }} />}\r\n          </CollectionName>\r\n        </TokenInfoWrapper>\r\n      </NFTInfoWrapper>\r\n      <MarketPlaceRowWrapper>\r\n        {expandMarketplaceRows && localMarkets.length > 1 ? (\r\n          localMarkets.map((market) => {\r\n            return (\r\n              <MarketplaceRow\r\n                globalPriceMethod={globalPriceMethod}\r\n                globalPrice={globalPrice}\r\n                setGlobalPrice={setGlobalPrice}\r\n                selectedMarkets={[market]}\r\n                removeMarket={() => setLocalMarkets(localMarkets.filter((oldMarket) => oldMarket.name !== market.name))}\r\n                asset={asset}\r\n                key={asset.name + market.name}\r\n                expandMarketplaceRows={expandMarketplaceRows}\r\n                rowHovered={hovered}\r\n                toggleExpandMarketplaceRows={toggleExpandMarketplaceRows}\r\n              />\r\n            )\r\n          })\r\n        ) : (\r\n          <MarketplaceRow\r\n            globalPriceMethod={globalPriceMethod}\r\n            globalPrice={globalPrice}\r\n            setGlobalPrice={setGlobalPrice}\r\n            selectedMarkets={localMarkets}\r\n            asset={asset}\r\n            rowHovered={hovered}\r\n            toggleExpandMarketplaceRows={toggleExpandMarketplaceRows}\r\n          />\r\n        )}\r\n      </MarketPlaceRowWrapper>\r\n    </NFTListRowWrapper>\r\n  )\r\n}\r\n","import Column from 'components/Column'\r\nimport Row from 'components/Row'\r\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\r\nimport { Trans } from 'i18n'\r\nimport { useSellAsset } from 'nft/hooks'\r\nimport { DropDownOption, ListingMarket } from 'nft/types'\r\nimport { useMemo, useReducer, useRef, useState } from 'react'\r\nimport { ChevronDown } from 'react-feather'\r\nimport styled, { css } from 'styled-components'\r\nimport { BREAKPOINTS } from 'theme'\r\n\r\nimport { Dropdown } from './Dropdown'\r\nimport { NFTListRow } from './NFTListRow'\r\nimport { SetPriceMethod } from './shared'\r\n\r\nconst TableHeader = styled.div`\r\n  display: flex;\r\n  position: sticky;\r\n  align-items: center;\r\n  top: 72px;\r\n  padding-top: 24px;\r\n  padding-bottom: 24px;\r\n  z-index: 3;\r\n  background-color: ${({ theme }) => theme.surface2};\r\n  color: ${({ theme }) => theme.neutral2};\r\n  font-size: 14px;\r\n  font-weight: normal;\r\n  line-height: 20px;\r\n  border-radius: 12px;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.sm}px) {\r\n    padding-left: 48px;\r\n  }\r\n`\r\n\r\nconst NFTHeader = styled.div`\r\n  flex: 2;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    flex: 1.5;\r\n  }\r\n`\r\n\r\nconst PriceHeaders = styled(Row)`\r\n  flex: 1.5;\r\n  margin-right: 12px;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    flex: 3;\r\n  }\r\n`\r\n\r\nconst LastPriceHeader = styled.div`\r\n  display: none;\r\n  flex: 1;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.lg}px) {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst FloorPriceHeader = styled.div`\r\n  display: none;\r\n  flex: 1;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst DropdownAndHeaderWrapper = styled(Row)`\r\n  flex: 2;\r\n  gap: 4px;\r\n`\r\n\r\nconst DropdownPromptContainer = styled(Column)`\r\n  position: relative;\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst DropdownPrompt = styled(Row)`\r\n  gap: 4px;\r\n  background-color: ${({ theme }) => theme.surface3};\r\n  cursor: pointer;\r\n  font-weight: 535;\r\n  font-size: 12px;\r\n  line-height: 16px;\r\n  border-radius: 4px;\r\n  padding: 2px 6px;\r\n  width: min-content;\r\n  white-space: nowrap;\r\n  color: ${({ theme }) => theme.neutral1};\r\n\r\n  &:hover {\r\n    opacity: ${({ theme }) => theme.opacity.hover};\r\n  }\r\n`\r\n\r\nconst DropdownChevron = styled(ChevronDown)<{ isOpen: boolean }>`\r\n  height: 16px;\r\n  width: 16px;\r\n  color: ${({ theme }) => theme.neutral2};\r\n  transform: ${({ isOpen }) => isOpen && 'rotate(180deg)'};\r\n  transition: ${({\r\n    theme: {\r\n      transition: { duration, timing },\r\n    },\r\n  }) => `transform ${duration.fast} ${timing.ease}`};\r\n`\r\n\r\nconst DropdownContainer = styled.div`\r\n  position: absolute;\r\n  top: 36px;\r\n  right: 0px;\r\n`\r\n\r\nconst FeeUserReceivesSharedStyles = css`\r\n  display: none;\r\n  justify-content: flex-end;\r\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst FeeHeader = styled.div`\r\n  flex: 1;\r\n  ${FeeUserReceivesSharedStyles}\r\n`\r\n\r\nconst UserReceivesHeader = styled.div`\r\n  flex: 1.5;\r\n  ${FeeUserReceivesSharedStyles}\r\n`\r\n\r\nconst RowDivider = styled.hr`\r\n  height: 0px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  border-width: 0.5px;\r\n  border-style: solid;\r\n  margin: 0;\r\n  border-color: ${({ theme }) => theme.surface3};\r\n`\r\n\r\nexport const NFTListingsGrid = ({ selectedMarkets }: { selectedMarkets: ListingMarket[] }) => {\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  const [globalPriceMethod, setGlobalPriceMethod] = useState(SetPriceMethod.CUSTOM)\r\n  const [globalPrice, setGlobalPrice] = useState<number>()\r\n  const [showDropdown, toggleShowDropdown] = useReducer((s) => !s, false)\r\n  const dropdownRef = useRef<HTMLDivElement>(null)\r\n  useOnClickOutside(dropdownRef, showDropdown ? toggleShowDropdown : undefined)\r\n\r\n  const priceDropdownOptions: DropDownOption[] = useMemo(\r\n    () => [\r\n      {\r\n        displayText: 'Custom',\r\n        isSelected: globalPriceMethod === SetPriceMethod.CUSTOM,\r\n        onClick: () => {\r\n          setGlobalPriceMethod(SetPriceMethod.CUSTOM)\r\n          toggleShowDropdown()\r\n        },\r\n      },\r\n      {\r\n        displayText: 'Floor price',\r\n        isSelected: globalPriceMethod === SetPriceMethod.FLOOR_PRICE,\r\n        onClick: () => {\r\n          setGlobalPriceMethod(SetPriceMethod.FLOOR_PRICE)\r\n          toggleShowDropdown()\r\n        },\r\n      },\r\n      {\r\n        displayText: 'Last price',\r\n        isSelected: globalPriceMethod === SetPriceMethod.LAST_PRICE,\r\n        onClick: () => {\r\n          setGlobalPriceMethod(SetPriceMethod.LAST_PRICE)\r\n          toggleShowDropdown()\r\n        },\r\n      },\r\n      {\r\n        displayText: 'Same price',\r\n        isSelected: globalPriceMethod === SetPriceMethod.SAME_PRICE,\r\n        onClick: () => {\r\n          setGlobalPriceMethod(SetPriceMethod.SAME_PRICE)\r\n          toggleShowDropdown()\r\n        },\r\n      },\r\n    ],\r\n    [globalPriceMethod]\r\n  )\r\n\r\n  let prompt\r\n  switch (globalPriceMethod) {\r\n    case SetPriceMethod.CUSTOM:\r\n      prompt = <Trans>Custom</Trans>\r\n      break\r\n    case SetPriceMethod.FLOOR_PRICE:\r\n      prompt = <Trans>Floor price</Trans>\r\n      break\r\n    case SetPriceMethod.LAST_PRICE:\r\n      prompt = <Trans>Last price</Trans>\r\n      break\r\n    case SetPriceMethod.SAME_PRICE:\r\n      prompt = <Trans>Same price</Trans>\r\n      break\r\n    default:\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Column>\r\n      <TableHeader>\r\n        <NFTHeader>\r\n          <Trans>NFT</Trans>\r\n        </NFTHeader>\r\n        <PriceHeaders>\r\n          <FloorPriceHeader>\r\n            <Trans>Floor</Trans>\r\n          </FloorPriceHeader>\r\n          <LastPriceHeader>\r\n            <Trans>Last</Trans>\r\n          </LastPriceHeader>\r\n\r\n          <DropdownAndHeaderWrapper ref={dropdownRef}>\r\n            <Trans>Price</Trans>\r\n            <DropdownPromptContainer>\r\n              <DropdownPrompt onClick={toggleShowDropdown}>\r\n                {prompt} <DropdownChevron isOpen={showDropdown} />\r\n              </DropdownPrompt>\r\n              {showDropdown && (\r\n                <DropdownContainer>\r\n                  <Dropdown dropDownOptions={priceDropdownOptions} width={200} />\r\n                </DropdownContainer>\r\n              )}\r\n            </DropdownPromptContainer>\r\n          </DropdownAndHeaderWrapper>\r\n\r\n          <FeeHeader>\r\n            <Trans>Fees</Trans>\r\n          </FeeHeader>\r\n          <UserReceivesHeader>\r\n            <Trans>You receive</Trans>\r\n          </UserReceivesHeader>\r\n        </PriceHeaders>\r\n      </TableHeader>\r\n      {sellAssets.map((asset) => {\r\n        return (\r\n          <>\r\n            <NFTListRow\r\n              asset={asset}\r\n              globalPriceMethod={globalPriceMethod}\r\n              globalPrice={globalPrice}\r\n              setGlobalPrice={setGlobalPrice}\r\n              selectedMarkets={selectedMarkets}\r\n            />\r\n            {sellAssets.indexOf(asset) < sellAssets.length - 1 && <RowDivider />}\r\n          </>\r\n        )\r\n      })}\r\n    </Column>\r\n  )\r\n}\r\n","import { SMALL_MEDIA_BREAKPOINT } from 'components/Tokens/constants'\r\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\r\nimport { Column, Row } from 'nft/components/Flex'\r\nimport { ChevronUpIcon } from 'nft/components/icons'\r\nimport { Checkbox } from 'nft/components/layout/Checkbox'\r\nimport { buttonTextMedium, caption } from 'nft/css/common.css'\r\nimport { themeVars } from 'nft/css/sprinkles.css'\r\nimport { ListingMarket } from 'nft/types'\r\nimport { getMarketplaceIcon } from 'nft/utils'\r\nimport { ListingMarkets } from 'nft/utils/listNfts'\r\nimport { Dispatch, FormEvent, useMemo, useReducer, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ThemedText } from 'theme/components'\r\nimport { Z_INDEX } from 'theme/zIndex'\r\n\r\nconst MarketplaceRowWrapper = styled(Row)`\r\n  gap: 6px;\r\n  height: 44px;\r\n  width: 100%;\r\n  cursor: pointer;\r\n  justify-content: space-between;\r\n  padding: 0px 16px;\r\n  &:hover {\r\n    background-color: ${({ theme }) => theme.surface3};\r\n  }\r\n  border-radius: 12px;\r\n`\r\n\r\nconst FeeText = styled.div`\r\n  color: ${({ theme }) => theme.neutral2};\r\n`\r\n\r\ninterface MarketplaceRowProps {\r\n  market: ListingMarket\r\n  setSelectedMarkets: Dispatch<ListingMarket[]>\r\n  selectedMarkets: ListingMarket[]\r\n}\r\n\r\nconst MarketplaceRow = ({ market, setSelectedMarkets, selectedMarkets }: MarketplaceRowProps) => {\r\n  const isSelected = selectedMarkets.includes(market)\r\n  const [hovered, toggleHovered] = useReducer((s) => !s, false)\r\n\r\n  const toggleSelected = () => {\r\n    if (selectedMarkets.length === 1 && isSelected) return\r\n    isSelected\r\n      ? setSelectedMarkets(selectedMarkets.filter((selected: ListingMarket) => selected !== market))\r\n      : setSelectedMarkets([...selectedMarkets, market])\r\n  }\r\n\r\n  const handleCheckbox = (e: FormEvent) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n  }\r\n  return (\r\n    <MarketplaceRowWrapper onMouseEnter={toggleHovered} onMouseLeave={toggleHovered} onClick={toggleSelected}>\r\n      <Row gap=\"12\" onClick={toggleSelected}>\r\n        {getMarketplaceIcon(market.name, '24')}\r\n        <Column>\r\n          <ThemedText.BodyPrimary>{market.name}</ThemedText.BodyPrimary>\r\n          <FeeText className={caption}>{market.fee}% fee</FeeText>\r\n        </Column>\r\n      </Row>\r\n\r\n      <Checkbox hovered={hovered} checked={isSelected} onClick={handleCheckbox}>\r\n        <span />\r\n      </Checkbox>\r\n    </MarketplaceRowWrapper>\r\n  )\r\n}\r\n\r\nconst HeaderButtonWrap = styled(Row)`\r\n  padding: 12px;\r\n  border-radius: 12px;\r\n  width: 180px;\r\n  justify-content: space-between;\r\n  background: ${({ theme }) => theme.surface3};\r\n  cursor: pointer;\r\n  &:hover {\r\n    opacity: ${({ theme }) => theme.opacity.hover};\r\n  }\r\n  @media screen and (min-width: ${SMALL_MEDIA_BREAKPOINT}) {\r\n    width: 220px;\r\n  }\r\n`\r\n\r\nconst HeaderButtonContentWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\nconst MarketIcon = styled.div<{ index: number; totalSelected: number }>`\r\n  height: 20px;\r\n  width: 20px;\r\n  margin-right: 8px;\r\n  outline: 1px solid ${({ theme }) => theme.surface3};\r\n  border-radius: 4px;\r\n  z-index: ${({ index, totalSelected }) => totalSelected - index};\r\n  margin-left: ${({ index }) => `${index === 0 ? 0 : -18}px`};\r\n`\r\n\r\nconst Chevron = styled(ChevronUpIcon)<{ isOpen: boolean }>`\r\n  height: 20px;\r\n  width: 20px;\r\n  fill: ${({ theme }) => theme.neutral1};\r\n  transition: ${({\r\n    theme: {\r\n      transition: { duration },\r\n    },\r\n  }) => `${duration.fast} transform`};\r\n  transform: ${({ isOpen }) => `rotate(${isOpen ? 0 : 180}deg)`};\r\n`\r\n\r\nconst ModalWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n`\r\n\r\nconst DropdownWrapper = styled(Column)<{ isOpen: boolean }>`\r\n  padding: 16px 0px;\r\n  background-color: ${({ theme }) => theme.surface1};\r\n  display: ${({ isOpen }) => (isOpen ? 'flex' : 'none')};\r\n  position: absolute;\r\n  top: 52px;\r\n  width: 100%;\r\n  border-radius: 12px;\r\n  gap: 12px;\r\n  z-index: ${Z_INDEX.modalBackdrop};\r\n  box-shadow: ${({ theme }) => theme.deprecated_deepShadow};\r\n  border: 0.5px solid ${({ theme }) => theme.surface3};\r\n`\r\n\r\nexport const SelectMarketplacesDropdown = ({\r\n  setSelectedMarkets,\r\n  selectedMarkets,\r\n}: {\r\n  setSelectedMarkets: Dispatch<ListingMarket[]>\r\n  selectedMarkets: ListingMarket[]\r\n}) => {\r\n  const [isOpen, toggleIsOpen] = useReducer((s) => !s, false)\r\n  const dropdownDisplayText = useMemo(\r\n    () => (selectedMarkets.length === 1 ? selectedMarkets[0].name : 'Multiple'),\r\n    [selectedMarkets]\r\n  )\r\n  const ref = useRef<HTMLDivElement>(null)\r\n  useOnClickOutside(ref, () => isOpen && toggleIsOpen())\r\n  return (\r\n    <ModalWrapper ref={ref}>\r\n      <HeaderButtonWrap className={buttonTextMedium} onClick={toggleIsOpen}>\r\n        <HeaderButtonContentWrapper>\r\n          {selectedMarkets.map((market, index) => {\r\n            return (\r\n              <MarketIcon key={index} totalSelected={selectedMarkets.length} index={index}>\r\n                {getMarketplaceIcon(market.name, '20')}\r\n              </MarketIcon>\r\n            )\r\n          })}\r\n          {dropdownDisplayText}\r\n        </HeaderButtonContentWrapper>\r\n\r\n        <Chevron isOpen={isOpen} secondaryColor={themeVars.colors.neutral1} />\r\n      </HeaderButtonWrap>\r\n      <DropdownWrapper isOpen={isOpen}>\r\n        {ListingMarkets.map((market) => {\r\n          return MarketplaceRow({ market, setSelectedMarkets, selectedMarkets })\r\n        })}\r\n      </DropdownWrapper>\r\n    </ModalWrapper>\r\n  )\r\n}\r\n","import { useOnClickOutside } from 'hooks/useOnClickOutside'\r\nimport { Plural, t } from 'i18n'\r\nimport ms from 'ms'\r\nimport { Column, Row } from 'nft/components/Flex'\r\nimport { NumericInput } from 'nft/components/layout/Input'\r\nimport { body, caption } from 'nft/css/common.css'\r\nimport { useSellAsset } from 'nft/hooks'\r\nimport { DropDownOption } from 'nft/types'\r\nimport { useEffect, useMemo, useReducer, useRef, useState } from 'react'\r\nimport { AlertTriangle, ChevronDown } from 'react-feather'\r\nimport styled from 'styled-components'\r\nimport { Z_INDEX } from 'theme/zIndex'\r\n\r\nimport { Dropdown } from './Dropdown'\r\n\r\nconst ModalWrapper = styled(Column)`\r\n  gap: 4px;\r\n  position: relative;\r\n`\r\n\r\nconst InputWrapper = styled(Row)<{ isInvalid: boolean }>`\r\n  padding: 6px 6px 6px 12px;\r\n  border: 1px solid;\r\n  position: relative;\r\n  height: 44px;\r\n  border-radius: 8px;\r\n  border-color: ${({ isInvalid, theme }) => (isInvalid ? theme.critical : theme.surface3)};\r\n  width: 160px;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst DropdownPrompt = styled(Row)`\r\n  gap: 4px;\r\n  background-color: ${({ theme }) => theme.surface3};\r\n  cursor: pointer;\r\n  font-weight: 535;\r\n  font-size: 14px;\r\n  line-height: 16px;\r\n  border-radius: 8px;\r\n  padding: 6px 4px 6px 8px;\r\n  white-space: nowrap;\r\n  color: ${({ theme }) => theme.neutral1};\r\n\r\n  &:hover {\r\n    opacity: ${({ theme }) => theme.opacity.hover};\r\n  }\r\n`\r\n\r\nconst DropdownChevron = styled(ChevronDown)<{ isOpen: boolean }>`\r\n  height: 20px;\r\n  width: 20px;\r\n  color: ${({ theme }) => theme.neutral2};\r\n  transform: ${({ isOpen }) => isOpen && 'rotate(180deg)'};\r\n  transition: ${({\r\n    theme: {\r\n      transition: { duration, timing },\r\n    },\r\n  }) => `transform ${duration.fast} ${timing.ease}`};\r\n`\r\n\r\nconst DropdownContainer = styled.div`\r\n  position: absolute;\r\n  top: 48px;\r\n  right: 0px;\r\n  z-index: ${Z_INDEX.dropdown};\r\n`\r\n\r\nconst ErrorMessage = styled(Row)`\r\n  color: ${({ theme }) => theme.critical};\r\n  gap: 4px;\r\n  position: absolute;\r\n  top: 44px;\r\n  white-space: nowrap;\r\n`\r\n\r\nconst WarningIcon = styled(AlertTriangle)`\r\n  width: 16px;\r\n  color: ${({ theme }) => theme.critical};\r\n`\r\n\r\nenum Duration {\r\n  hour = 'hour',\r\n  day = 'day',\r\n  week = 'week',\r\n  month = 'month',\r\n}\r\n\r\nenum ErrorState {\r\n  valid,\r\n  empty,\r\n  overMax,\r\n}\r\n\r\nexport const SetDurationModal = () => {\r\n  const [duration, setDuration] = useState(Duration.day)\r\n  const [amount, setAmount] = useState('7')\r\n  const [errorState, setErrorState] = useState(ErrorState.valid)\r\n  const setGlobalExpiration = useSellAsset((state) => state.setGlobalExpiration)\r\n  const [showDropdown, toggleShowDropdown] = useReducer((s) => !s, false)\r\n  const durationDropdownRef = useRef<HTMLDivElement>(null)\r\n  useOnClickOutside(durationDropdownRef, showDropdown ? toggleShowDropdown : undefined)\r\n\r\n  const setCustomExpiration = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setAmount(event.target.value.length ? event.target.value : '')\r\n  }\r\n\r\n  const durationOptions: DropDownOption[] = useMemo(\r\n    () => [\r\n      {\r\n        displayText: 'hours',\r\n        isSelected: duration === Duration.hour,\r\n        onClick: () => {\r\n          setDuration(Duration.hour)\r\n          toggleShowDropdown()\r\n        },\r\n      },\r\n      {\r\n        displayText: 'days',\r\n        isSelected: duration === Duration.day,\r\n        onClick: () => {\r\n          setDuration(Duration.day)\r\n          toggleShowDropdown()\r\n        },\r\n      },\r\n      {\r\n        displayText: 'weeks',\r\n        isSelected: duration === Duration.week,\r\n        onClick: () => {\r\n          setDuration(Duration.week)\r\n          toggleShowDropdown()\r\n        },\r\n      },\r\n      {\r\n        displayText: 'months',\r\n        isSelected: duration === Duration.month,\r\n        onClick: () => {\r\n          setDuration(Duration.month)\r\n          toggleShowDropdown()\r\n        },\r\n      },\r\n    ],\r\n    [duration]\r\n  )\r\n\r\n  let prompt\r\n  switch (duration) {\r\n    case Duration.hour:\r\n      prompt = <Plural value={+amount} one={t`hour`} other={t`hours`} />\r\n      break\r\n    case Duration.day:\r\n      prompt = <Plural value={+amount} one={t`day`} other={t`days`} />\r\n      break\r\n    case Duration.week:\r\n      prompt = <Plural value={+amount} one={t`week`} other={t`weeks`} />\r\n      break\r\n    case Duration.month:\r\n      prompt = <Plural value={+amount} one={t`month`} other={t`months`} />\r\n      break\r\n    default:\r\n      break\r\n  }\r\n\r\n  useEffect(() => {\r\n    const expiration = convertDurationToExpiration(parseFloat(amount), duration)\r\n\r\n    if (expiration * 1000 - Date.now() < ms(`60s`) || isNaN(expiration)) setErrorState(ErrorState.empty)\r\n    else if (expiration * 1000 - Date.now() > ms(`180d`)) setErrorState(ErrorState.overMax)\r\n    else setErrorState(ErrorState.valid)\r\n    setGlobalExpiration(expiration)\r\n  }, [amount, duration, setGlobalExpiration])\r\n\r\n  return (\r\n    <ModalWrapper ref={durationDropdownRef}>\r\n      <InputWrapper isInvalid={errorState !== ErrorState.valid}>\r\n        <NumericInput\r\n          as=\"input\"\r\n          type=\"number\"\r\n          pattern=\"[0-9]\"\r\n          borderStyle=\"none\"\r\n          className={body}\r\n          color={{ placeholder: 'neutral2', default: 'neutral1' }}\r\n          value={amount}\r\n          width=\"40\"\r\n          marginRight=\"4\"\r\n          backgroundColor=\"none\"\r\n          onChange={setCustomExpiration}\r\n          flexShrink=\"0\"\r\n        />\r\n        <DropdownPrompt onClick={toggleShowDropdown}>\r\n          {prompt} <DropdownChevron isOpen={showDropdown} />\r\n        </DropdownPrompt>\r\n        {showDropdown && (\r\n          <DropdownContainer>\r\n            <Dropdown dropDownOptions={durationOptions} width={125} />\r\n          </DropdownContainer>\r\n        )}\r\n      </InputWrapper>\r\n      {errorState !== ErrorState.valid && (\r\n        <ErrorMessage className={caption}>\r\n          {' '}\r\n          <WarningIcon /> {errorState === ErrorState.overMax ? 'Maximum 6 months' : 'Set duration'}\r\n        </ErrorMessage>\r\n      )}\r\n    </ModalWrapper>\r\n  )\r\n}\r\n\r\nconst convertDurationToExpiration = (amount: number, duration: Duration) => {\r\n  const durationFactor = () => {\r\n    switch (duration) {\r\n      case Duration.hour:\r\n        return 1\r\n      case Duration.day:\r\n        return 24\r\n      case Duration.week:\r\n        return 24 * 7\r\n      default: // month\r\n        return 24 * 30\r\n    }\r\n  }\r\n  return Math.round((Date.now() + ms(`1h`) * durationFactor() * amount) / 1000)\r\n}\r\n","import { InterfaceModalName, NFTEventName } from '@uniswap/analytics-events'\r\nimport { sendAnalyticsEvent, useTrace } from 'analytics'\r\nimport Column from 'components/Column'\r\nimport Row from 'components/Row'\r\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\r\nimport { Trans } from 'i18n'\r\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\r\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\r\nimport { ListingButton } from 'nft/components/profile/list/ListingButton'\r\nimport {\r\n  approveCollectionRow,\r\n  getTotalEthValue,\r\n  useSubscribeListingState,\r\n  verifyStatus,\r\n} from 'nft/components/profile/list/utils'\r\nimport { useNFTList, useProfilePageState, useSellAsset } from 'nft/hooks'\r\nimport { LIST_PAGE_MARGIN, LIST_PAGE_MARGIN_MOBILE } from 'nft/pages/profile/shared'\r\nimport { ProfilePageStateType } from 'nft/types'\r\nimport { ListingMarkets } from 'nft/utils/listNfts'\r\nimport { useEffect, useMemo, useReducer, useState } from 'react'\r\nimport { ArrowLeft } from 'react-feather'\r\nimport styled from 'styled-components'\r\nimport { BREAKPOINTS } from 'theme'\r\nimport { ThemedText } from 'theme/components'\r\nimport { Z_INDEX } from 'theme/zIndex'\r\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\r\n\r\nimport { useIsMobile } from 'hooks/screenSize'\r\nimport { useEthersSigner } from 'hooks/useEthersSigner'\r\nimport { useAccount } from 'wagmi'\r\nimport { ListModal } from './Modal/ListModal'\r\nimport { NFTListingsGrid } from './NFTListingsGrid'\r\nimport { SelectMarketplacesDropdown } from './SelectMarketplacesDropdown'\r\nimport { SetDurationModal } from './SetDurationModal'\r\n\r\nconst ListingHeader = styled(Column)`\r\n  gap: 16px;\r\n  margin-top: 36px;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.xs}px) {\r\n    gap: 4px;\r\n  }\r\n`\r\n\r\nconst ArrowContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 4px;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.sm}px) {\r\n    height: 40px;\r\n    width: 40px;\r\n  }\r\n`\r\n\r\nconst BackArrow = styled(ArrowLeft)`\r\n  height: 16px;\r\n  width: 16px;\r\n  cursor: pointer;\r\n  color: ${({ theme }) => theme.neutral2};\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.sm}px) {\r\n    height: 20px;\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst TitleWrapper = styled(Row)`\r\n  gap: 4px;\r\n  margin-bottom: 12px;\r\n  white-space: nowrap;\r\n  width: min-content;\r\n  font-weight: 535;\r\n  font-size: 20px;\r\n  line-height: 28px;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.xs}px) {\r\n    margin-bottom: 0px;\r\n    font-weight: 535;\r\n    font-size: 28px;\r\n    line-height: 36px;\r\n  }\r\n`\r\n\r\nconst ButtonsWrapper = styled(Row)`\r\n  gap: 12px;\r\n  width: min-content;\r\n`\r\n\r\nconst MarketWrap = styled.section`\r\n  gap: 48px;\r\n  margin: 0px auto;\r\n  width: 100%;\r\n  max-width: 1200px;\r\n`\r\n\r\nconst ListingHeaderRow = styled(Row)`\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-wrap: wrap;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.sm}px) {\r\n    padding-left: 40px;\r\n  }\r\n`\r\n\r\nconst GridWrapper = styled.div`\r\n  margin-top: 24px;\r\n  margin-bottom: 48px;\r\n`\r\n\r\nconst FloatingConfirmationBar = styled(Row)<{ issues: boolean }>`\r\n  padding: 12px 12px 12px 32px;\r\n  border: 1px solid;\r\n  border-color: ${({ theme, issues }) => (issues ? theme.surface3 : theme.accent1)};\r\n  border-radius: 20px;\r\n  white-space: nowrap;\r\n  justify-content: space-between;\r\n  background: ${({ theme }) => theme.surface1};\r\n  position: fixed;\r\n  bottom: 32px;\r\n  width: calc(100vw - ${LIST_PAGE_MARGIN * 2}px);\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  max-width: ${({ theme }) => theme.maxWidth};\r\n  z-index: ${Z_INDEX.under_dropdown};\r\n  box-shadow: ${({ theme }) => theme.deprecated_shallowShadow};\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.lg}px) {\r\n    bottom: 68px;\r\n  }\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    width: calc(100% - ${LIST_PAGE_MARGIN_MOBILE * 2}px);\r\n    padding: 8px 8px 8px 16px;\r\n  }\r\n`\r\n\r\nconst Overlay = styled.div`\r\n  position: fixed;\r\n  bottom: 0px;\r\n  left: 0px;\r\n  height: 158px;\r\n  width: 100vw;\r\n  background: ${({ theme }) => `linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, ${theme.surface2} 100%)`};\r\n`\r\n\r\nconst UsdValue = styled(ThemedText.SubHeader)`\r\n  line-height: 24px;\r\n  color: ${({ theme }) => theme.neutral2};\r\n  display: none;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.lg}px) {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst ProceedsAndButtonWrapper = styled(Row)`\r\n  width: min-content;\r\n  gap: 40px;\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    gap: 20px;\r\n  }\r\n`\r\n\r\nconst ProceedsWrapper = styled(Row)`\r\n  width: min-content;\r\n  gap: 16px;\r\n`\r\n\r\nconst EthValueWrapper = styled.span<{ totalEthListingValue: boolean }>`\r\n  font-weight: 535;\r\n  font-size: 20px;\r\n  line-height: 28px;\r\n  color: ${({ theme, totalEthListingValue }) => (totalEthListingValue ? theme.neutral1 : theme.neutral2)};\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    font-size: 16px;\r\n    line-height: 24px;\r\n  }\r\n`\r\n\r\nexport const ListPage = () => {\r\n  const { formatNumberOrString } = useFormatter()\r\n  const { setProfilePageState: setSellPageState } = useProfilePageState()\r\n  const account = useAccount()\r\n  const signer = useEthersSigner()\r\n  const isMobile = useIsMobile()\r\n  const trace = useTrace({ modal: InterfaceModalName.NFT_LISTING })\r\n  const { formatCurrencyAmount } = useFormatter()\r\n  const { setGlobalMarketplaces, sellAssets, issues } = useSellAsset(\r\n    ({ setGlobalMarketplaces, sellAssets, issues }) => ({\r\n      setGlobalMarketplaces,\r\n      sellAssets,\r\n      issues,\r\n    })\r\n  )\r\n  const { listings, collectionsRequiringApproval, setCollectionStatusAndCallback } = useNFTList(\r\n    ({ listings, collectionsRequiringApproval, setCollectionStatusAndCallback }) => ({\r\n      listings,\r\n      collectionsRequiringApproval,\r\n      setCollectionStatusAndCallback,\r\n    })\r\n  )\r\n\r\n  const totalEthListingValue = useMemo(() => getTotalEthValue(sellAssets), [sellAssets])\r\n  const nativeCurrency = useNativeCurrency(account.chainId)\r\n  const parsedAmount = tryParseCurrencyAmount(totalEthListingValue.toString(), nativeCurrency)\r\n  const usdcValue = useStablecoinValue(parsedAmount)\r\n  const usdcAmount = formatCurrencyAmount({\r\n    amount: usdcValue,\r\n    type: NumberType.FiatTokenPrice,\r\n  })\r\n  const [showListModal, toggleShowListModal] = useReducer((s) => !s, false)\r\n  const [selectedMarkets, setSelectedMarkets] = useState([ListingMarkets[0]]) // default marketplace: x2y2\r\n\r\n  // instantiate listings and collections to approve when users modify input data\r\n  useSubscribeListingState()\r\n\r\n  useEffect(() => {\r\n    setGlobalMarketplaces(selectedMarkets)\r\n  }, [selectedMarkets, setGlobalMarketplaces])\r\n\r\n  const startListingEventProperties = {\r\n    collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\r\n    token_ids: sellAssets.map((asset) => asset.tokenId),\r\n    marketplaces: Array.from(new Set(listings.map((asset) => asset.marketplace.name))),\r\n    list_quantity: listings.length,\r\n    usd_value: usdcAmount,\r\n    ...trace,\r\n  }\r\n\r\n  const startListingFlow = async () => {\r\n    if (!signer) return\r\n    sendAnalyticsEvent(NFTEventName.NFT_SELL_START_LISTING, { ...startListingEventProperties })\r\n\r\n    // for all unique collection, marketplace combos -> approve collections\r\n    for (const collectionRow of collectionsRequiringApproval) {\r\n      verifyStatus(collectionRow.status) &&\r\n        (isMobile\r\n          ? await approveCollectionRow(collectionRow, signer, setCollectionStatusAndCallback)\r\n          : approveCollectionRow(collectionRow, signer, setCollectionStatusAndCallback))\r\n    }\r\n  }\r\n\r\n  const showModalAndStartListing = () => {\r\n    toggleShowListModal()\r\n    startListingFlow()\r\n  }\r\n\r\n  const BannerText = isMobile ? (\r\n    <ThemedText.SubHeader>\r\n      <Trans>Receive</Trans>\r\n    </ThemedText.SubHeader>\r\n  ) : (\r\n    <ThemedText.HeadlineSmall lineHeight=\"28px\">\r\n      <Trans>You receive</Trans>\r\n    </ThemedText.HeadlineSmall>\r\n  )\r\n\r\n  return (\r\n    <Column>\r\n      <MarketWrap>\r\n        <ListingHeader>\r\n          <Row>\r\n            <ArrowContainer>\r\n              <BackArrow onClick={() => setSellPageState(ProfilePageStateType.VIEWING)} />\r\n            </ArrowContainer>\r\n            <ThemedText.BodySmall lineHeight=\"20px\" color=\"neutral2\">\r\n              <Trans>My NFTs</Trans>\r\n            </ThemedText.BodySmall>\r\n          </Row>\r\n          <ListingHeaderRow>\r\n            <TitleWrapper>\r\n              <Trans>Sell NFTs</Trans>\r\n            </TitleWrapper>\r\n            <ButtonsWrapper>\r\n              <SelectMarketplacesDropdown setSelectedMarkets={setSelectedMarkets} selectedMarkets={selectedMarkets} />\r\n              <SetDurationModal />\r\n            </ButtonsWrapper>\r\n          </ListingHeaderRow>\r\n        </ListingHeader>\r\n        <GridWrapper>\r\n          <NFTListingsGrid selectedMarkets={selectedMarkets} />\r\n        </GridWrapper>\r\n      </MarketWrap>\r\n\r\n      <FloatingConfirmationBar issues={!!issues}>\r\n        {BannerText}\r\n        <ProceedsAndButtonWrapper>\r\n          <ProceedsWrapper>\r\n            <EthValueWrapper totalEthListingValue={!!totalEthListingValue}>\r\n              {totalEthListingValue > 0\r\n                ? formatNumberOrString({ input: totalEthListingValue, type: NumberType.NFTToken })\r\n                : '-'}{' '}\r\n              ETH\r\n            </EthValueWrapper>\r\n            {!!usdcValue && <UsdValue>{usdcAmount}</UsdValue>}\r\n          </ProceedsWrapper>\r\n          <ListingButton onClick={showModalAndStartListing} />\r\n        </ProceedsAndButtonWrapper>\r\n      </FloatingConfirmationBar>\r\n      <Overlay />\r\n\r\n      {showListModal && <ListModal overlayClick={toggleShowListModal} />}\r\n    </Column>\r\n  )\r\n}\r\n","import { ScrollBarStyles } from 'components/Common'\r\nimport { LoadingBubble } from 'components/Tokens/loading'\r\nimport { AnimatedBox, Box } from 'nft/components/Box'\r\nimport { Column, Row } from 'nft/components/Flex'\r\nimport { XMarkIcon } from 'nft/components/icons'\r\nimport { Checkbox } from 'nft/components/layout/Checkbox'\r\nimport { checkbox } from 'nft/components/layout/Checkbox.css'\r\nimport { Input } from 'nft/components/layout/Input'\r\nimport { subhead } from 'nft/css/common.css'\r\nimport { themeVars } from 'nft/css/sprinkles.css'\r\nimport { useFiltersExpanded, useWalletCollections } from 'nft/hooks'\r\nimport { WalletCollection } from 'nft/types'\r\nimport {\r\n  CSSProperties,\r\n  Dispatch,\r\n  FormEvent,\r\n  SetStateAction,\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useReducer,\r\n  useState,\r\n} from 'react'\r\nimport { easings, useSpring } from 'react-spring'\r\nimport AutoSizer from 'react-virtualized-auto-sizer'\r\nimport { FixedSizeList, ListOnItemsRenderedProps } from 'react-window'\r\nimport InfiniteLoader from 'react-window-infinite-loader'\r\nimport styled from 'styled-components'\r\nimport { ThemedText } from 'theme/components'\r\nimport { TRANSITION_DURATIONS } from 'theme/styles'\r\nimport noop from 'utilities/src/react/noop'\r\n\r\nimport { useIsMobile } from 'hooks/screenSize'\r\nimport { WALLET_COLLECTIONS_PAGINATION_LIMIT } from './ProfilePage'\r\nimport * as styles from './ProfilePage.css'\r\n\r\nconst COLLECTION_ROW_HEIGHT = 44\r\n\r\nconst ItemsContainer = styled(Column)`\r\n  ${ScrollBarStyles}\r\n  height: 100vh;\r\n`\r\n\r\nconst LongLoadingBubble = styled(LoadingBubble)`\r\n  min-height: 15px;\r\n  width: 75%;\r\n`\r\n\r\nconst SmallLoadingBubble = styled(LoadingBubble)`\r\n  height: 20px;\r\n  width: 20px;\r\n  margin-right: 8px;\r\n`\r\n\r\nconst MobileMenuHeader = styled(Row)`\r\n  justify-content: space-between;\r\n  padding-bottom: 8px;\r\n`\r\n\r\nconst LoadingCollectionItem = ({ style }: { style?: CSSProperties }) => {\r\n  return (\r\n    <Row display=\"flex\" justifyContent=\"space-between\" style={style} paddingLeft=\"12\" paddingRight=\"16\">\r\n      <Row display=\"flex\" flex=\"1\">\r\n        <SmallLoadingBubble />\r\n        <LongLoadingBubble />\r\n      </Row>\r\n      <Box as=\"span\" borderColor=\"surface3\" className={checkbox} aria-hidden=\"true\" />\r\n    </Row>\r\n  )\r\n}\r\n\r\ninterface CollectionFilterRowProps {\r\n  index: number\r\n  style: CSSProperties\r\n}\r\n\r\ninterface FilterSidebarProps {\r\n  fetchNextPage: () => void\r\n  hasNextPage?: boolean\r\n  isFetchingNextPage: boolean\r\n  walletCollections: WalletCollection[]\r\n}\r\n\r\nexport const FilterSidebar = ({\r\n  fetchNextPage,\r\n  hasNextPage,\r\n  isFetchingNextPage,\r\n  walletCollections,\r\n}: FilterSidebarProps) => {\r\n  const collectionFilters = useWalletCollections((state) => state.collectionFilters)\r\n  const setCollectionFilters = useWalletCollections((state) => state.setCollectionFilters)\r\n\r\n  const [isFiltersExpanded, setFiltersExpanded] = useFiltersExpanded()\r\n  const isMobile = useIsMobile()\r\n\r\n  const { sidebarX } = useSpring({\r\n    sidebarX: isFiltersExpanded ? 0 : -360,\r\n    config: {\r\n      duration: TRANSITION_DURATIONS.medium,\r\n      easing: easings.easeOutSine,\r\n    },\r\n  })\r\n\r\n  const hideSearch = useMemo(\r\n    () => (walletCollections && walletCollections?.length >= WALLET_COLLECTIONS_PAGINATION_LIMIT) || isFetchingNextPage,\r\n    [walletCollections, isFetchingNextPage]\r\n  )\r\n\r\n  return (\r\n    // @ts-ignore\r\n    <AnimatedBox\r\n      position={{ sm: 'fixed', md: 'sticky' }}\r\n      top={{ sm: '0', md: '72' }}\r\n      left={{ sm: '0', md: 'unset' }}\r\n      width={{ sm: 'full', md: '332', lg: '332' }}\r\n      height={{ sm: 'full', md: 'auto' }}\r\n      zIndex={{ sm: 'modal', md: 'auto' }}\r\n      display={isFiltersExpanded ? 'flex' : 'none'}\r\n      style={{ transform: isMobile ? undefined : sidebarX.to((x) => `translateX(${x}px)`) }}\r\n      background=\"surface2\"\r\n    >\r\n      <Box\r\n        paddingTop={{ sm: '24', md: '0' }}\r\n        paddingLeft={{ sm: '16', md: '0' }}\r\n        paddingRight=\"16\"\r\n        width={{ sm: 'full', md: '332', lg: '332' }}\r\n      >\r\n        {isMobile && (\r\n          <MobileMenuHeader>\r\n            <ThemedText.HeadlineSmall>Filter</ThemedText.HeadlineSmall>\r\n            <XMarkIcon\r\n              height={28}\r\n              width={28}\r\n              fill={themeVars.colors.neutral1}\r\n              onClick={() => setFiltersExpanded(false)}\r\n            />\r\n          </MobileMenuHeader>\r\n        )}\r\n        <CollectionSelect\r\n          collections={walletCollections}\r\n          collectionFilters={collectionFilters}\r\n          setCollectionFilters={setCollectionFilters}\r\n          fetchNextPage={fetchNextPage}\r\n          hasNextPage={hasNextPage}\r\n          isFetchingNextPage={isFetchingNextPage}\r\n          hideSearch={hideSearch}\r\n        />\r\n      </Box>\r\n    </AnimatedBox>\r\n  )\r\n}\r\n\r\nconst CollectionSelect = ({\r\n  collections,\r\n  collectionFilters,\r\n  setCollectionFilters,\r\n  fetchNextPage,\r\n  hasNextPage,\r\n  isFetchingNextPage,\r\n  hideSearch,\r\n}: {\r\n  collections: WalletCollection[]\r\n  collectionFilters: Array<string>\r\n  setCollectionFilters: (address: string) => void\r\n  fetchNextPage: () => void\r\n  hasNextPage?: boolean\r\n  isFetchingNextPage: boolean\r\n  hideSearch: boolean\r\n}) => {\r\n  const [collectionSearchText, setCollectionSearchText] = useState('')\r\n  const [displayCollections, setDisplayCollections] = useState(collections)\r\n\r\n  useEffect(() => {\r\n    if (collectionSearchText) {\r\n      const filtered = collections.filter((collection) =>\r\n        collection.name?.toLowerCase().includes(collectionSearchText.toLowerCase())\r\n      )\r\n      setDisplayCollections(filtered)\r\n    } else {\r\n      setDisplayCollections(collections)\r\n    }\r\n  }, [collectionSearchText, collections])\r\n\r\n  const itemKey = useCallback((index: number, data: WalletCollection[]) => {\r\n    if (!data) return index\r\n    const collection = data[index]\r\n    return `${collection.address}_${index}`\r\n  }, [])\r\n\r\n  // If there are more items to be loaded then add an extra row to hold a loading indicator.\r\n  const itemCount = hasNextPage ? displayCollections.length + 1 : displayCollections.length\r\n\r\n  // Only load 1 page of items at a time.\r\n  // Pass an empty callback to InfiniteLoader in case it asks us to load more than once.\r\n  const loadMoreItems = isFetchingNextPage ? noop : fetchNextPage\r\n\r\n  // Every row is loaded except for our loading indicator row.\r\n  const isItemLoaded = useCallback(\r\n    (index: number) => !hasNextPage || index < displayCollections.length,\r\n    [displayCollections.length, hasNextPage]\r\n  )\r\n\r\n  const CollectionFilterRow = useCallback(\r\n    ({ index, style }: CollectionFilterRowProps) => {\r\n      const collection = !!displayCollections && displayCollections[index]\r\n      if (!collection || isFetchingNextPage) {\r\n        return <LoadingCollectionItem style={style} key={index} />\r\n      }\r\n      return (\r\n        <CollectionItem\r\n          style={style}\r\n          key={itemKey(index, displayCollections)}\r\n          collection={displayCollections[index]}\r\n          collectionFilters={collectionFilters}\r\n          setCollectionFilters={setCollectionFilters}\r\n        />\r\n      )\r\n    },\r\n    [displayCollections, isFetchingNextPage, itemKey, collectionFilters, setCollectionFilters]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Box className={subhead} marginTop=\"12\" marginBottom=\"16\" width=\"276\">\r\n        Collections\r\n      </Box>\r\n      <Box paddingBottom=\"12\" borderRadius=\"8\">\r\n        <Column as=\"ul\" paddingLeft=\"0\" gap=\"10\" style={{ maxHeight: '80vh' }}>\r\n          {!hideSearch && (\r\n            <CollectionFilterSearch\r\n              collectionSearchText={collectionSearchText}\r\n              setCollectionSearchText={setCollectionSearchText}\r\n            />\r\n          )}\r\n          <ItemsContainer>\r\n            <AutoSizer disableWidth>\r\n              {({ height }: { height: number }) => (\r\n                <InfiniteLoader isItemLoaded={isItemLoaded} itemCount={itemCount} loadMoreItems={loadMoreItems}>\r\n                  {({\r\n                    onItemsRendered,\r\n                    ref,\r\n                  }: {\r\n                    onItemsRendered: (props: ListOnItemsRenderedProps) => any\r\n                    ref: any\r\n                  }) => (\r\n                    <FixedSizeList\r\n                      height={height}\r\n                      width=\"100%\"\r\n                      itemCount={itemCount}\r\n                      itemSize={COLLECTION_ROW_HEIGHT}\r\n                      onItemsRendered={onItemsRendered}\r\n                      itemKey={itemKey}\r\n                      ref={ref}\r\n                    >\r\n                      {CollectionFilterRow}\r\n                    </FixedSizeList>\r\n                  )}\r\n                </InfiniteLoader>\r\n              )}\r\n            </AutoSizer>\r\n          </ItemsContainer>\r\n        </Column>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nconst CollectionFilterSearch = ({\r\n  collectionSearchText,\r\n  setCollectionSearchText,\r\n}: {\r\n  collectionSearchText: string\r\n  setCollectionSearchText: Dispatch<SetStateAction<string>>\r\n}) => {\r\n  return (\r\n    <Input\r\n      placeholder=\"Search\"\r\n      marginTop=\"8\"\r\n      marginBottom=\"8\"\r\n      autoComplete=\"off\"\r\n      position=\"static\"\r\n      width=\"full\"\r\n      value={collectionSearchText}\r\n      onChange={(e: FormEvent<HTMLInputElement>) => setCollectionSearchText(e.currentTarget.value)}\r\n    />\r\n  )\r\n}\r\n\r\nconst CollectionItem = ({\r\n  collection,\r\n  collectionFilters,\r\n  setCollectionFilters,\r\n  style,\r\n}: {\r\n  collection: WalletCollection\r\n  collectionFilters: Array<string>\r\n  setCollectionFilters: (address: string) => void\r\n  style?: CSSProperties\r\n}) => {\r\n  const [isCheckboxSelected, setCheckboxSelected] = useState(false)\r\n  const [hovered, toggleHovered] = useReducer((state) => {\r\n    return !state\r\n  }, false)\r\n  const isChecked = useCallback(\r\n    (address: string) => {\r\n      return collectionFilters.some((collection) => collection === address)\r\n    },\r\n    [collectionFilters]\r\n  )\r\n  const handleCheckbox = () => {\r\n    setCheckboxSelected(!isCheckboxSelected)\r\n    setCollectionFilters(collection.address)\r\n  }\r\n  return (\r\n    <Row\r\n      maxWidth=\"full\"\r\n      overflowX=\"hidden\"\r\n      overflowY=\"hidden\"\r\n      fontWeight=\"book\"\r\n      className={styles.subRowHover}\r\n      justifyContent=\"space-between\"\r\n      cursor=\"pointer\"\r\n      paddingLeft=\"12\"\r\n      paddingRight=\"16\"\r\n      borderRadius=\"12\"\r\n      style={{\r\n        paddingBottom: '22px',\r\n        paddingTop: '22px',\r\n        ...style,\r\n      }}\r\n      maxHeight={`${COLLECTION_ROW_HEIGHT}`}\r\n      as=\"li\"\r\n      onMouseEnter={toggleHovered}\r\n      onMouseLeave={toggleHovered}\r\n      onClick={handleCheckbox}\r\n    >\r\n      <Row>\r\n        <Box as=\"img\" borderRadius=\"round\" width=\"20\" height=\"20\" src={collection.image} />\r\n        <Box\r\n          as=\"span\"\r\n          whiteSpace=\"nowrap\"\r\n          textOverflow=\"ellipsis\"\r\n          overflow=\"hidden\"\r\n          paddingLeft=\"12\"\r\n          paddingRight=\"14\"\r\n          style={{ minHeight: 15, maxWidth: '180px' }}\r\n        >\r\n          {collection.name}{' '}\r\n        </Box>\r\n      </Row>\r\n\r\n      <Checkbox checked={isChecked(collection.address)} hovered={hovered} onChange={handleCheckbox}>\r\n        <Box as=\"span\" color=\"neutral3\" marginRight=\"12\" marginLeft=\"auto\">\r\n          {collection.count}\r\n        </Box>\r\n      </Checkbox>\r\n    </Row>\r\n  )\r\n}\r\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var checkbox = 'rgw6ez453 rgw6ezq9 rgw6ez80l rgw6ez19f rgw6ez12f rgw6ez7zp rgw6ez89d';","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYTo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCAjRkM3MkZGODAgMCUsICNGQzcyRkY4MCAxMDAuMTMlKSBib3JkZXItYm94OwogIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgLXdlYmtpdC1tYXNrOiBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApIHBhZGRpbmctYm94LCBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApOzsKICAtd2Via2l0LW1hc2stY29tcG9zaXRlOiB4b3I7OwogIG1hc2stY29tcG9zaXRlOiBleGNsdWRlOwogIGJvcmRlci1zdHlsZTogc29saWQ7CiAgYm9yZGVyLXdpZHRoOiAxcHg7CiAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQouXzEyN2w4aGRiOjpiZWZvcmUgewogIG9wYWNpdHk6IDA7CiAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1vei10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1zLXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2Utb3V0Owp9Ci5fMTI3bDhoZGI6aG92ZXI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMTsKfQ==\\\"}!../../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/profile/view/ProfilePage.css.ts.vanilla.css!=!../../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/profile/view/ProfilePage.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xYnc1ZGxyMSB7CiAgbWF4LXdpZHRoOiAxMDAwcHg7CiAgbWFyZ2luOiAwIGF1dG87Cn0KLl8xYnc1ZGxyMiB7CiAgbWFyZ2luLWJvdHRvbTogLTNweDsKfQouXzFidzVkbHIzOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1nZW5pZS1jb2xvcnMtc3VyZmFjZTMpOwp9Ci5fMWJ3NWRscjQgewogIGhlaWdodDogMTJweDsKICB3aWR0aDogMTJweDsKICBtYXJnaW4tbGVmdDogMnB4OwogIG1hcmdpbi1ib3R0b206IC0ycHg7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKfQouXzFidzVkbHI1IHsKICB3aWR0aDogMTkwcHg7Cn0KLl8xYnc1ZGxyNiB7CiAgYm94LXNoYWRvdzogdmFyKC0tcmd3NmV6aik7Cn0KLl8xYnc1ZGxyNyB7CiAgYm94LXNoYWRvdzogMCAxNHB4IDE2cHggMCByZ2JhKDcwLCAxMTUsIDI1MCwgMC40KTsKfQouXzFidzVkbHI4IHsKICB3aGl0ZS1zcGFjZTogbm93cmFwOwogIG1heC13aWR0aDogMTAwcHg7CiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKfQ==\\\"}!../../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var activeDropDown = '_1bw5dlr6';\nexport var activeDropDownItems = '_1bw5dlr7';\nexport var collectionFilterBubbleText = '_1bw5dlr8';\nexport var dropDown = '_1bw5dlr5';\nexport var ethIcon = '_1bw5dlr2';\nexport var section = '_1bw5dlr1 rgw6ez2e3 rgw6ez2cn rgw6ez2jl rgw6ez2i5';\nexport var subRowHover = '_1bw5dlr3 rgw6ezd3 rgw6ezb9 rgw6ezdr';\nexport var verifiedBadge = '_1bw5dlr4';","export enum RefetchInterval {\r\n  SHORT = 5000,\r\n  MEDIUM = 15000,\r\n  LONG = 60000,\r\n}\r\n","import { infiniteQueryOptions } from '@tanstack/react-query'\r\nimport { RefetchInterval } from 'constants/query'\r\nimport { WALLET_COLLECTIONS_PAGINATION_LIMIT } from 'nft/components/profile/view/ProfilePage'\r\nimport { WalletCollection } from '../../types'\r\n\r\nexport function getOSCollectionsInfiniteQueryOptions(address: string) {\r\n  return infiniteQueryOptions({\r\n    queryKey: ['ownerCollections', { address }],\r\n    queryFn: async ({ pageParam }) => {\r\n      const params = {\r\n        asset_owner: address,\r\n        offset: `${pageParam * WALLET_COLLECTIONS_PAGINATION_LIMIT}`,\r\n        limit: `${WALLET_COLLECTIONS_PAGINATION_LIMIT}`,\r\n      }\r\n\r\n      const res = await OSCollectionsFetcher(params)\r\n\r\n      return {\r\n        data: res,\r\n        nextPage: pageParam + 1,\r\n      }\r\n    },\r\n    initialPageParam: 0,\r\n    getNextPageParam: (lastGroup) => (lastGroup.data.length === 0 ? undefined : lastGroup.nextPage),\r\n    refetchInterval: RefetchInterval.MEDIUM,\r\n  })\r\n}\r\n\r\nconst OSCollectionsFetcher = async ({ params }: any): Promise<WalletCollection[]> => {\r\n  let hasEmptyFields = false\r\n\r\n  if (!params) return []\r\n\r\n  for (const v of Object.values(params)) {\r\n    if (v === undefined) {\r\n      hasEmptyFields = true\r\n    }\r\n  }\r\n  if (hasEmptyFields) return []\r\n\r\n  const r = await fetch(`https://api.opensea.io/api/v1/collections?${new URLSearchParams(params).toString()}`)\r\n  const walletCollections = await r.json()\r\n  if (walletCollections) {\r\n    return walletCollections\r\n      .filter((collection: any) => collection.primary_asset_contracts.length)\r\n      .map((collection: any) => ({\r\n        address: collection.primary_asset_contracts[0].address,\r\n        name: collection.name,\r\n        image: collection.image_url,\r\n        count: collection.owned_asset_count,\r\n      }))\r\n  } else {\r\n    return []\r\n  }\r\n}\r\n","import { Box } from 'nft/components/Box'\r\nimport { assetList } from 'nft/components/collection/CollectionNfts.css'\r\nimport { loadingAsset } from 'nft/css/loading.css'\r\nimport styled from 'styled-components'\r\n\r\nimport { DEFAULT_WALLET_ASSET_QUERY_AMOUNT } from './ProfilePage'\r\n\r\nconst SkeletonBodyWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  gap: 18px;\r\n`\r\n\r\nconst SkeletonRowWrapper = styled.div`\r\n  display: flex;\r\n  flex-direct: row;\r\n  width: 100%;\r\n`\r\n\r\nconst AccountDetailsSkeletonWrapper = styled(SkeletonRowWrapper)`\r\n  gap: 12px;\r\n  margin-bottom: 30px;\r\n`\r\n\r\nconst ProfileDetailsSkeleton = styled.div`\r\n  width: 180px;\r\n  height: 36px;\r\n  border-radius: 12px;\r\n`\r\n\r\nconst FilterBarSkeletonWrapper = styled(SkeletonRowWrapper)`\r\n  justify-content: space-between;\r\n`\r\n\r\nconst FilterButtonSkeleton = styled.div`\r\n  width: 92px;\r\n  height: 44px;\r\n  border-radius: 12px;\r\n`\r\n\r\nconst SellButtonSkeleton = styled.div`\r\n  width: 80px;\r\n  height: 44px;\r\n  border-radius: 12px;\r\n`\r\n\r\nconst ProfileAssetCardSkeleton = styled.div`\r\n  width: 100%;\r\n  height: 330px;\r\n  border-radius: 20px;\r\n`\r\n\r\nconst ProfileAssetCardDisplaySectionSkeleton = () => {\r\n  return (\r\n    <Box width=\"full\" className={assetList}>\r\n      {Array.from(Array(DEFAULT_WALLET_ASSET_QUERY_AMOUNT), (_, index) => (\r\n        <ProfileAssetCardSkeleton key={index} className={loadingAsset} />\r\n      ))}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport const ProfileBodyLoadingSkeleton = () => {\r\n  return (\r\n    <SkeletonBodyWrapper>\r\n      <AccountDetailsSkeletonWrapper>\r\n        <ProfileDetailsSkeleton className={loadingAsset} />\r\n      </AccountDetailsSkeletonWrapper>\r\n      <FilterBarSkeletonWrapper>\r\n        <FilterButtonSkeleton className={loadingAsset} />\r\n        <SellButtonSkeleton className={loadingAsset} />\r\n      </FilterBarSkeletonWrapper>\r\n      <ProfileAssetCardDisplaySectionSkeleton />\r\n    </SkeletonBodyWrapper>\r\n  )\r\n}\r\n","import { NFTEventName } from '@uniswap/analytics-events'\r\nimport { sendAnalyticsEvent, useTrace } from 'analytics'\r\nimport { useIsMobile } from 'hooks/screenSize'\r\nimport { Trans } from 'i18n'\r\nimport { NftCard, NftCardDisplayProps } from 'nft/components/card'\r\nimport { detailsHref } from 'nft/components/card/utils'\r\nimport { VerifiedIcon } from 'nft/components/icons'\r\nimport { useBag, useSellAsset } from 'nft/hooks'\r\nimport { WalletAsset } from 'nft/types'\r\nimport { useMemo } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\ninterface ViewMyNftsAssetProps {\r\n  asset: WalletAsset\r\n  mediaShouldBePlaying: boolean\r\n  setCurrentTokenPlayingMedia: (tokenId: string | undefined) => void\r\n  hideDetails: boolean\r\n}\r\n\r\nexport const ViewMyNftsAsset = ({\r\n  asset,\r\n  mediaShouldBePlaying,\r\n  setCurrentTokenPlayingMedia,\r\n  hideDetails,\r\n}: ViewMyNftsAssetProps) => {\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  const selectSellAsset = useSellAsset((state) => state.selectSellAsset)\r\n  const removeSellAsset = useSellAsset((state) => state.removeSellAsset)\r\n  const cartExpanded = useBag((state) => state.bagExpanded)\r\n  const toggleCart = useBag((state) => state.toggleBag)\r\n  const isMobile = useIsMobile()\r\n  const navigate = useNavigate()\r\n\r\n  const isSelected = useMemo(() => {\r\n    return sellAssets.some(\r\n      (item) => item.tokenId === asset.tokenId && item.asset_contract.address === asset.asset_contract.address\r\n    )\r\n  }, [asset, sellAssets])\r\n\r\n  const trace = useTrace()\r\n  const toggleSelect = () => handleSelect(isSelected)\r\n\r\n  const handleSelect = (removeAsset: boolean) => {\r\n    if (removeAsset) {\r\n      removeSellAsset(asset)\r\n    } else {\r\n      selectSellAsset(asset)\r\n      sendAnalyticsEvent(NFTEventName.NFT_SELL_ITEM_ADDED, {\r\n        collection_address: asset.asset_contract.address,\r\n        token_id: asset.tokenId,\r\n        ...trace,\r\n      })\r\n    }\r\n    if (\r\n      !cartExpanded &&\r\n      !sellAssets.find(\r\n        (x) => x.tokenId === asset.tokenId && x.asset_contract.address === asset.asset_contract.address\r\n      ) &&\r\n      !isMobile\r\n    )\r\n      toggleCart()\r\n  }\r\n\r\n  const isDisabled = asset.susFlag\r\n\r\n  const display: NftCardDisplayProps = useMemo(() => {\r\n    return {\r\n      primaryInfo: !!asset.asset_contract.name && asset.asset_contract.name,\r\n      primaryInfoIcon: asset.collectionIsVerified && <VerifiedIcon height=\"16px\" width=\"16px\" />,\r\n      secondaryInfo: asset.name || asset.tokenId ? asset.name ?? `#${asset.tokenId}` : null,\r\n      selectedInfo: <Trans>Remove from bag</Trans>,\r\n      notSelectedInfo: <Trans>List for sale</Trans>,\r\n      disabledInfo: <Trans>Unavailable for listing</Trans>,\r\n    }\r\n  }, [asset.asset_contract.name, asset.collectionIsVerified, asset.name, asset.tokenId])\r\n\r\n  return (\r\n    <NftCard\r\n      asset={asset}\r\n      display={display}\r\n      isSelected={isSelected}\r\n      isDisabled={Boolean(isDisabled)}\r\n      selectAsset={() => handleSelect(false)}\r\n      unselectAsset={() => handleSelect(true)}\r\n      onButtonClick={toggleSelect}\r\n      onCardClick={() => {\r\n        if (!hideDetails) navigate(detailsHref(asset))\r\n      }}\r\n      mediaShouldBePlaying={mediaShouldBePlaying}\r\n      setCurrentTokenPlayingMedia={setCurrentTokenPlayingMedia}\r\n      testId=\"nft-profile-asset\"\r\n    />\r\n  )\r\n}\r\n","import { useNftBalance } from 'graphql/data/nft/NftBalance'\r\nimport { AnimatedBox, Box } from 'nft/components/Box'\r\nimport { LoadingAssets } from 'nft/components/collection/CollectionAssetLoading'\r\nimport { assetList } from 'nft/components/collection/CollectionNfts.css'\r\nimport { FilterButton } from 'nft/components/collection/FilterButton'\r\nimport { ClearAllButton } from 'nft/components/collection/shared'\r\nimport { Column, Row } from 'nft/components/Flex'\r\nimport { CrossIcon } from 'nft/components/icons'\r\nimport { FilterSidebar } from 'nft/components/profile/view/FilterSidebar'\r\nimport { subhead } from 'nft/css/common.css'\r\nimport { useBag, useFiltersExpanded, useSellAsset, useWalletBalance, useWalletCollections } from 'nft/hooks'\r\nimport { ScreenBreakpointsPaddings } from 'nft/pages/collection/index.css'\r\nimport { WalletCollection } from 'nft/types'\r\nimport { Dispatch, SetStateAction, Suspense, useCallback, useEffect, useMemo, useState } from 'react'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport { easings, useSpring } from 'react-spring'\r\nimport styled from 'styled-components'\r\n\r\nimport { useInfiniteQuery } from '@tanstack/react-query'\r\nimport { useIsMobile } from 'hooks/screenSize'\r\nimport { getOSCollectionsInfiniteQueryOptions } from 'nft/queries/openSea/OSCollectionsFetcher'\r\nimport { EmptyWalletModule } from './EmptyWalletContent'\r\nimport * as styles from './ProfilePage.css'\r\nimport { ProfileBodyLoadingSkeleton } from './ProfilePageLoadingSkeleton'\r\nimport { ViewMyNftsAsset } from './ViewMyNftsAsset'\r\n\r\nconst ProfilePageColumn = styled(Column)`\r\n  ${ScreenBreakpointsPaddings}\r\n`\r\n\r\nconst ProfileHeader = styled.div`\r\n  font-size: 28px;\r\n  font-weight: 535;\r\n  line-height: 38px;\r\n  padding-bottom: 16px;\r\n  margin-bottom: 8px;\r\n  border-bottom: 1px solid ${({ theme }) => theme.surface3};\r\n\r\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\r\n    font-size: 20px;\r\n    line-height: 28px;\r\n    margin-bottom: 0px;\r\n  }\r\n`\r\n\r\nconst EmptyStateContainer = styled.div`\r\n  margin-top: 164px;\r\n`\r\n\r\nexport const DEFAULT_WALLET_ASSET_QUERY_AMOUNT = 25\r\nexport const WALLET_COLLECTIONS_PAGINATION_LIMIT = 300\r\nconst FILTER_SIDEBAR_WIDTH = 300\r\nconst PADDING = 16\r\n\r\nexport const ProfilePage = () => {\r\n  const { address } = useWalletBalance()\r\n  const walletCollections = useWalletCollections((state) => state.walletCollections)\r\n  const setWalletCollections = useWalletCollections((state) => state.setWalletCollections)\r\n  const { resetSellAssets } = useSellAsset(({ reset }) => ({\r\n    resetSellAssets: reset,\r\n  }))\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n  const toggleBag = useBag((state) => state.toggleBag)\r\n  const [isFiltersExpanded, setFiltersExpanded] = useFiltersExpanded()\r\n  const isMobile = useIsMobile()\r\n\r\n  const {\r\n    data: ownerCollectionsData,\r\n    fetchNextPage,\r\n    hasNextPage,\r\n    isFetchingNextPage,\r\n    isSuccess,\r\n  } = useInfiniteQuery(getOSCollectionsInfiniteQueryOptions(address))\r\n\r\n  const ownerCollections = useMemo(\r\n    () => (isSuccess ? ownerCollectionsData?.pages.map((page) => page.data).flat() : null),\r\n    [isSuccess, ownerCollectionsData]\r\n  )\r\n\r\n  useEffect(() => {\r\n    ownerCollections && setWalletCollections(ownerCollections)\r\n  }, [ownerCollections, setWalletCollections])\r\n\r\n  return (\r\n    <ProfilePageColumn width=\"full\" paddingTop={{ sm: `${PADDING}`, md: '40' }}>\r\n      <>\r\n        <ProfileHeader>My NFTs</ProfileHeader>\r\n        <Row alignItems=\"flex-start\" position=\"relative\">\r\n          <FilterSidebar\r\n            fetchNextPage={fetchNextPage}\r\n            hasNextPage={hasNextPage}\r\n            isFetchingNextPage={isFetchingNextPage}\r\n            walletCollections={walletCollections}\r\n          />\r\n          {(!isMobile || !isFiltersExpanded) && (\r\n            <Suspense fallback={<ProfileBodyLoadingSkeleton />}>\r\n              <ProfilePageNfts\r\n                walletCollections={walletCollections}\r\n                isFiltersExpanded={isFiltersExpanded}\r\n                setFiltersExpanded={setFiltersExpanded}\r\n              />\r\n            </Suspense>\r\n          )}\r\n        </Row>\r\n      </>\r\n      {sellAssets.length > 0 && (\r\n        <Row\r\n          display={{ sm: 'flex', md: 'none' }}\r\n          position=\"fixed\"\r\n          left=\"16\"\r\n          height=\"56\"\r\n          borderRadius=\"12\"\r\n          paddingX=\"16\"\r\n          paddingY=\"12\"\r\n          background=\"surface1\"\r\n          borderStyle=\"solid\"\r\n          borderColor=\"surface3\"\r\n          borderWidth=\"1px\"\r\n          style={{ bottom: '68px', width: 'calc(100% - 32px)', lineHeight: '24px' }}\r\n          className={subhead}\r\n        >\r\n          {sellAssets.length} NFT{sellAssets.length === 1 ? '' : 's'}\r\n          <Box\r\n            fontWeight=\"medium\"\r\n            fontSize=\"14\"\r\n            cursor=\"pointer\"\r\n            color=\"neutral2\"\r\n            marginRight=\"20\"\r\n            marginLeft=\"auto\"\r\n            onClick={resetSellAssets}\r\n            lineHeight=\"16\"\r\n          >\r\n            Clear\r\n          </Box>\r\n          <Box\r\n            color=\"white\"\r\n            marginRight=\"0\"\r\n            fontWeight=\"medium\"\r\n            fontSize=\"14\"\r\n            cursor=\"pointer\"\r\n            backgroundColor=\"accent1\"\r\n            onClick={toggleBag}\r\n            lineHeight=\"16\"\r\n            borderRadius=\"12\"\r\n            paddingY=\"8\"\r\n            paddingX=\"28\"\r\n          >\r\n            List for sale\r\n          </Box>\r\n        </Row>\r\n      )}\r\n    </ProfilePageColumn>\r\n  )\r\n}\r\n\r\nconst ProfilePageNfts = ({\r\n  walletCollections,\r\n  isFiltersExpanded,\r\n  setFiltersExpanded,\r\n}: {\r\n  walletCollections: WalletCollection[]\r\n  isFiltersExpanded: boolean\r\n  setFiltersExpanded: (filtersExpanded: boolean) => void\r\n}) => {\r\n  const { address } = useWalletBalance()\r\n  const setCollectionFilters = useWalletCollections((state) => state.setCollectionFilters)\r\n  const collectionFilters = useWalletCollections((state) => state.collectionFilters)\r\n  const clearCollectionFilters = useWalletCollections((state) => state.clearCollectionFilters)\r\n  const isBagExpanded = useBag((state) => state.bagExpanded)\r\n  const [currentTokenPlayingMedia, setCurrentTokenPlayingMedia] = useState<string | undefined>()\r\n  const isMobile = useIsMobile()\r\n  const sellAssets = useSellAsset((state) => state.sellAssets)\r\n\r\n  const {\r\n    walletAssets: ownerAssets,\r\n    loading,\r\n    hasNext,\r\n    loadMore,\r\n  } = useNftBalance(address, collectionFilters, [], DEFAULT_WALLET_ASSET_QUERY_AMOUNT)\r\n\r\n  const { gridX } = useSpring({\r\n    gridX: isFiltersExpanded ? FILTER_SIDEBAR_WIDTH : -PADDING,\r\n    config: {\r\n      duration: 250,\r\n      easing: easings.easeOutSine,\r\n    },\r\n  })\r\n\r\n  if (loading) return <ProfileBodyLoadingSkeleton />\r\n\r\n  return (\r\n    <Column width=\"full\">\r\n      {ownerAssets?.length === 0 ? (\r\n        <EmptyStateContainer>\r\n          <EmptyWalletModule />\r\n        </EmptyStateContainer>\r\n      ) : (\r\n        <AnimatedBox\r\n          flexShrink=\"0\"\r\n          position={isMobile && isBagExpanded ? 'fixed' : 'static'}\r\n          style={{\r\n            transform: gridX.to(\r\n              (x) => `translate(${Number(x) - (!isMobile && isFiltersExpanded ? FILTER_SIDEBAR_WIDTH : -PADDING)}px)`\r\n            ),\r\n          }}\r\n          paddingY=\"20\"\r\n        >\r\n          <Row gap=\"8\" flexWrap=\"nowrap\" justifyContent=\"space-between\">\r\n            <FilterButton\r\n              isMobile={isMobile}\r\n              isFiltersExpanded={isFiltersExpanded}\r\n              onClick={() => setFiltersExpanded(!isFiltersExpanded)}\r\n            />\r\n          </Row>\r\n          <Row>\r\n            <CollectionFiltersRow\r\n              collections={walletCollections}\r\n              collectionFilters={collectionFilters}\r\n              setCollectionFilters={setCollectionFilters}\r\n              clearCollectionFilters={clearCollectionFilters}\r\n            />\r\n          </Row>\r\n          <InfiniteScroll\r\n            next={loadMore}\r\n            hasMore={hasNext ?? false}\r\n            loader={\r\n              Boolean(hasNext && ownerAssets?.length) && <LoadingAssets count={DEFAULT_WALLET_ASSET_QUERY_AMOUNT} />\r\n            }\r\n            dataLength={ownerAssets?.length ?? 0}\r\n            className={ownerAssets?.length ? assetList : undefined}\r\n            style={{ overflow: 'unset' }}\r\n          >\r\n            {ownerAssets?.length\r\n              ? ownerAssets.map((asset, index) => (\r\n                  <div key={index}>\r\n                    <ViewMyNftsAsset\r\n                      asset={asset}\r\n                      mediaShouldBePlaying={asset.tokenId === currentTokenPlayingMedia}\r\n                      setCurrentTokenPlayingMedia={setCurrentTokenPlayingMedia}\r\n                      hideDetails={sellAssets.length > 0}\r\n                    />\r\n                  </div>\r\n                ))\r\n              : null}\r\n          </InfiniteScroll>\r\n        </AnimatedBox>\r\n      )}\r\n    </Column>\r\n  )\r\n}\r\n\r\nconst CollectionFiltersRow = ({\r\n  collections,\r\n  collectionFilters,\r\n  setCollectionFilters,\r\n  clearCollectionFilters,\r\n}: {\r\n  collections: WalletCollection[]\r\n  collectionFilters: Array<string>\r\n  setCollectionFilters: (address: string) => void\r\n  clearCollectionFilters: Dispatch<SetStateAction<void>>\r\n}) => {\r\n  const getCollection = (collectionAddress: string) => {\r\n    return collections?.find((collection) => collection.address === collectionAddress)\r\n  }\r\n  const handleClearAllClick = useCallback(() => clearCollectionFilters(), [clearCollectionFilters])\r\n  return (\r\n    <Row paddingY=\"18\" gap=\"8\" flexWrap=\"wrap\">\r\n      {Boolean(collectionFilters?.length) &&\r\n        collectionFilters.map((collectionAddress, index) => (\r\n          <CollectionFilterItem\r\n            collection={getCollection(collectionAddress)}\r\n            key={`CollectionFilterItem-${collectionAddress}-${index}`}\r\n            setCollectionFilters={setCollectionFilters}\r\n          />\r\n        ))}\r\n      {Boolean(collectionFilters?.length) && <ClearAllButton onClick={handleClearAllClick}>Clear all</ClearAllButton>}\r\n    </Row>\r\n  )\r\n}\r\n\r\nconst CollectionFilterItem = ({\r\n  collection,\r\n  setCollectionFilters,\r\n}: {\r\n  collection?: WalletCollection\r\n  setCollectionFilters: (address: string) => void\r\n}) => {\r\n  if (!collection) return null\r\n  return (\r\n    <Row\r\n      justifyContent=\"center\"\r\n      paddingTop=\"6\"\r\n      paddingRight=\"6\"\r\n      paddingBottom=\"6\"\r\n      paddingLeft=\"12\"\r\n      borderRadius=\"8\"\r\n      background=\"surface3\"\r\n      fontSize=\"14\"\r\n    >\r\n      <Box as=\"img\" borderRadius=\"round\" width=\"20\" height=\"20\" src={collection.image} />\r\n      <Box marginLeft=\"6\" className={styles.collectionFilterBubbleText}>\r\n        {collection?.name}\r\n      </Box>\r\n      <Box\r\n        color=\"neutral2\"\r\n        background=\"none\"\r\n        height=\"28\"\r\n        width=\"28\"\r\n        padding=\"0\"\r\n        as=\"button\"\r\n        border=\"none\"\r\n        cursor=\"pointer\"\r\n        onClick={() => setCollectionFilters(collection.address)}\r\n      >\r\n        <CrossIcon />\r\n      </Box>\r\n    </Row>\r\n  )\r\n}\r\n","import { InterfacePageName } from '@uniswap/analytics-events'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Trace } from 'analytics'\r\nimport { useToggleAccountDrawer } from 'components/AccountDrawer/MiniPortfolio/hooks'\r\nimport { ButtonPrimary } from 'components/Button'\r\nimport useENSName from 'hooks/useENSName'\r\nimport { t, Trans } from 'i18n'\r\nimport { XXXL_BAG_WIDTH } from 'nft/components/bag/Bag'\r\nimport { ListPage } from 'nft/components/profile/list/ListPage'\r\nimport { ProfilePage } from 'nft/components/profile/view/ProfilePage'\r\nimport { useBag, useProfilePageState, useSellAsset, useWalletCollections } from 'nft/hooks'\r\nimport { ProfilePageStateType } from 'nft/types'\r\nimport { useEffect, useRef } from 'react'\r\nimport { Helmet } from 'react-helmet-async/lib/index'\r\nimport styled from 'styled-components'\r\nimport { BREAKPOINTS } from 'theme'\r\nimport { ThemedText } from 'theme/components'\r\nimport { shortenAddress } from 'utilities/src/addresses'\r\n\r\nimport { LIST_PAGE_MARGIN, LIST_PAGE_MARGIN_MOBILE } from './shared'\r\n\r\nconst ProfilePageWrapper = styled.div`\r\n  height: 100%;\r\n  width: 100%;\r\n  scrollbar-width: none;\r\n\r\n  @media screen and (min-width: ${BREAKPOINTS.lg}px) {\r\n    height: auto;\r\n  }\r\n`\r\n\r\nconst LoadedAccountPage = styled.div<{ cartExpanded: boolean; isListingNfts: boolean }>`\r\n  width: calc(\r\n    100% -\r\n      ${({ cartExpanded, isListingNfts }) =>\r\n        isListingNfts ? LIST_PAGE_MARGIN * 2 : cartExpanded ? XXXL_BAG_WIDTH : 0}px\r\n  );\r\n  margin: 0px ${({ isListingNfts }) => (isListingNfts ? LIST_PAGE_MARGIN : 0)}px;\r\n\r\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\r\n    width: calc(100% - ${({ isListingNfts }) => (isListingNfts ? LIST_PAGE_MARGIN_MOBILE * 2 : 0)}px);\r\n    margin: 0px ${({ isListingNfts }) => (isListingNfts ? LIST_PAGE_MARGIN_MOBILE : 0)}px;\r\n  }\r\n`\r\n\r\nconst Center = styled.div`\r\n  left: 50%;\r\n  top: 40%;\r\n  transform: translate(-50%, -50%);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  position: fixed;\r\n  white-space: nowrap;\r\n`\r\n\r\nconst ConnectWalletButton = styled(ButtonPrimary)`\r\n  width: min-content;\r\n  white-space: nowrap;\r\n  border-radius: 12px;\r\n  padding: 14px 18px;\r\n  border: none;\r\n`\r\n\r\nfunction getProfilePageTitle(account: string | undefined, ENSName: string | null | undefined): string {\r\n  if (!account) {\r\n    return t`NFT collection on Uniswap`\r\n  }\r\n\r\n  if (!ENSName) {\r\n    return t(`NFT collection on Uniswap - {{address}}`, {\r\n      address: shortenAddress(account),\r\n    })\r\n  }\r\n\r\n  return t(`{{name}}'s NFT collection on Uniswap`, {\r\n    name: ENSName,\r\n  })\r\n}\r\n\r\nexport default function Profile() {\r\n  const sellPageState = useProfilePageState((state) => state.state)\r\n  const setSellPageState = useProfilePageState((state) => state.setProfilePageState)\r\n  const resetSellAssets = useSellAsset((state) => state.reset)\r\n  const clearCollectionFilters = useWalletCollections((state) => state.clearCollectionFilters)\r\n\r\n  const { account } = useWeb3React()\r\n  const { ENSName } = useENSName(account)\r\n  const accountRef = useRef(account)\r\n  const toggleWalletDrawer = useToggleAccountDrawer()\r\n\r\n  useEffect(() => {\r\n    if (accountRef.current !== account) {\r\n      accountRef.current = account\r\n      resetSellAssets()\r\n      setSellPageState(ProfilePageStateType.VIEWING)\r\n      clearCollectionFilters()\r\n    }\r\n  }, [account, resetSellAssets, setSellPageState, clearCollectionFilters])\r\n  const cartExpanded = useBag((state) => state.bagExpanded)\r\n  const isListingNfts = sellPageState === ProfilePageStateType.LISTING\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{getProfilePageTitle(account, ENSName)}</title>\r\n      </Helmet>\r\n      <Trace page={InterfacePageName.NFT_PROFILE_PAGE} shouldLogImpression>\r\n        <ProfilePageWrapper>\r\n          {account ? (\r\n            <LoadedAccountPage cartExpanded={cartExpanded} isListingNfts={isListingNfts}>\r\n              {!isListingNfts ? <ProfilePage /> : <ListPage />}\r\n            </LoadedAccountPage>\r\n          ) : (\r\n            <Center>\r\n              <ThemedText.HeadlineMedium lineHeight=\"36px\" color=\"neutral2\" fontWeight=\"535\" marginBottom=\"24px\">\r\n                <Trans>No items to display</Trans>\r\n              </ThemedText.HeadlineMedium>\r\n              <ConnectWalletButton onClick={toggleWalletDrawer}>\r\n                <ThemedText.SubHeader color=\"white\" lineHeight=\"20px\">\r\n                  <Trans>Connect wallet</Trans>\r\n                </ThemedText.SubHeader>\r\n              </ConnectWalletButton>\r\n            </Center>\r\n          )}\r\n        </ProfilePageWrapper>\r\n      </Trace>\r\n    </>\r\n  )\r\n}\r\n","export const LIST_PAGE_MARGIN = 40\r\nexport const LIST_PAGE_MARGIN_MOBILE = 16\r\n"],"names":["ModalWrapper","styled","Column","Z_INDEX","modal","theme","surface1","surface3","deprecated_deepShadow","BREAKPOINTS","sm","CloseIconWrapper","div","CloseIcon","X","HazardIconWrap","ContinueButton","ButtonPrimary","EditListings","span","accent1","BelowFloorWarningModal","listingsBelowFloor","closeModal","startListing","useTheme","formatDelta","useFormatter","Portal","width","height","onClick","AlertTriangle","color","critical","ThemedText","HeadlineSmall","lineHeight","textAlign","Trans","BodyPrimary","Plural","value","length","one","t","delta","price","floorPrice","other","count","e","preventDefault","stopPropagation","Overlay","RemoveIconWrap","hovered","TitleRow","Row","SetPriceMethod","SAME_PRICE","FLOOR_PRICE","LAST_PRICE","CUSTOM","WarningType","BELOW_FLOOR","ALREADY_LISTED","NONE","LOOKSRARE_MARKETPLACE_CONTRACT_721","LOOKSRARE_MARKETPLACE_CONTRACT_1155","OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY","OPENSEA_CROSS_CHAIN_CONDUIT","OPENSEA_SEAPORT_V1_5_CONTRACT","OPENSEA_KEY_TO_CONDUIT","INVERSE_BASIS_POINTS","X2Y2_TRANSFER_CONTRACT_721","X2Y2_TRANSFER_CONTRACT_1155","newX2Y2Order","payload","body","JSON","stringify","ac","AbortController","req","Request","method","headers","signal","timeout","setTimeout","abort","res","fetch","json","code","clearTimeout","getX2Y2OrderId","collectionAddress","tokenId","data","url","r","id","createLooksRareOrder","success","PostOpenSeaSellOrder","undefined","ms","orderItemParamType","orderParamTypes","orderParamType","signOrderData","web3Provider","order","orderData","defaultAbiCoder","encode","salt","user","network","intent","delegateType","deadline","currency","dataMask","items","orderHash","keccak256","orderSig","send","slice","s","v","parseInt","fixSignature","encodeOrder","createSellOrder","nftStandard","NftStandard","Erc721","randomHex","BigNumber","from","randomBytes","toHexString","hexZeroPad","randomSalt","AddressZero","map","item","tokens","signVersion","ListingMarkets","name","fee","createConsiderationItem","basisPoints","recipient","amount","getConsiderationItems","asset","signerAddress","creatorFeeBasisPoints","openSeaBasisPoints","find","market","sellerBasisPoints","creatorFee","mul","toString","sellerFee","openSeaFee","asset_contract","payout_address","approveCollection","operator","signer","setStatus","contract","Contract","ERC721","ERC1155","getAddress","isApprovedForAll","ListingStatus","APPROVED","SIGNING","approvalTransaction","setApprovalForAll","PENDING","wait","status","FAILED","error","REJECTED","signListing","marketplace","provider","looksRareNonce","seaport","Seaport","conduitKeyToConduit","overrides","defaultConduitKey","seaportVersion","listingPrice","newListings","listing","expirationTime","address","listingInWei","parseEther","considerationItems","filter","executeAllActions","createOrder","offer","itemType","tokenType","ItemType","token","identifier","consideration","endTime","zone","ZERO_ADDRESS","allowPartialFills","seaportV15Order","protocol_address","addresses","addressesByNetwork","SupportedChainId","MAINNET","currentTime","Math","round","Date","now","makerOrder","isOrderAsk","collection","strategy","STRATEGY_STANDARD_SALE","WETH","nonce","startTime","minPercentageToAsk","sub","toNumber","params","signatureHash","signMakerOrder","signature","orderItem","prevOrderId","isBundle","bundleName","bundleDesc","orderIds","changePrice","Boolean","isCollection","resp","approveCollectionRow","collectionRow","setCollectionStatusAndCallback","callback","spender","TRANSFER_MANAGER_ERC721","newStatus","signListingRow","getLooksRareNonce","setLooksRareNonce","setListingStatusAndCallback","getTotalEthValue","sellAssets","total","reduce","maxListing","a","b","maxFee","Number","EPSILON","useSubscribeListingState","useSellAsset","state","setListings","setCollectionsRequiringApproval","useNFTList","useEffect","newCollectionsToApprove","forEach","marketplaces","newListing","image","smallImageUrl","DEFINED","push","some","newCollectionRow","image_url","isVerified","collectionIsVerified","getListings","getRoyalty","listingMarket","StyledListingButton","BaseButton","showResolveIssues","deprecated_accentTextLightPrimary","missingPrices","ListingButton","toggleShowResolveIssues","issues","setIssues","showWarning","setShowWarning","useState","isMobile","useIsMobile","listingsMissingPrice","useMemo","missingExpiration","overMaxExpiration","listingsAboveSellOrderFloor","isNaN","overrideFloorPrice","floor_sell_order_price","Erc1155","findListingIssues","foundIssues","ContentColumn","failed","opacify","ContentRowWrapper","active","CollectionIcon","img","AssetIcon","MarketplaceIcon","ContentName","SubHeaderSmall","neutral1","ProceedText","neutral2","FailedText","StyledVerifiedIcon","VerifiedIcon","IconWrapper","ButtonRow","failedButtonStyle","css","RemoveButton","button","RetryButton","ContentRow","row","isCollectionApprovalSection","removeRow","rowRef","useRef","current","scroll","ref","src","getMarketplaceIcon","Loader","stroke","neutral3","Check","XOctagon","justify","SectionHeader","SectionTitle","SubHeader","approved","SectionArrow","ChevronUpIcon","TRANSITION_DURATIONS","medium","SectionBody","colors","gray650","ScrollBarStyles","StyledInfoIcon","Info","ContentRowContainer","Section","APPROVE","SIGN","ListModalSection","sectionType","content","toggleSection","removeAssetMarketplace","allContentApproved","uniqueCollections","collections","Set","listingRow","ListingModalWindowActive","fill","ListingModalWindowClosed","marginLeft","secondaryColor","marginBottom","BodySmall","MouseoverTooltip","text","SuccessImage","numImages","SuccessImageWrapper","ProceedsColumn","buttonStyle","ReturnButton","TweetButton","TweetRow","SuccessScreen","overlayClick","formatNumberOrString","chainId","useChainId","nativeCurrency","useNativeCurrency","formatCurrencyAmount","totalEthListingValue","parsedAmount","tryParseCurrencyAmount","usdcValue","useStablecoinValue","pluralize","size","cursor","imageUrl","align","input","type","NumberType","NFTToken","FiatTokenPrice","style","flexWrap","window","location","reload","href","generateTweetForList","target","rel","Twitter","ListModalWrapper","ListModal","account","useAccount","useEthersWeb3Provider","getSigner","trace","useTrace","InterfaceModalName","NFT_LISTING","collectionsRequiringApproval","listings","openSection","toggleOpenSection","useReducer","usdcAmount","allCollectionsApproved","every","allListingsApproved","signListings","sendAnalyticsEvent","NFTEventName","NFT_LISTING_COMPLETED","signatures_approved","list_quantity","usd_value","closeModalOnClick","useCallback","Trace","DropdownWrapper","$width","DropdownRow","Dropdown","dropDownOptions","option","displayText","isSelected","PriceTextInputWrapper","InputWrapper","borderColor","CurrencyWrapper","listPrice","GlobalPriceIcon","WarningRow","WarningMessage","$color","md","WarningAction","getWarningMessage","warning","message","PriceTextInput","setListPrice","isGlobalPrice","setGlobalOverride","globalOverride","warningType","setWarningType","removeSellAsset","inputRef","percentBelowFloor","warningColor","red400","deprecated_accentWarning","useUpdateInputAndWarnings","NumericInput","as","pattern","borderStyle","className","placeholder","default","backgroundColor","onChange","event","includes","parseFloat","val","BrokenLinkIcon","Link","FeeWrap","RoyaltyContainer","iconStyles","MarketIcon","FeePercent","MaxFeeContainer","RoyaltyTooltip","selectedMarkets","fees","maxRoyalty","max","marginRight","LastPriceInfo","lg","FloorPriceInfo","RemoveMarketplaceWrap","MarketIconsWrapper","MarketIconWrapper","index","ExpandMarketIconWrapper","FeeColumnWrapper","FeeWrapper","ReturnColumn","MarketplaceRow","globalPriceMethod","globalPrice","setGlobalPrice","removeMarket","expandMarketplaceRows","toggleExpandMarketplaceRows","rowHovered","setAssetListPrice","marketIconHovered","toggleMarketIconHovered","marketRowHovered","toggleMarketRowHovered","showGlobalPrice","setPrice","selectedMarket","feeInEth","userReceives","useHandleGlobalPriceToggle","lastPrice","useSyncPriceWithGlobalMethod","onMouseEnter","onMouseLeave","flex","alt","RowsExpandedIcon","RowsCollpsedIcon","placement","EthPriceDisplay","ethPrice","ethUsdPrice","useNativeUsdPrice","FiatNFTToken","NFTListRowWrapper","RemoveIconContainer","opacity","hover","NFTInfoWrapper","NFTImage","HideTextOverflow","TokenInfoWrapper","TokenName","CollectionName","MarketPlaceRowWrapper","NFTListRow","removeAsset","localMarkets","setLocalMarkets","toggleHovered","parse","Trash2","oldMarket","TableHeader","surface2","NFTHeader","PriceHeaders","LastPriceHeader","FloorPriceHeader","DropdownAndHeaderWrapper","DropdownPromptContainer","DropdownPrompt","DropdownChevron","ChevronDown","isOpen","transition","duration","timing","fast","ease","DropdownContainer","FeeUserReceivesSharedStyles","FeeHeader","UserReceivesHeader","RowDivider","hr","NFTListingsGrid","setGlobalPriceMethod","showDropdown","toggleShowDropdown","dropdownRef","useOnClickOutside","priceDropdownOptions","prompt","indexOf","MarketplaceRowWrapper","FeeText","HeaderButtonWrap","SMALL_MEDIA_BREAKPOINT","HeaderButtonContentWrapper","totalSelected","Chevron","modalBackdrop","SelectMarketplacesDropdown","setSelectedMarkets","toggleIsOpen","dropdownDisplayText","buttonTextMedium","themeVars","toggleSelected","selected","gap","caption","Checkbox","checked","isInvalid","dropdown","ErrorMessage","WarningIcon","Duration","hour","day","week","month","ErrorState","valid","empty","overMax","SetDurationModal","setDuration","setAmount","errorState","setErrorState","setGlobalExpiration","durationDropdownRef","durationOptions","expiration","convertDurationToExpiration","flexShrink","durationFactor","ListingHeader","xs","ArrowContainer","BackArrow","ArrowLeft","TitleWrapper","ButtonsWrapper","MarketWrap","section","ListingHeaderRow","GridWrapper","FloatingConfirmationBar","LIST_PAGE_MARGIN","maxWidth","under_dropdown","deprecated_shallowShadow","LIST_PAGE_MARGIN_MOBILE","UsdValue","ProceedsAndButtonWrapper","ProceedsWrapper","EthValueWrapper","ListPage","setProfilePageState","setSellPageState","useProfilePageState","useEthersSigner","setGlobalMarketplaces","showListModal","toggleShowListModal","startListingEventProperties","collection_addresses","token_ids","Array","startListingFlow","NFT_SELL_START_LISTING","PAUSED","BannerText","ProfilePageStateType","VIEWING","ItemsContainer","LongLoadingBubble","LoadingBubble","SmallLoadingBubble","MobileMenuHeader","LoadingCollectionItem","display","justifyContent","paddingLeft","paddingRight","Box","aria-hidden","FilterSidebar","fetchNextPage","hasNextPage","isFetchingNextPage","walletCollections","collectionFilters","useWalletCollections","setCollectionFilters","isFiltersExpanded","setFiltersExpanded","useFiltersExpanded","sidebarX","useSpring","config","easing","easings","easeOutSine","hideSearch","WALLET_COLLECTIONS_PAGINATION_LIMIT","AnimatedBox","position","top","left","zIndex","transform","to","x","background","paddingTop","XMarkIcon","CollectionSelect","collectionSearchText","setCollectionSearchText","displayCollections","setDisplayCollections","filtered","toLowerCase","itemKey","itemCount","loadMoreItems","noop","isItemLoaded","CollectionFilterRow","CollectionItem","subhead","marginTop","paddingBottom","borderRadius","maxHeight","CollectionFilterSearch","AutoSizer","disableWidth","InfiniteLoader","onItemsRendered","FixedSizeList","itemSize","Input","autoComplete","currentTarget","isCheckboxSelected","setCheckboxSelected","isChecked","handleCheckbox","overflowX","overflowY","fontWeight","whiteSpace","textOverflow","overflow","minHeight","RefetchInterval","SHORT","MEDIUM","LONG","OSCollectionsFetcher","hasEmptyFields","Object","values","URLSearchParams","primary_asset_contracts","owned_asset_count","SkeletonBodyWrapper","SkeletonRowWrapper","AccountDetailsSkeletonWrapper","ProfileDetailsSkeleton","FilterBarSkeletonWrapper","FilterButtonSkeleton","SellButtonSkeleton","ProfileAssetCardSkeleton","ProfileAssetCardDisplaySectionSkeleton","assetList","DEFAULT_WALLET_ASSET_QUERY_AMOUNT","_","loadingAsset","ProfileBodyLoadingSkeleton","ViewMyNftsAsset","mediaShouldBePlaying","setCurrentTokenPlayingMedia","hideDetails","selectSellAsset","cartExpanded","useBag","bagExpanded","toggleCart","toggleBag","navigate","useNavigate","handleSelect","NFT_SELL_ITEM_ADDED","collection_address","token_id","isDisabled","susFlag","primaryInfo","primaryInfoIcon","secondaryInfo","selectedInfo","notSelectedInfo","disabledInfo","NftCard","selectAsset","unselectAsset","onButtonClick","onCardClick","detailsHref","testId","ProfilePageColumn","ScreenBreakpointsPaddings","ProfileHeader","breakpoint","EmptyStateContainer","ProfilePage","useWalletBalance","setWalletCollections","resetSellAssets","reset","ownerCollectionsData","isSuccess","useInfiniteQuery","infiniteQueryOptions","queryKey","queryFn","pageParam","asset_owner","offset","limit","nextPage","initialPageParam","getNextPageParam","lastGroup","refetchInterval","getOSCollectionsInfiniteQueryOptions","ownerCollections","pages","page","flat","alignItems","Suspense","fallback","ProfilePageNfts","paddingX","paddingY","borderWidth","bottom","fontSize","ownerAssets","clearCollectionFilters","isBagExpanded","currentTokenPlayingMedia","walletAssets","loading","hasNext","loadMore","useNftBalance","gridX","EmptyWalletModule","FilterButton","CollectionFiltersRow","InfiniteScroll","next","hasMore","loader","LoadingAssets","dataLength","getCollection","handleClearAllClick","CollectionFilterItem","ClearAllButton","padding","border","CrossIcon","ProfilePageWrapper","LoadedAccountPage","isListingNfts","XXXL_BAG_WIDTH","Center","ConnectWalletButton","getProfilePageTitle","ENSName","shortenAddress","Profile","sellPageState","useWeb3React","useENSName","accountRef","toggleWalletDrawer","useToggleAccountDrawer","LISTING","Helmet","title","InterfacePageName","NFT_PROFILE_PAGE","shouldLogImpression","HeadlineMedium"],"sourceRoot":""}