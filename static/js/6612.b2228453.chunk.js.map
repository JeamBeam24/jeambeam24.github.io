{"version":3,"file":"static/js/6612.b2228453.chunk.js","mappings":"qUAmBA,MAAMA,EAAgBC,EAAAA,QAAOC,IAAG,Y,2KAAmB;;;;;;;;;;WAUxC,EAAGC,WAAYA,EAAMC;sBACV,EAAGD,WAAYA,EAAME;aAC9BC,EAAAA,EAAQC;;eAEN,EAAGC,UAAYA,EAAO,iBAAmB;;;EAKlDC,GAAoBR,EAAAA,EAAAA,SAAOS,EAAAA,IAAWA,WAAAA,C,+KAAC;;EAIvCC,GAAcV,EAAAA,EAAAA,SAAOW,EAAAA,IAAIA,WAAAA,C,yKAAC;WACrB,EAAGT,WAAYA,EAAMU;;;IAG5B,EAAGV,WAAYA,EAAMW,sBAAsBC,oBAAoB;;;EAKpD,SAASC,GAA0B,KAChDR,EAAI,WACJS,IAKA,MAAMC,GAAUC,EAAAA,EAAAA,MACTC,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,GAEzCC,EACJL,GAAWD,EACPA,EAAWO,KAAKC,I,IACPA,EAAP,OAAOA,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAUC,OAAO,IAE1B,GAEN,OACE,UAAC1B,EAAAA,CAAcQ,KAAMA,E,WACnB,SAACmB,EAAAA,EAAKA,CAACC,OAAQR,EAAaS,UAAW,IAAMR,GAAe,G,UAC1D,SAACS,EAAAA,GAAIA,CAACC,QAAQ,O,UACZ,UAACC,EAAAA,GAAUA,CAACC,IAAI,K,WACd,UAACC,EAAAA,GAAUA,C,WACT,SAACC,EAAAA,GAAWC,uBAAsB,C,UAChC,SAACC,EAAAA,GAAKA,C,SAAC,0BAET,SAACC,EAAAA,GAASA,CAACC,QAAS,IAAMlB,GAAe,GAAQmB,cAAY,kBAE9DjB,EAAOC,KAAKiB,I,IAEkBA,EAAAA,EAD7B,OACE,SAACC,EAAAA,CAAmED,MAAOA,EAAOvB,QAASA,GAAhEuB,QAAAA,EAAAA,SAAAA,IAAAA,GAAc,QAAdA,EAAAA,EAAOE,eAAPF,IAAAA,OAAAA,EAAAA,EAAgBG,OAAO,sBAGtD,SAACZ,EAAAA,GAAUA,CAACC,IAAI,K,UACd,SAACE,EAAAA,GAAWU,eAAc,CAACC,WAAY,I,UACrC,SAACT,EAAAA,GAAKA,C,SAAC,kLASjB,SAAC5B,EAAAA,CAAkBsB,QAAQ,IAAIQ,QAAS,IAAMlB,GAAe,GAAOmB,cAAY,mB,UAC9E,SAAC5B,EAAAA,GAAIA,CAACmC,MAAM,W,UACV,SAACV,EAAAA,GAAKA,C,SAAC,6CAKjB,CAEA,SAASK,GAAqB,MAAED,EAAK,QAAEvB,I,IAGrB8B,EAAwBA,EAKpBP,EAAAA,EAPpB,MAAMO,GAAeC,EAAAA,EAAAA,IAAgBR,GAErC,OAAKA,KAAWO,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAcE,UAAUF,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAcG,eAAgBC,EAAAA,IAAYC,SACzE,MAIP,SAACC,EAAAA,GAAWA,CAA+Cd,cAAY,yB,UACrE,UAACR,EAAAA,GAAUA,CAACC,IAAI,O,WACd,UAACsB,EAAAA,GAAOA,CAACtB,IAAI,MAAMuB,MAAM,S,WACvB,SAACC,EAAAA,EAAYA,CAAChC,SAAUgB,EAAOiB,KAAM,MACrC,SAACvB,EAAAA,GAAWU,eAAc,CAACC,WAAY,I,SAAML,EAAMkB,YAEpDzC,IACC,SAAC0C,EAAAA,GAAYA,CAACC,MAAMC,EAAAA,EAAAA,GAAgB5C,EAASuB,EAAME,QAASoB,EAAAA,EAAiBC,S,UAC3E,SAACrD,EAAAA,C,SAAa8B,EAAME,gBARVF,QAAAA,EAAAA,SAAAA,IAAAA,GAAc,QAAdA,EAAAA,EAAOE,eAAPF,IAAAA,OAAAA,EAAAA,EAAgBG,OAAO,iBAc7C,C,+gBC/GA,MAAMqB,EAAOC,IAAAA,OAAY,GAElB,SAASC,IACd,OAAOC,EAAAA,EAAAA,IAAgBC,GAAUA,EAAMC,MACzC,C,iICTO,SAASC,IAAsB,YACpCC,EAAW,MACXC,EAAK,WACLxD,EAAU,cACVyD,EAAa,oBACbC,EAAmB,MACnBC,I,IASsB3D,EACAA,EAScyD,EASAA,EAQtBzD,EAA0CwD,EAC9CxD,EAMIA,EAA0CwD,EAC9CxD,EASmC0D,EA5C7C,MAAME,EAA4C,QAA5B5D,EAAAA,EAAW6D,EAAAA,GAAMC,mBAAjB9D,IAAAA,OAAAA,EAAAA,EAA8B0C,OAC9CqB,EAA4C,QAA5B/D,EAAAA,EAAW6D,EAAAA,GAAMG,mBAAjBhE,IAAAA,OAAAA,EAAAA,EAA8B0C,OACpD,OACE,sB,WACE,UAACzB,EAAAA,GAAUA,C,WACT,SAACC,EAAAA,GAAWU,eAAc,C,UACxB,UAACR,EAAAA,GAAKA,C,UAAE,CAAEwC,iBAAgB,mBAE5B,UAACK,EAAAA,GAAQA,C,WACP,SAACzB,GAAAA,EAAYA,CAAChC,SAAUR,EAAW6D,EAAAA,GAAMC,YAAaI,MAAO,CAAEC,YAAa,UAC5E,SAACjD,EAAAA,GAAWU,eAAc,C,SAAiC,QAA/B6B,EAAAA,EAAcI,EAAAA,GAAMC,mBAApBL,IAAAA,OAAAA,EAAAA,EAAiCW,cAAc,YAG/E,UAACnD,EAAAA,GAAUA,C,WACT,SAACC,EAAAA,GAAWU,eAAc,C,UACxB,UAACR,EAAAA,GAAKA,C,UAAE,CAAE2C,iBAAgB,mBAE5B,UAACE,EAAAA,GAAQA,C,WACP,SAACzB,GAAAA,EAAYA,CAAChC,SAAUR,EAAW6D,EAAAA,GAAMG,YAAaE,MAAO,CAAEC,YAAa,UAC5E,SAACjD,EAAAA,GAAWU,eAAc,C,SAAiC,QAA/B6B,EAAAA,EAAcI,EAAAA,GAAMG,mBAApBP,IAAAA,OAAAA,EAAAA,EAAiCW,cAAc,YAG/E,UAACnD,EAAAA,GAAUA,C,WACT,SAACC,EAAAA,GAAWU,eAAc,C,UACxB,SAACR,EAAAA,GAAKA,C,SAAC,aAET,SAACF,EAAAA,GAAWU,eAAc,C,SACvB,KAAiC,QAA5B5B,EAAAA,EAAW6D,EAAAA,GAAMC,mBAAjB9D,IAAAA,OAAAA,EAAAA,EAA8B0C,YAAYc,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAOY,cAAc,MACvC,QAA5BpE,EAAAA,EAAW6D,EAAAA,GAAMG,mBAAjBhE,IAAAA,OAAAA,EAAAA,EAA8B0C,eAIpC,SAACzB,EAAAA,GAAUA,CAACiD,MAAO,CAAEG,eAAgB,Y,UACnC,SAACnD,EAAAA,GAAWU,eAAc,C,SACvB,KAAiC,QAA5B5B,EAAAA,EAAW6D,EAAAA,GAAMG,mBAAjBhE,IAAAA,OAAAA,EAAAA,EAA8B0C,YAAYc,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAOc,SAASF,cAAc,MAChD,QAA5BpE,EAAAA,EAAW6D,EAAAA,GAAMC,mBAAjB9D,IAAAA,OAAAA,EAAAA,EAA8B0C,cAIpC,UAACzB,EAAAA,GAAUA,C,WACT,SAACC,EAAAA,GAAWU,eAAc,C,UACxB,SAACR,EAAAA,GAAKA,C,SAAC,sBAET,SAACF,EAAAA,GAAWU,eAAc,C,UACxB,UAACR,EAAAA,GAAKA,C,UAAE,CAAEmD,IAAKhB,EAAc,MAAQG,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAqBU,cAAc,IAAK,aAGjF,SAACI,EAAAA,GAAaA,CAACN,MAAO,CAAEO,OAAQ,cAAgBnD,QAASqC,E,UACvD,SAAChE,GAAAA,GAAIA,CAACkC,WAAY,IAAK6C,SAAU,G,SAC9BnB,GAAc,SAACnC,EAAAA,GAAKA,C,SAAC,0BAA+B,SAACA,EAAAA,GAAKA,C,SAAC,yBAKtE,CCpEO,SAASuD,IAAa,WAC3B3E,EAAU,YACVuD,EAAW,oBACXG,EAAmB,MACnBF,I,IAqBWA,EAIUxD,EAAqDA,EAQrDA,EAAqDA,EAQ3D0D,EAAoDA,EAlCnE,MAAMxE,GAAQ0F,EAAAA,EAAAA,YAEd,IAAIC,EACJ,I,IACkBrB,EAAAA,EAAhBqB,EAAgBrB,QAAAA,EAAAA,SAAAA,IAAAA,GAAa,QAAbA,EAAAA,EAAOc,gBAAPd,IAAAA,OAAAA,EAAAA,EAAiBY,cAAc,EACjD,CAAE,MAAOU,GACPD,OAAgBE,CAClB,CAEA,OACE,SAAChE,EAAAA,GAAUA,CAACC,IAAI,K,UACd,UAACsB,EAAAA,GAAOA,CAAC0C,QAAQ,eAAehE,IAAI,M,WAClC,UAACD,EAAAA,GAAUA,CAACiE,QAAQ,S,WAClB,SAAC9D,EAAAA,GAAW+D,gBAAe,CAAC1D,cAAY,mB,UACrCiC,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAOY,cAAc,KAAM,OAE9B,SAACzE,GAAAA,GAAIA,CAACkC,WAAY,IAAK6C,SAAU,GAAI5C,MAAO5C,EAAMC,SAAU+F,GAAI,E,UAC9D,UAAC9D,EAAAA,GAAKA,C,UACH,CAAE+D,KAAkC,QAA5BnF,EAAAA,EAAW6D,EAAAA,GAAMG,mBAAjBhE,IAAAA,OAAAA,EAAAA,EAA8B0C,QAAS,QAAM,CAAE0C,KAAkC,QAA5BpF,EAAAA,EAAW6D,EAAAA,GAAMC,mBAAjB9D,IAAAA,OAAAA,EAAAA,EAA8B0C,iBAIlG,UAAC3B,EAAAA,GAAUA,CAACiE,QAAQ,S,WAClB,SAAC9D,EAAAA,GAAW+D,gBAAe,CAAC1D,cAAY,mB,SAAoBsD,GAAiB,OAC7E,SAAClF,GAAAA,GAAIA,CAACkC,WAAY,IAAK6C,SAAU,GAAI5C,MAAO5C,EAAMC,SAAU+F,GAAI,E,UAC9D,UAAC9D,EAAAA,GAAKA,C,UACH,CAAEgE,KAAkC,QAA5BpF,EAAAA,EAAW6D,EAAAA,GAAMC,mBAAjB9D,IAAAA,OAAAA,EAAAA,EAA8B0C,QAAS,QAAM,CAAEyC,KAAkC,QAA5BnF,EAAAA,EAAW6D,EAAAA,GAAMG,mBAAjBhE,IAAAA,OAAAA,EAAAA,EAA8B0C,iBAIlG,UAAC3B,EAAAA,GAAUA,CAACiE,QAAQ,S,WAClB,UAAC9D,EAAAA,GAAW+D,gBAAe,C,UACxB1B,GAAeC,EACZ,QACCE,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAqB2B,SAASC,EAAAA,KAAY,QAAU5B,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAqB6B,QAAQ,KAAO,IAAI,QAGnG,SAAC5F,GAAAA,GAAIA,CAACkC,WAAY,IAAK6C,SAAU,GAAI5C,MAAO5C,EAAMC,SAAU+F,GAAI,E,UAC9D,SAAC9D,EAAAA,GAAKA,C,SAAC,2BAMnB,C,0HCfA,MAAMoE,GAAoC,IAAIC,EAAAA,QAAQ,GAAI,KAEpDC,IAA8B1G,EAAAA,EAAAA,SAAO+B,EAAAA,IAAUA,WAAAA,C,0KAAC;;;EAKvC,SAAS4E,K,IAsD8BlC,EA2BsCmC,EACAA,EA8InEnC,EACVzD,GAAqDyD,GACrDzD,GA2CiCA,GAAwBA,GAuB7C6F,GAwH4B7F,GAGJA,GAYIA,GAGJA,GA7ajD,MAAM,YAAE8F,GAAW,YAAEC,KAAgBC,EAAAA,EAAAA,MAC/BC,IAAWC,EAAAA,EAAAA,MACXC,IAAUC,EAAAA,EAAAA,KACVC,IAASC,EAAAA,EAAAA,KAETpH,IAAQ0F,EAAAA,EAAAA,YACR2B,IAAQC,EAAAA,EAAAA,MAERC,IAAYC,EAAAA,EAAAA,IAAYZ,IACxBa,IAAYD,EAAAA,EAAAA,IAAYX,IAExBa,GAA2C,cAAnBT,GAAQU,OAAyBC,EAAAA,GAAwBX,GAAQlG,cAAW8E,EAEpGgC,GAAoBC,QACxBb,GAAQlG,SACN2G,KACEH,IAAaA,GAAUQ,OAAOL,KAA4BD,IAAaA,GAAUM,OAAOL,MAGxFM,IAAqBC,EAAAA,EAAAA,OAGrB,iBAAEC,GAAgB,WAAEC,GAAU,gBAAEC,IAAoBpE,KACpD,eACJqE,GAAc,WACdvH,GAAU,KACV6F,GAAI,UACJ2B,GAAS,iBACTC,GAAgB,cAChBhE,GAAa,MACbD,GAAK,YACLD,GAAW,gBACXmE,GAAe,oBACfhE,GAAmB,MACnBoB,IH9CG,SACL2B,EACAE,G,IA+BmCd,EAiHZ4B,EAAAA,EAIAA,EAAAA,EAtIvB,MAAM,QAAEtB,IAAYwB,EAAAA,EAAAA,MAEd,iBAAEP,EAAgB,WAAEC,EAAU,gBAAEC,GAAoBpE,IAEpDqE,EAAiBH,IAAqBvD,EAAAA,GAAMC,WAAaD,EAAAA,GAAMG,WAAaH,EAAAA,GAAMC,WAGlF9D,GAA8C4H,EAAAA,EAAAA,UAClD,KAAO,CACL,CAAC/D,EAAAA,GAAMC,YAAa2C,QAAa1B,EACjC,CAAClB,EAAAA,GAAMG,YAAa2C,QAAa5B,KAEnC,CAAC0B,EAAWE,KAIPa,EAAW3B,IAAQgC,EAAAA,EAAAA,IAAU7H,EAAW6D,EAAAA,GAAMC,YAAa9D,EAAW6D,EAAAA,GAAMG,aAC7E8D,GAAcC,EAAAA,EAAAA,GAAelC,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAMmC,gBAEnCzE,EACJiE,IAAcS,EAAAA,GAAUC,YACxBlB,QAAQc,GAAe7E,IAAAA,MAAW6E,EAAYK,SAAUnF,KACxDgE,QACEQ,IAAcS,EAAAA,GAAUG,QACtBvC,GACA5C,IAAAA,MAAW4C,EAAKwC,SAASF,SAAUnF,IACnCC,IAAAA,MAAW4C,EAAKyC,SAASH,SAAUnF,IAInCuF,GAAWC,EAAAA,EAAAA,IACfrC,QAAWpB,GACX6C,EAAAA,EAAAA,UAAQ,IAAM,CAAC5H,EAAW6D,EAAAA,GAAMC,YAAa9D,EAAW6D,EAAAA,GAAMG,cAAc,CAAChE,KAEzEyH,EAAoE,CACxE,CAAC5D,EAAAA,GAAMC,YAAayE,EAAS,GAC7B,CAAC1E,EAAAA,GAAMG,YAAauE,EAAS,IAIzBE,GAA0DC,EAAAA,EAAAA,GAC9DrB,EACArH,EAAWoH,IAEPuB,GAAwDf,EAAAA,EAAAA,UAAQ,KACpE,GAAIrE,EACF,OAAI+D,GAAmBtH,EAAWuH,IACzBmB,EAAAA,EAAAA,GAAuBpB,EAAiBtH,EAAWuH,SAE5D,EACK,GAAIkB,EAAJ,C,IAE4BA,EACPhC,EAAoBE,EAD9C,MAAMiC,EAA2BH,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAmBhI,SAC7CoI,EAAQC,GAAU,CAACrC,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAWhG,QAASkG,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAWlG,SACzD,GAAIoI,GAAUC,GAAUF,GAA4B/C,EAAM,C,IAMjDkD,EALP,MAAMA,EAAoBxB,IAAmB1D,EAAAA,GAAMG,WAAa2C,EAAYF,EACtEuC,EACJzB,IAAmB1D,EAAAA,GAAMG,WACrB6B,EAAKoD,QAAQJ,GAAQK,MAAMN,GAC3B/C,EAAKoD,QAAQH,GAAQI,MAAMN,GACjC,OAAOG,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAmBI,UACtBC,EAAAA,eAAeC,cAAcN,EAAmBC,EAAqBb,UACrEa,CACN,CAIF,IACC,CAACzF,EAAa+D,EAAiBtH,EAAYuH,EAAgBkB,EAAmBhC,EAAWE,EAAWd,IAEjGpC,GAA4EmE,EAAAA,EAAAA,UAAQ,KACjF,CACL,CAAC/D,EAAAA,GAAMC,YAAasD,IAAqBvD,EAAAA,GAAMC,WAAa2E,EAAoBE,EAChF,CAAC9E,EAAAA,GAAMG,YAAaoD,IAAqBvD,EAAAA,GAAMC,WAAa6E,EAAkBF,KAE/E,CAACE,EAAiBF,EAAmBrB,IAElC5D,GAAQoE,EAAAA,EAAAA,UAAQ,KACpB,IAAIrE,EAOG,C,IACoBkD,EAAzB,MAAM6C,EAAmB7C,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAWhG,QACpC,OAAOoF,GAAQyD,EAAmBzD,EAAKoD,QAAQK,QAAoBvE,CACrE,CAVA,C,IAEMwE,EAAmCC,EADvC,MAAQ,CAAC3F,EAAAA,GAAMC,YAAayF,EAAiB,CAAC1F,EAAAA,GAAMG,YAAawF,GAAoB/F,EACrF,IAAI8F,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAiBE,YAAY,MAAMD,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAiBC,YAAY,IAAI,CACtE,MAAMC,EAAQF,EAAgBG,OAAOJ,GACrC,OAAO,IAAIK,EAAAA,MAAML,EAAgB/I,SAAUgJ,EAAgBhJ,SAAUkJ,EAAMG,YAAaH,EAAMI,UAChG,CAKF,IACC,CAACrD,EAAWlD,EAAasC,EAAMpC,IAG5BiE,GAAkBE,EAAAA,EAAAA,UAAQ,K,IAEQ2B,EAA0BC,EADhE,MAAQ,CAAC3F,EAAAA,GAAMC,YAAayF,EAAiB,CAAC1F,EAAAA,GAAMG,YAAawF,GAAoB/F,GAC9EsG,EAAcC,GAAgB,CAACT,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAiB9I,QAAS+I,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAiB/I,SACjF,GAAIoF,GAAQiC,GAAeiC,GAAgBC,EACzC,IACE,OAAOnE,EAAKoE,mBAAmBnC,EAAaiC,EAAcC,EAC5D,CAAE,MAAOlF,GAEP,YADAoF,QAAQpF,MAAMA,EAEhB,CAGF,GACC,CAACrB,EAAeoC,EAAMiC,IAEnBpE,GAAsBkE,EAAAA,EAAAA,UAAQ,IAC9BF,GAAmBI,EACd,IAAIrC,EAAAA,QAAQiC,EAAgBS,SAAUL,EAAYqC,IAAIzC,GAAiBS,eAE9E,GAED,CAACT,EAAiBI,IAErB,IAAIhD,EACCqB,IACHrB,GAAQ,SAAC1D,EAAAA,GAAKA,C,SAAC,oBAGboG,IAAcS,EAAAA,GAAUmC,UAC1BtF,EAAQA,IAAS,SAAC1D,EAAAA,GAAKA,C,SAAC,kBAGrBqC,EAAcI,EAAAA,GAAMC,aAAgBL,EAAcI,EAAAA,GAAMG,cAC3Dc,EAAQA,IAAS,SAAC1D,EAAAA,GAAKA,C,SAAC,qBAG1B,MAAQ,CAACyC,EAAAA,GAAMC,YAAayF,EAAiB,CAAC1F,EAAAA,GAAMG,YAAawF,GAAoB/F,E,IAG5CzD,EAIAA,EAGzC,OARIuJ,IAAmB9B,QAAAA,EAAAA,SAAAA,IAAAA,GAAoC,QAApCA,EAAAA,EAAmB5D,EAAAA,GAAMC,mBAAzB2D,IAAAA,OAAAA,EAAAA,EAAsCpC,SAASkE,MACpEzE,GAAQ,UAAC1D,EAAAA,GAAKA,C,UAAC,gBAAc,CAAEsB,OAAoC,QAA5B1C,EAAAA,EAAW6D,EAAAA,GAAMC,mBAAjB9D,IAAAA,OAAAA,EAAAA,EAA8B0C,QAAS,eAG5E8G,IAAmB/B,QAAAA,EAAAA,SAAAA,IAAAA,GAAoC,QAApCA,EAAAA,EAAmB5D,EAAAA,GAAMG,mBAAzByD,IAAAA,OAAAA,EAAAA,EAAsCpC,SAASmE,MACpE1E,GAAQ,UAAC1D,EAAAA,GAAKA,C,UAAC,gBAAc,CAAEsB,OAAoC,QAA5B1C,EAAAA,EAAW6D,EAAAA,GAAMG,mBAAjBhE,IAAAA,OAAAA,EAAAA,EAA8B0C,QAAS,eAGzE,CACL6E,iBACAvH,aACA6F,OACA2B,YACAC,mBACAhE,gBACAD,QACAD,cACAmE,kBACAhE,sBACAoB,QAEJ,CGxHMuF,CAAmB5D,SAAa1B,EAAW4B,SAAa5B,IAEtD,cAAEuF,GAAa,cAAEC,IH3ElB,SAA+BhH,GAIpC,MAAMiH,GAAWC,EAAAA,EAAAA,KAgBjB,MAAO,CACLH,eAfoBI,EAAAA,EAAAA,cACnBrD,IACCmD,GAASG,EAAAA,EAAAA,IAAU,CAAEC,MAAO/G,EAAAA,GAAMC,WAAYuD,aAAY9D,aAA6B,IAAhBA,IAAwB,GAEjG,CAACiH,EAAUjH,IAYXgH,eAToBG,EAAAA,EAAAA,cACnBrD,IACCmD,GAASG,EAAAA,EAAAA,IAAU,CAAEC,MAAO/G,EAAAA,GAAMG,WAAYqD,aAAY9D,aAA6B,IAAhBA,IAAwB,GAEjG,CAACiH,EAAUjH,IAOf,CGmD2CsH,CAAsBtH,IAEzDuH,IAAWhG,IAGViG,GAAaC,KAAkB3K,EAAAA,EAAAA,WAAkB,IACjD4K,GAAeC,KAAoB7K,EAAAA,EAAAA,WAAkB,GAGtD8K,IAAcC,EAAAA,EAAAA,KACdC,IAAkBC,EAAAA,EAAAA,IAAoC9F,KACrD+F,GAAQC,KAAanL,EAAAA,EAAAA,UAAiB,IAGvCoL,GAAmB,CACvB,CAACrE,IAAmBC,GACpB,CAACE,IAAiBhE,GAAc+D,IAA+C,QAA7B7D,EAAAA,GAAc8D,WAAd9D,IAAAA,OAAAA,EAAAA,EAA+BW,cAAc,KAAM,IAIjGsH,GAA8D,CAAC7H,EAAAA,GAAMC,WAAYD,EAAAA,GAAMG,YAAY2H,QACvG,CAACC,EAAahB,KACL,IACFgB,EACH,CAAChB,IAAQiB,EAAAA,GAAAA,GAAepE,GAAiBmD,OAG7C,CAAC,GAGGkB,GAAgE,CAACjI,EAAAA,GAAMC,WAAYD,EAAAA,GAAMG,YAAY2H,QACzG,CAACC,EAAahB,K,IAGDc,EAFX,MAAO,IACFE,EACH,CAAChB,GAAyB,QAAjBc,EAAAA,GAAWd,UAAXc,IAAAA,OAAAA,EAAAA,EAAmBK,QAAQtI,GAAcmH,IAAU,KAC7D,GAEH,CAAC,GAGGhF,IAASoG,EAAAA,EAAAA,OAGRC,GAAWC,KAAoBC,EAAAA,EAAAA,GAAmB1I,GAAcI,EAAAA,GAAMC,YAAa8B,QAAAA,EAAAA,UAAAA,IAAAA,OAAAA,EAAAA,EAAQlE,UAC3F0K,GAAWC,KAAoBF,EAAAA,EAAAA,GAAmB1I,GAAcI,EAAAA,GAAMG,YAAa4B,QAAAA,EAAAA,UAAAA,IAAAA,OAAAA,EAAAA,EAAQlE,SAE5F4K,IAAiBC,EAAAA,EAAAA,MACjBC,IAAoBC,EAAAA,EAAAA,K,SAEX9I,K,OAAAA,GAAAA,MAAAA,KAAAA,U,UAAAA,K,eAAf,YACE,GAAuB,cAAnBwC,GAAQU,SAA2BR,KAAWT,KAAW4G,GAAmB,OAEhF,MAAQ,CAAC3I,EAAAA,GAAMC,YAAa4I,EAAe,CAAC7I,EAAAA,GAAMG,YAAa2I,GAAkBlJ,GAC3EmJ,QAAiBzB,KAEvB,IAAKuB,IAAkBC,IAAkBlG,KAAcE,KAAciG,EACnE,OAGF,MAAMC,EAAa,CACjB,CAAChJ,EAAAA,GAAMC,aAAagJ,EAAAA,EAAAA,GAAwBJ,EAAenJ,GAAcwJ,EAAAA,GAAe1B,IAAiB,GACzG,CAACxH,EAAAA,GAAMG,aAAa8I,EAAAA,EAAAA,GAAwBH,EAAepJ,GAAcwJ,EAAAA,GAAe1B,IAAiB,IAG3G,IAAI2B,EACFC,EACAC,EACAxD,EACF,GAAIjD,GAAU0C,UAAYxC,GAAUwC,SAAU,C,IAK1C,EAACgE,EAJH,MAAMA,EAAcxG,GAAUwC,SAC9B6D,EAAWpH,GAAOwH,YAAYC,gBAC9BJ,EAASrH,GAAOyH,gBAChBH,EAAO,EACsBvG,QAA1BwG,EAAAA,EAAc1G,GAAYE,UAA1BwG,IAAAA,GAA6C,QAA9C,IAAuC1M,eAAvC,WAAC0M,EAAD,EAAgDzL,UAAW,IAC1DyL,EAAcT,EAAgBC,GAAexE,SAASmF,WACvDT,EAAWM,EAActJ,EAAAA,GAAMC,WAAaD,EAAAA,GAAMG,YAAYsJ,WAC9DT,EAAWM,EAActJ,EAAAA,GAAMG,WAAaH,EAAAA,GAAMC,YAAYwJ,WAC9DnH,GAAQzE,QACRkL,EAASW,eAEX7D,EAAQ8D,EAAAA,GAAUC,MAAMN,EAAcR,EAAgBD,GAAevE,SAASmF,WAChF,KAAO,C,IAIH7G,EAAAA,EACAE,EAAAA,EAJFqG,EAAWpH,GAAOwH,YAAYM,aAC9BT,EAASrH,GAAO8H,aAChBR,EAAO,EACLzG,QAAAA,EAAAA,UAAAA,IAAAA,GAAkB,QAAlBA,EAAAA,EAAWhG,eAAXgG,IAAAA,OAAAA,EAAAA,EAAoB/E,UAAW,IAC/BiF,QAAAA,EAAAA,UAAAA,IAAAA,GAAkB,QAAlBA,EAAAA,EAAWlG,eAAXkG,IAAAA,OAAAA,EAAAA,EAAoBjF,UAAW,GAC/BgL,EAAcvE,SAASmF,WACvBX,EAAcxE,SAASmF,WACvBT,EAAWhJ,EAAAA,GAAMC,YAAYwJ,WAC7BT,EAAWhJ,EAAAA,GAAMG,YAAYsJ,WAC7BnH,GAAQzE,QACRkL,EAASW,eAEX7D,EAAQ,IACV,CAEAwB,IAAiB,SACX8B,KAAYE,EAAMxD,EAAQ,CAAEA,SAAU,CAAC,GAC1CiE,MAAMC,GACLX,KAAUC,EAAM,IACVxD,EAAQ,CAAEA,SAAU,CAAC,EACzBmE,UAAUC,EAAAA,EAAAA,GAAmBF,KAC5BD,MAAMI,I,IAMkBtK,EAECA,EAQhBzD,EAAsCA,EAfhDkL,IAAiB,GAEjB,MAAM8C,EAAmC,CACvCC,KAAMC,EAAAA,EAAgBC,sBACtBC,gBAAgBC,EAAAA,GAAAA,GAAW5H,IAC3B6H,uBAAsD,QAA/B7K,EAAAA,GAAcI,EAAAA,GAAMC,mBAApBL,IAAAA,OAAAA,EAAAA,EAAiC0E,SAASmF,aAAc,IAC/EiB,iBAAiBF,EAAAA,GAAAA,GAAW1H,IAC5B6H,wBAAuD,QAA/B/K,EAAAA,GAAcI,EAAAA,GAAMG,mBAApBP,IAAAA,OAAAA,EAAAA,EAAiC0E,SAASmF,aAAc,KAGlFhB,GAAeyB,EAAUC,GAEzBxC,GAAUuC,EAASU,OAEnBC,EAAAA,EAAAA,IAAmBC,EAAAA,GAAmBC,wBAAyB,CAC7DC,MAAO,CAA6B,QAA5B7O,EAAAA,GAAW6D,EAAAA,GAAMC,mBAAjB9D,IAAAA,OAAAA,EAAAA,EAA8B0C,OAAoC,QAA5B1C,EAAAA,GAAW6D,EAAAA,GAAMG,mBAAjBhE,IAAAA,OAAAA,EAAAA,EAA8B0C,QAAQoM,KAAK,QACtFvI,MACAyH,GACH,MAGLe,OAAOjK,I,IAGFA,EAFJoG,IAAiB,GAEG,QAAhBpG,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAOkK,OACT9E,QAAQpF,MAAMA,EAChB,GAEN,EAnFenB,G,gLAAAA,GAAAA,MAAAA,KAAAA,U,CAqFf,MAAMsL,GAAc,K,IAOLjP,EAA6CA,EAS7C0H,EAMA1H,EAA6CA,EArB1D,OACE,SAAC0F,GAAAA,C,SACEnC,IACC,SAAC2L,EAAAA,GAASA,CAACC,GAAG,OAAOC,cAAc,O,UACjC,UAAC9M,EAAAA,GAAOA,CAAC0C,QAAQ,gB,WACf,SAACrF,EAAAA,GAAIA,CAAC+E,SAAU,GAAI7C,WAAW,UAAUwN,WAAY,GAAIC,GAAI,G,UAC9B,QAA5BtP,EAAAA,GAAW6D,EAAAA,GAAMC,mBAAjB9D,IAAAA,OAAAA,EAAAA,EAA8B0C,QAAS,KAAkC,QAA5B1C,EAAAA,GAAW6D,EAAAA,GAAMG,mBAAjBhE,IAAAA,OAAAA,EAAAA,EAA8B0C,WAE9E,SAAC6M,EAAAA,GAAkBA,CAACvP,WAAY,CAACA,GAAW6D,EAAAA,GAAMC,YAAa9D,GAAW6D,EAAAA,GAAMG,aAAcvB,KAAM,WAIxG,sB,WACE,UAAC+M,EAAAA,GAAOA,CAACtL,MAAO,CAAEuL,UAAW,Q,WAC3B,SAAC9P,EAAAA,GAAIA,CAAC+E,SAAU,GAAI7C,WAAW,UAAUwN,WAAY,GAAIC,GAAI,G,SAC1D5H,QAAAA,EAAAA,UAAAA,IAAAA,OAAAA,EAAAA,EAAiBtD,cAAc,MAElC,SAACmL,EAAAA,GAAkBA,CAACvP,WAAY,CAACA,GAAW6D,EAAAA,GAAMC,YAAa9D,GAAW6D,EAAAA,GAAMG,aAAcvB,KAAM,SAEtG,SAACiN,EAAAA,GAAGA,C,UACF,SAAC/P,EAAAA,GAAIA,CAAC+E,SAAU,G,UACe,QAA5B1E,EAAAA,GAAW6D,EAAAA,GAAMC,mBAAjB9D,IAAAA,OAAAA,EAAAA,EAA8B0C,QAAS,KAAkC,QAA5B1C,EAAAA,GAAW6D,EAAAA,GAAMG,mBAAjBhE,IAAAA,OAAAA,EAAAA,EAA8B0C,QAAS,oBAGzF,SAAC/C,EAAAA,GAAIA,CAAC+E,SAAU,GAAIiL,UAAU,OAAOzK,GAAI,EAAG0K,UAAU,SAAS9N,MAAM,Y,UACnE,UAACV,EAAAA,GAAKA,C,UAAC,0DACmD,CAAEyO,QAASxE,GAAgBjH,cAAc,IAAK,2C,EAU9G0L,GAAc,KAEhB,SAACxM,GAAqBA,CACpBE,MAAOA,GACPxD,WAAYA,GACZyD,cAAeA,GACfF,YAAaA,GACbI,MAAOA,GACPD,oBAAqBA,KAKrBqM,IACJ,UAAC3O,EAAAA,GAAKA,C,UAAC,aACM,CAAE4O,KAAqC,QAA/BvM,EAAAA,GAAcI,EAAAA,GAAMC,mBAApBL,IAAAA,OAAAA,EAAAA,EAAiCW,cAAc,IAAM,IACvE,CAAEgB,KAAkC,QAA5BpF,GAAAA,GAAW6D,EAAAA,GAAMC,mBAAjB9D,IAAAA,QAAAA,EAAAA,GAA8B0C,QAAS,QAAM,CAAEuN,KAAqC,QAA/BxM,GAAAA,GAAcI,EAAAA,GAAMG,mBAApBP,IAAAA,QAAAA,EAAAA,GAAiCW,cAAc,IAAM,IAClH,CAAEe,KAAkC,QAA5BnF,GAAAA,GAAW6D,EAAAA,GAAMG,mBAAjBhE,IAAAA,QAAAA,EAAAA,GAA8B0C,WAIrCwN,IAAwBxF,EAAAA,EAAAA,cAC3BjE,IACC,MAAM0J,GAAiB9B,EAAAA,GAAAA,GAAW5H,GAEhCR,GADEkK,IAAmBpK,GACZ,WAAWA,MAAeD,KAE1B,WAAWqK,KAAkBpK,KACxC,GAEF,CAACA,GAAaE,GAAUH,KAEpBsK,IAAwB1F,EAAAA,EAAAA,cAC3B/D,IACC,MAAM0J,GAAiBhC,EAAAA,GAAAA,GAAW1H,GAG9BV,GAFAH,KAAgBuK,EACdtK,GACO,WAAWA,MAAesK,IAE1B,WAAWA,IAGb,WAAWvK,IAA4B,SAASuK,IAC3D,GAEF,CAACvK,GAAaG,GAAUF,KAGpBuK,IAA4B5F,EAAAA,EAAAA,cAAY,KAC5CM,IAAe,GAEXO,IACFjB,GAAc,IAEhBkB,GAAU,MACT,CAAClB,GAAeiB,MAEb,SAAEgF,KAAaC,EAAAA,EAAAA,MACfC,GAAWF,GAASG,SAAS,WAE7BC,IAAmBC,EAAAA,EAAAA,GAAqB5Q,QAAAA,GAAAA,UAAAA,IAAAA,QAAAA,EAAAA,GAAY8D,WAAY9D,QAAAA,GAAAA,UAAAA,IAAAA,QAAAA,EAAAA,GAAYgE,YAElF,OAAKwI,IAGH,sB,WACE,UAACqE,GAAAA,EAAOA,C,WACN,SAACC,EAAAA,EAAaA,CAACC,SAAUN,GAAUO,QAAQ,EAAMC,aAAczL,MAC/D,UAAC0L,GAAAA,GAAOA,C,WACN,SAACC,EAAAA,EAA4BA,CAC3BxQ,OAAQoK,GACRnK,UAAW0P,GACXrF,cAAeA,GACfwD,KAAMlD,GACN6F,cAAe,KACb,SAACC,EAAAA,EAAwBA,CACvBC,MAAO/N,IAAc,SAACnC,EAAAA,GAAKA,C,SAAC,6BAAkC,SAACA,EAAAA,GAAKA,C,SAAC,qBACrER,UAAW0P,GACXiB,WAAYtC,GACZuC,cAAe1B,KAGnBC,YAAaA,GACb0B,cAAe5L,QAAAA,GAAAA,UAAAA,IAAAA,QAAAA,EAAAA,GAAMmC,kBAEvB,UAACjH,EAAAA,GAAUA,CAACC,IAAI,O,UACbuC,KACEkN,IACC,SAACiB,EAAAA,GAAYA,C,UACX,SAACC,EAAAA,GAAQA,C,UACP,UAAC5Q,EAAAA,GAAUA,CAACC,IAAI,O,WACd,SAACE,EAAAA,GAAW0Q,eAAc,CAAC/P,WAAY,IAAKC,MAAM,U,UAChD,SAACV,EAAAA,GAAKA,C,SAAC,6CAET,SAACF,EAAAA,GAAW0Q,eAAc,CAAC/P,WAAY,IAAKC,MAAM,U,UAChD,SAACV,EAAAA,GAAKA,C,SAAC,oEAET,SAACF,EAAAA,GAAW0Q,eAAc,CAAC/P,WAAY,IAAKC,MAAM,U,UAChD,SAACV,EAAAA,GAAKA,C,SAAC,uEAMf,SAACsQ,EAAAA,GAAYA,C,UACX,SAACC,EAAAA,GAAQA,C,UACP,SAAC5Q,EAAAA,GAAUA,CAACC,IAAI,O,UACd,UAACE,EAAAA,GAAW0Q,eAAc,CAAC/P,WAAY,IAAKC,MAAM,U,WAChD,SAAC+P,IAAAA,C,UACC,SAACzQ,EAAAA,GAAKA,C,SAAC,WACJ,KACL,SAACA,EAAAA,GAAKA,C,SAAC,8MAUnB,SAAC0Q,EAAAA,EAAkBA,CACjBpI,MAAO+B,GAAiB5H,EAAAA,GAAMC,YAC9BiO,YAAazH,GACb0H,MAAO,K,IACStG,EAAdpB,IAA0C,QAA5BoB,EAAAA,GAAW7H,EAAAA,GAAMC,mBAAjB4H,IAAAA,OAAAA,EAAAA,EAA8BuG,YAAa,KAE3DC,iBAAkBhC,GAClBiC,eAAgBrG,GAAajI,EAAAA,GAAMC,YACnCtD,SAAUR,GAAW6D,EAAAA,GAAMC,aAAe,KAC1CsO,GAAG,gCAEL,SAACV,EAAAA,GAAYA,C,UACX,SAACW,EAAAA,EAAIA,CAAC5P,KAAK,KAAKX,MAAO5C,GAAMC,cAE/B,SAAC2S,EAAAA,EAAkBA,CACjBpI,MAAO+B,GAAiB5H,EAAAA,GAAMG,YAC9B+N,YAAaxH,GACb2H,iBAAkB9B,GAClB4B,MAAO,K,IACStG,EAAdnB,IAA0C,QAA5BmB,EAAAA,GAAW7H,EAAAA,GAAMG,mBAAjB0H,IAAAA,OAAAA,EAAAA,EAA8BuG,YAAa,KAE3DE,eAAgBrG,GAAajI,EAAAA,GAAMG,YACnCxD,SAAUR,GAAW6D,EAAAA,GAAMG,aAAe,KAC1CoO,GAAG,+BAEJpS,GAAW6D,EAAAA,GAAMC,aAAe9D,GAAW6D,EAAAA,GAAMG,aAAewD,KAAcS,EAAAA,GAAUmC,UACvF,qB,UACE,UAAC8E,EAAAA,GAASA,CAACpO,QAAQ,MAAMsO,cAAc,O,WACrC,SAACnO,EAAAA,GAAUA,CAACH,QAAQ,O,UAClB,SAACI,EAAAA,GAAWoR,oBAAmB,CAACzQ,WAAY,IAAK6C,SAAU,G,SACxDnB,IACC,SAACnC,EAAAA,GAAKA,C,SAAC,mCAEP,SAACA,EAAAA,GAAKA,C,SAAC,8BAGC,KACd,SAAC8N,EAAAA,GAASA,CAACpO,QAAQ,OAAOsO,cAAc,O,UACtC,SAACzK,GAAYA,CACX3E,WAAYA,GACZ0D,oBAAqBA,GACrBH,YAAaA,GACbC,MAAOA,YAOhBmN,IACC,SAACnM,EAAAA,GAAaA,CAAC+N,UAAU,E,UACvB,SAACrR,EAAAA,GAAWsR,eAAc,CAACC,GAAG,M,UAC5B,SAACrR,EAAAA,GAAKA,C,SAAC,0BAGU,cAAnB+E,GAAQU,QACV,SAAC6L,EAAAA,GAAUA,CACTC,OAAQ,CAACC,EAAAA,GAAatR,SACtBuR,KAAMC,EAAAA,GAAmBC,8BACzBC,WAAY,CAAEC,qBAAqB,GACnCC,QAASC,EAAAA,GAAqBC,sB,UAE9B,SAACC,EAAAA,GAAWA,CAAC/R,QAAS4F,G,UACpB,SAAC9F,EAAAA,GAAKA,C,SAAC,wBAIX,UAACL,EAAAA,GAAUA,CAACC,IAAI,K,WACZiL,KAAcqH,EAAAA,EAAcC,cAC5BtH,KAAcqH,EAAAA,EAAcE,SAC5BpH,KAAckH,EAAAA,EAAcC,cAC5BnH,KAAckH,EAAAA,EAAcE,UAC5B1I,KACE,UAAC7J,EAAAA,GAAUA,C,UACRgL,KAAcqH,EAAAA,EAAcG,WAC3B,SAACjP,EAAAA,GAAaA,CACZlD,QAAS4K,GACTqG,SAAUtG,KAAcqH,EAAAA,EAAcE,QACtCE,MAAOtH,KAAckH,EAAAA,EAAcG,SAAW,MAAQ,O,SAErDxH,KAAcqH,EAAAA,EAAcE,SAC3B,SAACG,GAAAA,GAAIA,C,UACH,UAACvS,EAAAA,GAAKA,C,UAAC,aAAW,CAAEwS,IAAiC,QAA5B5T,GAAAA,GAAW6D,EAAAA,GAAMC,mBAAjB9D,IAAAA,QAAAA,EAAAA,GAA8B0C,cAGzD,UAACtB,EAAAA,GAAKA,C,UAAC,WAAS,CAAEwS,IAAiC,QAA5B5T,GAAAA,GAAW6D,EAAAA,GAAMC,mBAAjB9D,IAAAA,QAAAA,EAAAA,GAA8B0C,aAI1D0J,KAAckH,EAAAA,EAAcG,WAC3B,SAACjP,EAAAA,GAAaA,CACZlD,QAAS+K,GACTkG,SAAUnG,KAAckH,EAAAA,EAAcE,QACtCE,MAAOzH,KAAcqH,EAAAA,EAAcG,SAAW,MAAQ,O,SAErDrH,KAAckH,EAAAA,EAAcE,SAC3B,SAACG,GAAAA,GAAIA,C,UACH,UAACvS,EAAAA,GAAKA,C,UAAC,aAAW,CAAEwS,IAAiC,QAA5B5T,GAAAA,GAAW6D,EAAAA,GAAMG,mBAAjBhE,IAAAA,QAAAA,EAAAA,GAA8B0C,cAGzD,UAACtB,EAAAA,GAAKA,C,UAAC,WAAS,CAAEwS,IAAiC,QAA5B5T,GAAAA,GAAW6D,EAAAA,GAAMG,mBAAjBhE,IAAAA,QAAAA,EAAAA,GAA8B0C,iBAMjE,SAACmR,EAAAA,GAAWA,CACVvS,QAAS,KACP0J,IAAe,EAAK,EAEtBuH,UAAWzH,IAAWmB,KAAcqH,EAAAA,EAAcG,UAAYrH,KAAckH,EAAAA,EAAcG,SAC1F3O,OAAQgG,MAAarH,GAAcI,EAAAA,GAAMC,eAAiBL,GAAcI,EAAAA,GAAMG,Y,UAE9E,SAACrE,EAAAA,GAAIA,CAAC+E,SAAU,GAAI7C,WAAW,U,SAC5BiD,KAAS,SAAC1D,EAAAA,GAAKA,C,SAAC,4BAQ/B,SAAC0S,EAAAA,EAAgBA,CAAAA,GAEfnD,IAOA,SAAC5Q,EAAAA,EAAyBA,CACxBR,KAAMoR,GACN3Q,WAAY,CAACA,GAAW8D,WAAY9D,GAAWgE,cARjD6B,KAAStC,IAAeiE,KAAcS,EAAAA,GAAUmC,SAC9C,SAACrJ,EAAAA,GAAUA,CAACmD,MAAO,CAAE6P,SAAU,QAASL,MAAO,OAAQM,SAAU,QAASvE,UAAW,Q,UACnF,SAACwE,EAAAA,GAAmBA,CAACC,cAAenN,GAAmBlB,KAAMA,OAE7D,SA5LqB,SAACsO,EAAAA,EAAaA,CAAAA,EAqM/C,CC1gBe,SAASC,KACtB,MAAM,YAAEtO,EAAW,YAAEC,IAAgBC,EAAAA,EAAAA,MAErC,OAAIF,GAAeC,GAAeD,EAAYuO,gBAAkBtO,EAAYsO,eACnE,SAACC,EAAAA,GAAQA,CAACC,GAAI,WAAWzO,IAAe0O,SAAO,KAGjD,SAACC,GAAcA,CAAAA,EACxB,C","sources":["components/swap/UnsupportedCurrencyFooter.tsx","state/mint/hooks.tsx","pages/AddLiquidityV2/ConfirmAddModalBottom.tsx","pages/AddLiquidityV2/PoolPriceBar.tsx","pages/AddLiquidityV2/index.tsx","pages/AddLiquidityV2/redirects.tsx"],"sourcesContent":["import { ChainId, Currency, Token } from '@uniswap/sdk-core'\r\nimport { ButtonEmpty } from 'components/Button'\r\nimport Card, { OutlineCard } from 'components/Card'\r\nimport { AutoColumn } from 'components/Column'\r\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\r\nimport Modal from 'components/Modal'\r\nimport { AutoRow, RowBetween } from 'components/Row'\r\nimport { useCurrencyInfo } from 'hooks/Tokens'\r\nimport { Trans } from 'i18n'\r\nimport { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { CloseIcon, ExternalLink, ThemedText } from 'theme/components'\r\nimport { Z_INDEX } from 'theme/zIndex'\r\nimport { Text } from 'ui/src'\r\nimport { SafetyLevel } from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\r\nimport { useChainId } from 'wagmi'\r\n\r\nimport { ExplorerDataType, getExplorerLink } from '../../utils/getExplorerLink'\r\n\r\nconst DetailsFooter = styled.div<{ show: boolean }>`\r\n  padding-top: calc(16px + 2rem);\r\n  padding-bottom: 20px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: -2rem;\r\n  width: 100%;\r\n  max-width: 400px;\r\n  border-bottom-left-radius: 20px;\r\n  border-bottom-right-radius: 20px;\r\n  color: ${({ theme }) => theme.neutral2};\r\n  background-color: ${({ theme }) => theme.surface2};\r\n  z-index: ${Z_INDEX.deprecated_zero};\r\n\r\n  transform: ${({ show }) => (show ? 'translateY(0%)' : 'translateY(-100%)')};\r\n  transition: transform 300ms ease-in-out;\r\n  text-align: center;\r\n`\r\n\r\nconst StyledButtonEmpty = styled(ButtonEmpty)`\r\n  text-decoration: none;\r\n`\r\n\r\nconst AddressText = styled(Text)`\r\n  color: ${({ theme }) => theme.accent1};\r\n  font-size: 12px;\r\n\r\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\r\n    font-size: 10px;\r\n`}\r\n`\r\n\r\nexport default function UnsupportedCurrencyFooter({\r\n  show,\r\n  currencies,\r\n}: {\r\n  show: boolean\r\n  currencies: (Currency | undefined | null)[]\r\n}) {\r\n  const chainId = useChainId()\r\n  const [showDetails, setShowDetails] = useState(false)\r\n\r\n  const tokens =\r\n    chainId && currencies\r\n      ? currencies.map((currency) => {\r\n          return currency?.wrapped\r\n        })\r\n      : []\r\n\r\n  return (\r\n    <DetailsFooter show={show}>\r\n      <Modal isOpen={showDetails} onDismiss={() => setShowDetails(false)}>\r\n        <Card padding=\"2rem\">\r\n          <AutoColumn gap=\"lg\">\r\n            <RowBetween>\r\n              <ThemedText.DeprecatedMediumHeader>\r\n                <Trans>Unsupported assets</Trans>\r\n              </ThemedText.DeprecatedMediumHeader>\r\n              <CloseIcon onClick={() => setShowDetails(false)} data-testid=\"close-icon\" />\r\n            </RowBetween>\r\n            {tokens.map((token) => {\r\n              return (\r\n                <UnsupportedTokenCard key={token?.address?.concat('not-supported')} token={token} chainId={chainId} />\r\n              )\r\n            })}\r\n            <AutoColumn gap=\"lg\">\r\n              <ThemedText.DeprecatedBody fontWeight={535}>\r\n                <Trans>\r\n                  Some assets are not available through this interface because they may not work well with the smart\r\n                  contracts or we are unable to allow trading for legal reasons.\r\n                </Trans>\r\n              </ThemedText.DeprecatedBody>\r\n            </AutoColumn>\r\n          </AutoColumn>\r\n        </Card>\r\n      </Modal>\r\n      <StyledButtonEmpty padding=\"0\" onClick={() => setShowDetails(true)} data-testid=\"read-more-button\">\r\n        <Text color=\"$accent1\">\r\n          <Trans>Read more about unsupported assets</Trans>\r\n        </Text>\r\n      </StyledButtonEmpty>\r\n    </DetailsFooter>\r\n  )\r\n}\r\n\r\nfunction UnsupportedTokenCard({ token, chainId }: { token?: Token; chainId?: ChainId }) {\r\n  const currencyInfo = useCurrencyInfo(token)\r\n\r\n  if (!token || (!currencyInfo?.isSpam && currencyInfo?.safetyLevel === SafetyLevel.Verified)) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <OutlineCard key={token?.address?.concat('not-supported')} data-testid=\"unsupported-token-card\">\r\n      <AutoColumn gap=\"10px\">\r\n        <AutoRow gap=\"5px\" align=\"center\">\r\n          <CurrencyLogo currency={token} size={24} />\r\n          <ThemedText.DeprecatedBody fontWeight={535}>{token.symbol}</ThemedText.DeprecatedBody>\r\n        </AutoRow>\r\n        {chainId && (\r\n          <ExternalLink href={getExplorerLink(chainId, token.address, ExplorerDataType.ADDRESS)}>\r\n            <AddressText>{token.address}</AddressText>\r\n          </ExternalLink>\r\n        )}\r\n      </AutoColumn>\r\n    </OutlineCard>\r\n  )\r\n}\r\n","import { Currency, CurrencyAmount, Percent, Price, Token } from '@uniswap/sdk-core'\r\nimport { Pair } from '@uniswap/v2-sdk'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Trans } from 'i18n'\r\nimport JSBI from 'jsbi'\r\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\r\nimport { ReactNode, useCallback, useMemo } from 'react'\r\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\r\n\r\nimport { useTotalSupply } from '../../hooks/useTotalSupply'\r\nimport { PairState, useV2Pair } from '../../hooks/useV2Pairs'\r\nimport { useCurrencyBalances } from '../connection/hooks'\r\nimport { AppState } from '../reducer'\r\nimport { Field, typeInput } from './actions'\r\n\r\nconst ZERO = JSBI.BigInt(0)\r\n\r\nexport function useMintState(): AppState['mint'] {\r\n  return useAppSelector((state) => state.mint)\r\n}\r\n\r\nexport function useMintActionHandlers(noLiquidity: boolean | undefined): {\r\n  onFieldAInput: (typedValue: string) => void\r\n  onFieldBInput: (typedValue: string) => void\r\n} {\r\n  const dispatch = useAppDispatch()\r\n\r\n  const onFieldAInput = useCallback(\r\n    (typedValue: string) => {\r\n      dispatch(typeInput({ field: Field.CURRENCY_A, typedValue, noLiquidity: noLiquidity === true }))\r\n    },\r\n    [dispatch, noLiquidity]\r\n  )\r\n\r\n  const onFieldBInput = useCallback(\r\n    (typedValue: string) => {\r\n      dispatch(typeInput({ field: Field.CURRENCY_B, typedValue, noLiquidity: noLiquidity === true }))\r\n    },\r\n    [dispatch, noLiquidity]\r\n  )\r\n\r\n  return {\r\n    onFieldAInput,\r\n    onFieldBInput,\r\n  }\r\n}\r\n\r\nexport function useDerivedMintInfo(\r\n  currencyA: Currency | undefined,\r\n  currencyB: Currency | undefined\r\n): {\r\n  dependentField: Field\r\n  currencies: { [field in Field]?: Currency }\r\n  pair?: Pair | null\r\n  pairState: PairState\r\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\r\n  parsedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\r\n  price?: Price<Currency, Currency>\r\n  noLiquidity?: boolean\r\n  liquidityMinted?: CurrencyAmount<Token>\r\n  poolTokenPercentage?: Percent\r\n  error?: ReactNode\r\n} {\r\n  const { account } = useWeb3React()\r\n\r\n  const { independentField, typedValue, otherTypedValue } = useMintState()\r\n\r\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\r\n\r\n  // tokens\r\n  const currencies: { [field in Field]?: Currency } = useMemo(\r\n    () => ({\r\n      [Field.CURRENCY_A]: currencyA ?? undefined,\r\n      [Field.CURRENCY_B]: currencyB ?? undefined,\r\n    }),\r\n    [currencyA, currencyB]\r\n  )\r\n\r\n  // pair\r\n  const [pairState, pair] = useV2Pair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B])\r\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\r\n\r\n  const noLiquidity: boolean =\r\n    pairState === PairState.NOT_EXISTS ||\r\n    Boolean(totalSupply && JSBI.equal(totalSupply.quotient, ZERO)) ||\r\n    Boolean(\r\n      pairState === PairState.EXISTS &&\r\n        pair &&\r\n        JSBI.equal(pair.reserve0.quotient, ZERO) &&\r\n        JSBI.equal(pair.reserve1.quotient, ZERO)\r\n    )\r\n\r\n  // balances\r\n  const balances = useCurrencyBalances(\r\n    account ?? undefined,\r\n    useMemo(() => [currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B]], [currencies])\r\n  )\r\n  const currencyBalances: { [field in Field]?: CurrencyAmount<Currency> } = {\r\n    [Field.CURRENCY_A]: balances[0],\r\n    [Field.CURRENCY_B]: balances[1],\r\n  }\r\n\r\n  // amounts\r\n  const independentAmount: CurrencyAmount<Currency> | undefined = tryParseCurrencyAmount(\r\n    typedValue,\r\n    currencies[independentField]\r\n  )\r\n  const dependentAmount: CurrencyAmount<Currency> | undefined = useMemo(() => {\r\n    if (noLiquidity) {\r\n      if (otherTypedValue && currencies[dependentField]) {\r\n        return tryParseCurrencyAmount(otherTypedValue, currencies[dependentField])\r\n      }\r\n      return undefined\r\n    } else if (independentAmount) {\r\n      // we wrap the currencies just to get the price in terms of the other token\r\n      const wrappedIndependentAmount = independentAmount?.wrapped\r\n      const [tokenA, tokenB] = [currencyA?.wrapped, currencyB?.wrapped]\r\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\r\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA\r\n        const dependentTokenAmount =\r\n          dependentField === Field.CURRENCY_B\r\n            ? pair.priceOf(tokenA).quote(wrappedIndependentAmount)\r\n            : pair.priceOf(tokenB).quote(wrappedIndependentAmount)\r\n        return dependentCurrency?.isNative\r\n          ? CurrencyAmount.fromRawAmount(dependentCurrency, dependentTokenAmount.quotient)\r\n          : dependentTokenAmount\r\n      }\r\n      return undefined\r\n    } else {\r\n      return undefined\r\n    }\r\n  }, [noLiquidity, otherTypedValue, currencies, dependentField, independentAmount, currencyA, currencyB, pair])\r\n\r\n  const parsedAmounts: { [field in Field]: CurrencyAmount<Currency> | undefined } = useMemo(() => {\r\n    return {\r\n      [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\r\n      [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount,\r\n    }\r\n  }, [dependentAmount, independentAmount, independentField])\r\n\r\n  const price = useMemo(() => {\r\n    if (noLiquidity) {\r\n      const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\r\n      if (currencyAAmount?.greaterThan(0) && currencyBAmount?.greaterThan(0)) {\r\n        const value = currencyBAmount.divide(currencyAAmount)\r\n        return new Price(currencyAAmount.currency, currencyBAmount.currency, value.denominator, value.numerator)\r\n      }\r\n      return undefined\r\n    } else {\r\n      const wrappedCurrencyA = currencyA?.wrapped\r\n      return pair && wrappedCurrencyA ? pair.priceOf(wrappedCurrencyA) : undefined\r\n    }\r\n  }, [currencyA, noLiquidity, pair, parsedAmounts])\r\n\r\n  // liquidity minted\r\n  const liquidityMinted = useMemo(() => {\r\n    const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\r\n    const [tokenAmountA, tokenAmountB] = [currencyAAmount?.wrapped, currencyBAmount?.wrapped]\r\n    if (pair && totalSupply && tokenAmountA && tokenAmountB) {\r\n      try {\r\n        return pair.getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB)\r\n      } catch (error) {\r\n        console.error(error)\r\n        return undefined\r\n      }\r\n    } else {\r\n      return undefined\r\n    }\r\n  }, [parsedAmounts, pair, totalSupply])\r\n\r\n  const poolTokenPercentage = useMemo(() => {\r\n    if (liquidityMinted && totalSupply) {\r\n      return new Percent(liquidityMinted.quotient, totalSupply.add(liquidityMinted).quotient)\r\n    } else {\r\n      return undefined\r\n    }\r\n  }, [liquidityMinted, totalSupply])\r\n\r\n  let error: ReactNode | undefined\r\n  if (!account) {\r\n    error = <Trans>Connect wallet</Trans>\r\n  }\r\n\r\n  if (pairState === PairState.INVALID) {\r\n    error = error ?? <Trans>Invalid pair</Trans>\r\n  }\r\n\r\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\r\n    error = error ?? <Trans>Enter an amount</Trans>\r\n  }\r\n\r\n  const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\r\n\r\n  if (currencyAAmount && currencyBalances?.[Field.CURRENCY_A]?.lessThan(currencyAAmount)) {\r\n    error = <Trans>Insufficient {{ symbol: currencies[Field.CURRENCY_A]?.symbol }} balance</Trans>\r\n  }\r\n\r\n  if (currencyBAmount && currencyBalances?.[Field.CURRENCY_B]?.lessThan(currencyBAmount)) {\r\n    error = <Trans>Insufficient {{ symbol: currencies[Field.CURRENCY_B]?.symbol }} balance</Trans>\r\n  }\r\n\r\n  return {\r\n    dependentField,\r\n    currencies,\r\n    pair,\r\n    pairState,\r\n    currencyBalances,\r\n    parsedAmounts,\r\n    price,\r\n    noLiquidity,\r\n    liquidityMinted,\r\n    poolTokenPercentage,\r\n    error,\r\n  }\r\n}\r\n","import { Currency, CurrencyAmount, Fraction, Percent } from '@uniswap/sdk-core'\r\nimport { Trans } from 'i18n'\r\nimport { Text } from 'rebass'\r\nimport { ThemedText } from 'theme/components'\r\n\r\nimport { ButtonPrimary } from '../../components/Button'\r\nimport CurrencyLogo from '../../components/Logo/CurrencyLogo'\r\nimport { RowBetween, RowFixed } from '../../components/Row'\r\nimport { Field } from '../../state/mint/actions'\r\n\r\nexport function ConfirmAddModalBottom({\r\n  noLiquidity,\r\n  price,\r\n  currencies,\r\n  parsedAmounts,\r\n  poolTokenPercentage,\r\n  onAdd,\r\n}: {\r\n  noLiquidity?: boolean\r\n  price?: Fraction\r\n  currencies: { [field in Field]?: Currency }\r\n  parsedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\r\n  poolTokenPercentage?: Percent\r\n  onAdd: () => void\r\n}) {\r\n  const depositedAmtA = currencies[Field.CURRENCY_A]?.symbol\r\n  const depositedAmtB = currencies[Field.CURRENCY_B]?.symbol\r\n  return (\r\n    <>\r\n      <RowBetween>\r\n        <ThemedText.DeprecatedBody>\r\n          <Trans>{{ depositedAmtA }} Deposited</Trans>\r\n        </ThemedText.DeprecatedBody>\r\n        <RowFixed>\r\n          <CurrencyLogo currency={currencies[Field.CURRENCY_A]} style={{ marginRight: '8px' }} />\r\n          <ThemedText.DeprecatedBody>{parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}</ThemedText.DeprecatedBody>\r\n        </RowFixed>\r\n      </RowBetween>\r\n      <RowBetween>\r\n        <ThemedText.DeprecatedBody>\r\n          <Trans>{{ depositedAmtB }} Deposited</Trans>\r\n        </ThemedText.DeprecatedBody>\r\n        <RowFixed>\r\n          <CurrencyLogo currency={currencies[Field.CURRENCY_B]} style={{ marginRight: '8px' }} />\r\n          <ThemedText.DeprecatedBody>{parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}</ThemedText.DeprecatedBody>\r\n        </RowFixed>\r\n      </RowBetween>\r\n      <RowBetween>\r\n        <ThemedText.DeprecatedBody>\r\n          <Trans>Rates</Trans>\r\n        </ThemedText.DeprecatedBody>\r\n        <ThemedText.DeprecatedBody>\r\n          {`1 ${currencies[Field.CURRENCY_A]?.symbol} = ${price?.toSignificant(4)} ${\r\n            currencies[Field.CURRENCY_B]?.symbol\r\n          }`}\r\n        </ThemedText.DeprecatedBody>\r\n      </RowBetween>\r\n      <RowBetween style={{ justifyContent: 'flex-end' }}>\r\n        <ThemedText.DeprecatedBody>\r\n          {`1 ${currencies[Field.CURRENCY_B]?.symbol} = ${price?.invert().toSignificant(4)} ${\r\n            currencies[Field.CURRENCY_A]?.symbol\r\n          }`}\r\n        </ThemedText.DeprecatedBody>\r\n      </RowBetween>\r\n      <RowBetween>\r\n        <ThemedText.DeprecatedBody>\r\n          <Trans>Share of Pool:</Trans>\r\n        </ThemedText.DeprecatedBody>\r\n        <ThemedText.DeprecatedBody>\r\n          <Trans>{{ pct: noLiquidity ? '100' : poolTokenPercentage?.toSignificant(4) }}%</Trans>\r\n        </ThemedText.DeprecatedBody>\r\n      </RowBetween>\r\n      <ButtonPrimary style={{ margin: '20px 0 0 0' }} onClick={onAdd}>\r\n        <Text fontWeight={535} fontSize={20}>\r\n          {noLiquidity ? <Trans>Create pool & supply</Trans> : <Trans>Confirm supply</Trans>}\r\n        </Text>\r\n      </ButtonPrimary>\r\n    </>\r\n  )\r\n}\r\n","import { Currency, Percent, Price } from '@uniswap/sdk-core'\r\nimport { Trans } from 'i18n'\r\nimport { Text } from 'rebass'\r\nimport { useTheme } from 'styled-components'\r\nimport { ThemedText } from 'theme/components'\r\n\r\nimport { AutoColumn } from '../../components/Column'\r\nimport { AutoRow } from '../../components/Row'\r\nimport { ONE_BIPS } from '../../constants/misc'\r\nimport { Field } from '../../state/mint/actions'\r\n\r\nexport function PoolPriceBar({\r\n  currencies,\r\n  noLiquidity,\r\n  poolTokenPercentage,\r\n  price,\r\n}: {\r\n  currencies: { [field in Field]?: Currency }\r\n  noLiquidity?: boolean\r\n  poolTokenPercentage?: Percent\r\n  price?: Price<Currency, Currency>\r\n}) {\r\n  const theme = useTheme()\r\n\r\n  let invertedPrice: string | undefined\r\n  try {\r\n    invertedPrice = price?.invert()?.toSignificant(6)\r\n  } catch (error) {\r\n    invertedPrice = undefined\r\n  }\r\n\r\n  return (\r\n    <AutoColumn gap=\"md\">\r\n      <AutoRow justify=\"space-around\" gap=\"4px\">\r\n        <AutoColumn justify=\"center\">\r\n          <ThemedText.DeprecatedBlack data-testid=\"currency-b-price\">\r\n            {price?.toSignificant(6) ?? '-'}\r\n          </ThemedText.DeprecatedBlack>\r\n          <Text fontWeight={535} fontSize={14} color={theme.neutral2} pt={1}>\r\n            <Trans>\r\n              {{ symB: currencies[Field.CURRENCY_B]?.symbol }} per {{ symA: currencies[Field.CURRENCY_A]?.symbol }}\r\n            </Trans>\r\n          </Text>\r\n        </AutoColumn>\r\n        <AutoColumn justify=\"center\">\r\n          <ThemedText.DeprecatedBlack data-testid=\"currency-a-price\">{invertedPrice ?? '-'}</ThemedText.DeprecatedBlack>\r\n          <Text fontWeight={535} fontSize={14} color={theme.neutral2} pt={1}>\r\n            <Trans>\r\n              {{ symA: currencies[Field.CURRENCY_A]?.symbol }} per {{ symB: currencies[Field.CURRENCY_B]?.symbol }}\r\n            </Trans>\r\n          </Text>\r\n        </AutoColumn>\r\n        <AutoColumn justify=\"center\">\r\n          <ThemedText.DeprecatedBlack>\r\n            {noLiquidity && price\r\n              ? '100'\r\n              : (poolTokenPercentage?.lessThan(ONE_BIPS) ? '<0.01' : poolTokenPercentage?.toFixed(2)) ?? '0'}\r\n            %\r\n          </ThemedText.DeprecatedBlack>\r\n          <Text fontWeight={535} fontSize={14} color={theme.neutral2} pt={1}>\r\n            <Trans>Share of pool</Trans>\r\n          </Text>\r\n        </AutoColumn>\r\n      </AutoRow>\r\n    </AutoColumn>\r\n  )\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport type { TransactionResponse } from '@ethersproject/providers'\r\nimport { BrowserEvent, InterfaceElementName, InterfaceEventName, LiquidityEventName } from '@uniswap/analytics-events'\r\nimport { Currency, CurrencyAmount, Percent } from '@uniswap/sdk-core'\r\nimport { TraceEvent, sendAnalyticsEvent, useTrace } from 'analytics'\r\nimport { useToggleAccountDrawer } from 'components/AccountDrawer/MiniPortfolio/hooks'\r\nimport { SwitchLocaleLink } from 'components/SwitchLocaleLink'\r\nimport { V2Unsupported } from 'components/V2Unsupported'\r\nimport UnsupportedCurrencyFooter from 'components/swap/UnsupportedCurrencyFooter'\r\nimport { useNetworkSupportsV2 } from 'hooks/useNetworkSupportsV2'\r\nimport { Trans } from 'i18n'\r\nimport { useCallback, useState } from 'react'\r\nimport { Plus } from 'react-feather'\r\nimport { useLocation, useNavigate, useParams } from 'react-router-dom'\r\nimport styled, { useTheme } from 'styled-components'\r\nimport { ThemedText } from 'theme/components'\r\n\r\nimport { DoubleCurrencyLogo } from 'components/DoubleLogo'\r\nimport { useEthersSigner } from 'hooks/useEthersSigner'\r\nimport { Text } from 'ui/src'\r\nimport { useAccount } from 'wagmi'\r\nimport { ButtonError, ButtonLight, ButtonPrimary } from '../../components/Button'\r\nimport { BlueCard, LightCard } from '../../components/Card'\r\nimport { AutoColumn, ColumnCenter } from '../../components/Column'\r\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\r\nimport { AddRemoveTabs } from '../../components/NavigationTabs'\r\nimport { MinimalPositionCard } from '../../components/PositionCard'\r\nimport Row, { AutoRow, RowBetween, RowFlat } from '../../components/Row'\r\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\r\nimport { ZERO_PERCENT } from '../../constants/misc'\r\nimport { WRAPPED_NATIVE_CURRENCY } from '../../constants/tokens'\r\nimport { useCurrency } from '../../hooks/Tokens'\r\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\r\nimport { useV2RouterContract } from '../../hooks/useContract'\r\nimport { useIsSwapUnsupported } from '../../hooks/useIsSwapUnsupported'\r\nimport { useGetTransactionDeadline } from '../../hooks/useTransactionDeadline'\r\nimport { PairState } from '../../hooks/useV2Pairs'\r\nimport { Field } from '../../state/mint/actions'\r\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from '../../state/mint/hooks'\r\nimport { useTransactionAdder } from '../../state/transactions/hooks'\r\nimport { TransactionInfo, TransactionType } from '../../state/transactions/types'\r\nimport { useUserSlippageToleranceWithDefault } from '../../state/user/hooks'\r\nimport { calculateGasMargin } from '../../utils/calculateGasMargin'\r\nimport { calculateSlippageAmount } from '../../utils/calculateSlippageAmount'\r\nimport { currencyId } from '../../utils/currencyId'\r\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\r\nimport AppBody from '../AppBody'\r\nimport { Dots, Wrapper } from '../Pool/styled'\r\nimport { ConfirmAddModalBottom } from './ConfirmAddModalBottom'\r\nimport { PoolPriceBar } from './PoolPriceBar'\r\n\r\nconst DEFAULT_ADD_V2_SLIPPAGE_TOLERANCE = new Percent(50, 10_000)\r\n\r\nconst AddLiquidityHeaderContainer = styled(AutoColumn)`\r\n  gap: 20px;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nexport default function AddLiquidity() {\r\n  const { currencyIdA, currencyIdB } = useParams<{ currencyIdA?: string; currencyIdB?: string }>()\r\n  const navigate = useNavigate()\r\n  const account = useAccount()\r\n  const signer = useEthersSigner()\r\n\r\n  const theme = useTheme()\r\n  const trace = useTrace()\r\n\r\n  const currencyA = useCurrency(currencyIdA)\r\n  const currencyB = useCurrency(currencyIdB)\r\n\r\n  const wrappedNativeCurrency = account.status === 'connected' ? WRAPPED_NATIVE_CURRENCY[account.chainId] : undefined\r\n\r\n  const oneCurrencyIsWETH = Boolean(\r\n    account.chainId &&\r\n      wrappedNativeCurrency &&\r\n      ((currencyA && currencyA.equals(wrappedNativeCurrency)) || (currencyB && currencyB.equals(wrappedNativeCurrency)))\r\n  )\r\n\r\n  const toggleWalletDrawer = useToggleAccountDrawer() // toggle wallet when disconnected\r\n\r\n  // mint state\r\n  const { independentField, typedValue, otherTypedValue } = useMintState()\r\n  const {\r\n    dependentField,\r\n    currencies,\r\n    pair,\r\n    pairState,\r\n    currencyBalances,\r\n    parsedAmounts,\r\n    price,\r\n    noLiquidity,\r\n    liquidityMinted,\r\n    poolTokenPercentage,\r\n    error,\r\n  } = useDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined)\r\n\r\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity)\r\n\r\n  const isValid = !error\r\n\r\n  // modal and loading\r\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\r\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\r\n\r\n  // txn values\r\n  const getDeadline = useGetTransactionDeadline() // custom from users settings\r\n  const allowedSlippage = useUserSlippageToleranceWithDefault(DEFAULT_ADD_V2_SLIPPAGE_TOLERANCE) // custom from users\r\n  const [txHash, setTxHash] = useState<string>('')\r\n\r\n  // get formatted amounts\r\n  const formattedAmounts = {\r\n    [independentField]: typedValue,\r\n    [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\r\n  }\r\n\r\n  // get the max amounts user can add\r\n  const maxAmounts: { [field in Field]?: CurrencyAmount<Currency> } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\r\n    (accumulator, field) => {\r\n      return {\r\n        ...accumulator,\r\n        [field]: maxAmountSpend(currencyBalances[field]),\r\n      }\r\n    },\r\n    {}\r\n  )\r\n\r\n  const atMaxAmounts: { [field in Field]?: CurrencyAmount<Currency> } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\r\n    (accumulator, field) => {\r\n      return {\r\n        ...accumulator,\r\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0'),\r\n      }\r\n    },\r\n    {}\r\n  )\r\n\r\n  const router = useV2RouterContract()\r\n\r\n  // check whether the user has approved the router on the tokens\r\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], router?.address)\r\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], router?.address)\r\n\r\n  const addTransaction = useTransactionAdder()\r\n  const networkSupportsV2 = useNetworkSupportsV2()\r\n\r\n  async function onAdd() {\r\n    if (account.status !== 'connected' || !signer || !router || !networkSupportsV2) return\r\n\r\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\r\n    const deadline = await getDeadline()\r\n\r\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB || !deadline) {\r\n      return\r\n    }\r\n\r\n    const amountsMin = {\r\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? ZERO_PERCENT : allowedSlippage)[0],\r\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? ZERO_PERCENT : allowedSlippage)[0],\r\n    }\r\n\r\n    let estimate,\r\n      method: (...args: any) => Promise<TransactionResponse>,\r\n      args: Array<string | string[] | number>,\r\n      value: BigNumber | null\r\n    if (currencyA.isNative || currencyB.isNative) {\r\n      const tokenBIsETH = currencyB.isNative\r\n      estimate = router.estimateGas.addLiquidityETH\r\n      method = router.addLiquidityETH\r\n      args = [\r\n        (tokenBIsETH ? currencyA : currencyB)?.wrapped?.address ?? '', // token\r\n        (tokenBIsETH ? parsedAmountA : parsedAmountB).quotient.toString(), // token desired\r\n        amountsMin[tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\r\n        amountsMin[tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\r\n        account.address,\r\n        deadline.toHexString(),\r\n      ]\r\n      value = BigNumber.from((tokenBIsETH ? parsedAmountB : parsedAmountA).quotient.toString())\r\n    } else {\r\n      estimate = router.estimateGas.addLiquidity\r\n      method = router.addLiquidity\r\n      args = [\r\n        currencyA?.wrapped?.address ?? '',\r\n        currencyB?.wrapped?.address ?? '',\r\n        parsedAmountA.quotient.toString(),\r\n        parsedAmountB.quotient.toString(),\r\n        amountsMin[Field.CURRENCY_A].toString(),\r\n        amountsMin[Field.CURRENCY_B].toString(),\r\n        account.address,\r\n        deadline.toHexString(),\r\n      ]\r\n      value = null\r\n    }\r\n\r\n    setAttemptingTxn(true)\r\n    await estimate(...args, value ? { value } : {})\r\n      .then((estimatedGasLimit) =>\r\n        method(...args, {\r\n          ...(value ? { value } : {}),\r\n          gasLimit: calculateGasMargin(estimatedGasLimit),\r\n        }).then((response) => {\r\n          setAttemptingTxn(false)\r\n\r\n          const transactionInfo: TransactionInfo = {\r\n            type: TransactionType.ADD_LIQUIDITY_V2_POOL,\r\n            baseCurrencyId: currencyId(currencyA),\r\n            expectedAmountBaseRaw: parsedAmounts[Field.CURRENCY_A]?.quotient.toString() ?? '0',\r\n            quoteCurrencyId: currencyId(currencyB),\r\n            expectedAmountQuoteRaw: parsedAmounts[Field.CURRENCY_B]?.quotient.toString() ?? '0',\r\n          }\r\n\r\n          addTransaction(response, transactionInfo)\r\n\r\n          setTxHash(response.hash)\r\n\r\n          sendAnalyticsEvent(LiquidityEventName.ADD_LIQUIDITY_SUBMITTED, {\r\n            label: [currencies[Field.CURRENCY_A]?.symbol, currencies[Field.CURRENCY_B]?.symbol].join('/'),\r\n            ...trace,\r\n            ...transactionInfo,\r\n          })\r\n        })\r\n      )\r\n      .catch((error) => {\r\n        setAttemptingTxn(false)\r\n        // we only care if the error is something _other_ than the user rejected the tx\r\n        if (error?.code !== 4001) {\r\n          console.error(error)\r\n        }\r\n      })\r\n  }\r\n\r\n  const modalHeader = () => {\r\n    return (\r\n      <AddLiquidityHeaderContainer>\r\n        {noLiquidity ? (\r\n          <LightCard mt=\"20px\" $borderRadius=\"20px\">\r\n            <AutoRow justify=\"space-between\">\r\n              <Text fontSize={24} fontWeight=\"$medium\" lineHeight={42} mr={10}>\r\n                {currencies[Field.CURRENCY_A]?.symbol + '/' + currencies[Field.CURRENCY_B]?.symbol}\r\n              </Text>\r\n              <DoubleCurrencyLogo currencies={[currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B]]} size={30} />\r\n            </AutoRow>\r\n          </LightCard>\r\n        ) : (\r\n          <>\r\n            <RowFlat style={{ marginTop: '20px' }}>\r\n              <Text fontSize={48} fontWeight=\"$medium\" lineHeight={42} mr={10}>\r\n                {liquidityMinted?.toSignificant(6)}\r\n              </Text>\r\n              <DoubleCurrencyLogo currencies={[currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B]]} size={30} />\r\n            </RowFlat>\r\n            <Row>\r\n              <Text fontSize={24}>\r\n                {currencies[Field.CURRENCY_A]?.symbol + '/' + currencies[Field.CURRENCY_B]?.symbol + ' Pool Tokens'}\r\n              </Text>\r\n            </Row>\r\n            <Text fontSize={12} textAlign=\"left\" pt={8} fontStyle=\"italic\" color=\"$neutral2\">\r\n              <Trans>\r\n                Output is estimated. If the price changes by more than {{ allowed: allowedSlippage.toSignificant(4) }}%\r\n                your transaction will revert.\r\n              </Trans>\r\n            </Text>\r\n          </>\r\n        )}\r\n      </AddLiquidityHeaderContainer>\r\n    )\r\n  }\r\n\r\n  const modalBottom = () => {\r\n    return (\r\n      <ConfirmAddModalBottom\r\n        price={price}\r\n        currencies={currencies}\r\n        parsedAmounts={parsedAmounts}\r\n        noLiquidity={noLiquidity}\r\n        onAdd={onAdd}\r\n        poolTokenPercentage={poolTokenPercentage}\r\n      />\r\n    )\r\n  }\r\n\r\n  const pendingText = (\r\n    <Trans>\r\n      Supplying {{ amtA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) }}{' '}\r\n      {{ symA: currencies[Field.CURRENCY_A]?.symbol }} and {{ amtB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) }}{' '}\r\n      {{ symB: currencies[Field.CURRENCY_B]?.symbol }}\r\n    </Trans>\r\n  )\r\n\r\n  const handleCurrencyASelect = useCallback(\r\n    (currencyA: Currency) => {\r\n      const newCurrencyIdA = currencyId(currencyA)\r\n      if (newCurrencyIdA === currencyIdB) {\r\n        navigate(`/add/v2/${currencyIdB}/${currencyIdA}`)\r\n      } else {\r\n        navigate(`/add/v2/${newCurrencyIdA}/${currencyIdB}`)\r\n      }\r\n    },\r\n    [currencyIdB, navigate, currencyIdA]\r\n  )\r\n  const handleCurrencyBSelect = useCallback(\r\n    (currencyB: Currency) => {\r\n      const newCurrencyIdB = currencyId(currencyB)\r\n      if (currencyIdA === newCurrencyIdB) {\r\n        if (currencyIdB) {\r\n          navigate(`/add/v2/${currencyIdB}/${newCurrencyIdB}`)\r\n        } else {\r\n          navigate(`/add/v2/${newCurrencyIdB}`)\r\n        }\r\n      } else {\r\n        navigate(`/add/v2/${currencyIdA ? currencyIdA : 'ETH'}/${newCurrencyIdB}`)\r\n      }\r\n    },\r\n    [currencyIdA, navigate, currencyIdB]\r\n  )\r\n\r\n  const handleDismissConfirmation = useCallback(() => {\r\n    setShowConfirm(false)\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onFieldAInput('')\r\n    }\r\n    setTxHash('')\r\n  }, [onFieldAInput, txHash])\r\n\r\n  const { pathname } = useLocation()\r\n  const isCreate = pathname.includes('/create')\r\n\r\n  const addIsUnsupported = useIsSwapUnsupported(currencies?.CURRENCY_A, currencies?.CURRENCY_B)\r\n\r\n  if (!networkSupportsV2) return <V2Unsupported />\r\n\r\n  return (\r\n    <>\r\n      <AppBody>\r\n        <AddRemoveTabs creating={isCreate} adding={true} autoSlippage={DEFAULT_ADD_V2_SLIPPAGE_TOLERANCE} />\r\n        <Wrapper>\r\n          <TransactionConfirmationModal\r\n            isOpen={showConfirm}\r\n            onDismiss={handleDismissConfirmation}\r\n            attemptingTxn={attemptingTxn}\r\n            hash={txHash}\r\n            reviewContent={() => (\r\n              <ConfirmationModalContent\r\n                title={noLiquidity ? <Trans>You are creating a pool</Trans> : <Trans>You will receive</Trans>}\r\n                onDismiss={handleDismissConfirmation}\r\n                topContent={modalHeader}\r\n                bottomContent={modalBottom}\r\n              />\r\n            )}\r\n            pendingText={pendingText}\r\n            currencyToAdd={pair?.liquidityToken}\r\n          />\r\n          <AutoColumn gap=\"20px\">\r\n            {noLiquidity ||\r\n              (isCreate ? (\r\n                <ColumnCenter>\r\n                  <BlueCard>\r\n                    <AutoColumn gap=\"10px\">\r\n                      <ThemedText.DeprecatedLink fontWeight={535} color=\"accent1\">\r\n                        <Trans>You are the first liquidity provider.</Trans>\r\n                      </ThemedText.DeprecatedLink>\r\n                      <ThemedText.DeprecatedLink fontWeight={485} color=\"accent1\">\r\n                        <Trans>The ratio of tokens you add will set the price of this pool.</Trans>\r\n                      </ThemedText.DeprecatedLink>\r\n                      <ThemedText.DeprecatedLink fontWeight={485} color=\"accent1\">\r\n                        <Trans>Once you are happy with the rate click supply to review.</Trans>\r\n                      </ThemedText.DeprecatedLink>\r\n                    </AutoColumn>\r\n                  </BlueCard>\r\n                </ColumnCenter>\r\n              ) : (\r\n                <ColumnCenter>\r\n                  <BlueCard>\r\n                    <AutoColumn gap=\"10px\">\r\n                      <ThemedText.DeprecatedLink fontWeight={485} color=\"accent1\">\r\n                        <b>\r\n                          <Trans>Tip:</Trans>\r\n                        </b>{' '}\r\n                        <Trans>\r\n                          When you add liquidity, you will receive pool tokens representing your position. These tokens\r\n                          automatically earn fees proportional to your share of the pool, and can be redeemed at any\r\n                          time.\r\n                        </Trans>\r\n                      </ThemedText.DeprecatedLink>\r\n                    </AutoColumn>\r\n                  </BlueCard>\r\n                </ColumnCenter>\r\n              ))}\r\n            <CurrencyInputPanel\r\n              value={formattedAmounts[Field.CURRENCY_A]}\r\n              onUserInput={onFieldAInput}\r\n              onMax={() => {\r\n                onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\r\n              }}\r\n              onCurrencySelect={handleCurrencyASelect}\r\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\r\n              currency={currencies[Field.CURRENCY_A] ?? null}\r\n              id=\"add-liquidity-input-tokena\"\r\n            />\r\n            <ColumnCenter>\r\n              <Plus size=\"16\" color={theme.neutral2} />\r\n            </ColumnCenter>\r\n            <CurrencyInputPanel\r\n              value={formattedAmounts[Field.CURRENCY_B]}\r\n              onUserInput={onFieldBInput}\r\n              onCurrencySelect={handleCurrencyBSelect}\r\n              onMax={() => {\r\n                onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\r\n              }}\r\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\r\n              currency={currencies[Field.CURRENCY_B] ?? null}\r\n              id=\"add-liquidity-input-tokenb\"\r\n            />\r\n            {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\r\n              <>\r\n                <LightCard padding=\"0px\" $borderRadius=\"20px\">\r\n                  <RowBetween padding=\"1rem\">\r\n                    <ThemedText.DeprecatedSubHeader fontWeight={535} fontSize={14}>\r\n                      {noLiquidity ? (\r\n                        <Trans>Initial prices and pool share</Trans>\r\n                      ) : (\r\n                        <Trans>Prices and pool share</Trans>\r\n                      )}\r\n                    </ThemedText.DeprecatedSubHeader>\r\n                  </RowBetween>{' '}\r\n                  <LightCard padding=\"1rem\" $borderRadius=\"20px\">\r\n                    <PoolPriceBar\r\n                      currencies={currencies}\r\n                      poolTokenPercentage={poolTokenPercentage}\r\n                      noLiquidity={noLiquidity}\r\n                      price={price}\r\n                    />\r\n                  </LightCard>\r\n                </LightCard>\r\n              </>\r\n            )}\r\n\r\n            {addIsUnsupported ? (\r\n              <ButtonPrimary disabled={true}>\r\n                <ThemedText.DeprecatedMain mb=\"4px\">\r\n                  <Trans>Unsupported asset</Trans>\r\n                </ThemedText.DeprecatedMain>\r\n              </ButtonPrimary>\r\n            ) : account.status !== 'connected' ? (\r\n              <TraceEvent\r\n                events={[BrowserEvent.onClick]}\r\n                name={InterfaceEventName.CONNECT_WALLET_BUTTON_CLICKED}\r\n                properties={{ received_swap_quote: false }}\r\n                element={InterfaceElementName.CONNECT_WALLET_BUTTON}\r\n              >\r\n                <ButtonLight onClick={toggleWalletDrawer}>\r\n                  <Trans>Connect wallet</Trans>\r\n                </ButtonLight>\r\n              </TraceEvent>\r\n            ) : (\r\n              <AutoColumn gap=\"md\">\r\n                {(approvalA === ApprovalState.NOT_APPROVED ||\r\n                  approvalA === ApprovalState.PENDING ||\r\n                  approvalB === ApprovalState.NOT_APPROVED ||\r\n                  approvalB === ApprovalState.PENDING) &&\r\n                  isValid && (\r\n                    <RowBetween>\r\n                      {approvalA !== ApprovalState.APPROVED && (\r\n                        <ButtonPrimary\r\n                          onClick={approveACallback}\r\n                          disabled={approvalA === ApprovalState.PENDING}\r\n                          width={approvalB !== ApprovalState.APPROVED ? '48%' : '100%'}\r\n                        >\r\n                          {approvalA === ApprovalState.PENDING ? (\r\n                            <Dots>\r\n                              <Trans>Approving {{ sym: currencies[Field.CURRENCY_A]?.symbol }}</Trans>\r\n                            </Dots>\r\n                          ) : (\r\n                            <Trans>Approve {{ sym: currencies[Field.CURRENCY_A]?.symbol }}</Trans>\r\n                          )}\r\n                        </ButtonPrimary>\r\n                      )}\r\n                      {approvalB !== ApprovalState.APPROVED && (\r\n                        <ButtonPrimary\r\n                          onClick={approveBCallback}\r\n                          disabled={approvalB === ApprovalState.PENDING}\r\n                          width={approvalA !== ApprovalState.APPROVED ? '48%' : '100%'}\r\n                        >\r\n                          {approvalB === ApprovalState.PENDING ? (\r\n                            <Dots>\r\n                              <Trans>Approving {{ sym: currencies[Field.CURRENCY_B]?.symbol }}</Trans>\r\n                            </Dots>\r\n                          ) : (\r\n                            <Trans>Approve {{ sym: currencies[Field.CURRENCY_B]?.symbol }}</Trans>\r\n                          )}\r\n                        </ButtonPrimary>\r\n                      )}\r\n                    </RowBetween>\r\n                  )}\r\n                <ButtonError\r\n                  onClick={() => {\r\n                    setShowConfirm(true)\r\n                  }}\r\n                  disabled={!isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED}\r\n                  error={!isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]}\r\n                >\r\n                  <Text fontSize={20} fontWeight=\"$medium\">\r\n                    {error ?? <Trans>Supply</Trans>}\r\n                  </Text>\r\n                </ButtonError>\r\n              </AutoColumn>\r\n            )}\r\n          </AutoColumn>\r\n        </Wrapper>\r\n      </AppBody>\r\n      <SwitchLocaleLink />\r\n\r\n      {!addIsUnsupported ? (\r\n        pair && !noLiquidity && pairState !== PairState.INVALID ? (\r\n          <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\r\n            <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\r\n          </AutoColumn>\r\n        ) : null\r\n      ) : (\r\n        <UnsupportedCurrencyFooter\r\n          show={addIsUnsupported}\r\n          currencies={[currencies.CURRENCY_A, currencies.CURRENCY_B]}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import { Navigate, useParams } from 'react-router-dom'\r\n\r\nimport AddLiquidityV2 from './index'\r\n\r\nexport default function AddLiquidityV2WithTokenRedirects() {\r\n  const { currencyIdA, currencyIdB } = useParams<{ currencyIdA: string; currencyIdB: string }>()\r\n\r\n  if (currencyIdA && currencyIdB && currencyIdA.toLowerCase() === currencyIdB.toLowerCase()) {\r\n    return <Navigate to={`/add/v2/${currencyIdA}`} replace />\r\n  }\r\n\r\n  return <AddLiquidityV2 />\r\n}\r\n"],"names":["DetailsFooter","styled","div","theme","neutral2","surface2","Z_INDEX","deprecated_zero","show","StyledButtonEmpty","ButtonEmpty","AddressText","Text","accent1","deprecated_mediaWidth","deprecated_upToSmall","UnsupportedCurrencyFooter","currencies","chainId","useChainId","showDetails","setShowDetails","useState","tokens","map","currency","wrapped","Modal","isOpen","onDismiss","Card","padding","AutoColumn","gap","RowBetween","ThemedText","DeprecatedMediumHeader","Trans","CloseIcon","onClick","data-testid","token","UnsupportedTokenCard","address","concat","DeprecatedBody","fontWeight","color","currencyInfo","useCurrencyInfo","isSpam","safetyLevel","SafetyLevel","Verified","OutlineCard","AutoRow","align","CurrencyLogo","size","symbol","ExternalLink","href","getExplorerLink","ExplorerDataType","ADDRESS","ZERO","JSBI","useMintState","useAppSelector","state","mint","ConfirmAddModalBottom","noLiquidity","price","parsedAmounts","poolTokenPercentage","onAdd","depositedAmtA","Field","CURRENCY_A","depositedAmtB","CURRENCY_B","RowFixed","style","marginRight","toSignificant","justifyContent","invert","pct","ButtonPrimary","margin","fontSize","PoolPriceBar","useTheme","invertedPrice","error","undefined","justify","DeprecatedBlack","pt","symB","symA","lessThan","ONE_BIPS","toFixed","DEFAULT_ADD_V2_SLIPPAGE_TOLERANCE","Percent","AddLiquidityHeaderContainer","AddLiquidity","router","pair","currencyIdA","currencyIdB","useParams","navigate","useNavigate","account","useAccount","signer","useEthersSigner","trace","useTrace","currencyA","useCurrency","currencyB","wrappedNativeCurrency","status","WRAPPED_NATIVE_CURRENCY","oneCurrencyIsWETH","Boolean","equals","toggleWalletDrawer","useToggleAccountDrawer","independentField","typedValue","otherTypedValue","dependentField","pairState","currencyBalances","liquidityMinted","useWeb3React","useMemo","useV2Pair","totalSupply","useTotalSupply","liquidityToken","PairState","NOT_EXISTS","quotient","EXISTS","reserve0","reserve1","balances","useCurrencyBalances","independentAmount","tryParseCurrencyAmount","dependentAmount","wrappedIndependentAmount","tokenA","tokenB","dependentCurrency","dependentTokenAmount","priceOf","quote","isNative","CurrencyAmount","fromRawAmount","wrappedCurrencyA","currencyAAmount","currencyBAmount","greaterThan","value","divide","Price","denominator","numerator","tokenAmountA","tokenAmountB","getLiquidityMinted","console","add","INVALID","useDerivedMintInfo","onFieldAInput","onFieldBInput","dispatch","useAppDispatch","useCallback","typeInput","field","useMintActionHandlers","isValid","showConfirm","setShowConfirm","attemptingTxn","setAttemptingTxn","getDeadline","useGetTransactionDeadline","allowedSlippage","useUserSlippageToleranceWithDefault","txHash","setTxHash","formattedAmounts","maxAmounts","reduce","accumulator","maxAmountSpend","atMaxAmounts","equalTo","useV2RouterContract","approvalA","approveACallback","useApproveCallback","approvalB","approveBCallback","addTransaction","useTransactionAdder","networkSupportsV2","useNetworkSupportsV2","parsedAmountA","parsedAmountB","deadline","amountsMin","calculateSlippageAmount","ZERO_PERCENT","estimate","method","args","tokenBIsETH","estimateGas","addLiquidityETH","toString","toHexString","BigNumber","from","addLiquidity","then","estimatedGasLimit","gasLimit","calculateGasMargin","response","transactionInfo","type","TransactionType","ADD_LIQUIDITY_V2_POOL","baseCurrencyId","currencyId","expectedAmountBaseRaw","quoteCurrencyId","expectedAmountQuoteRaw","hash","sendAnalyticsEvent","LiquidityEventName","ADD_LIQUIDITY_SUBMITTED","label","join","catch","code","modalHeader","LightCard","mt","$borderRadius","lineHeight","mr","DoubleCurrencyLogo","RowFlat","marginTop","Row","textAlign","fontStyle","allowed","modalBottom","pendingText","amtA","amtB","handleCurrencyASelect","newCurrencyIdA","handleCurrencyBSelect","newCurrencyIdB","handleDismissConfirmation","pathname","useLocation","isCreate","includes","addIsUnsupported","useIsSwapUnsupported","AppBody","AddRemoveTabs","creating","adding","autoSlippage","Wrapper","TransactionConfirmationModal","reviewContent","ConfirmationModalContent","title","topContent","bottomContent","currencyToAdd","ColumnCenter","BlueCard","DeprecatedLink","b","CurrencyInputPanel","onUserInput","onMax","toExact","onCurrencySelect","showMaxButton","id","Plus","DeprecatedSubHeader","disabled","DeprecatedMain","mb","TraceEvent","events","BrowserEvent","name","InterfaceEventName","CONNECT_WALLET_BUTTON_CLICKED","properties","received_swap_quote","element","InterfaceElementName","CONNECT_WALLET_BUTTON","ButtonLight","ApprovalState","NOT_APPROVED","PENDING","APPROVED","width","Dots","sym","ButtonError","SwitchLocaleLink","minWidth","maxWidth","MinimalPositionCard","showUnwrapped","V2Unsupported","AddLiquidityV2WithTokenRedirects","toLowerCase","Navigate","to","replace","AddLiquidityV2"],"sourceRoot":""}