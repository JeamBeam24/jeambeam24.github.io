{"version":3,"file":"static/js/4075.c201958e.chunk.js","mappings":"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","sources":["components/PositionCard/index.tsx","components/V2Unsupported/index.tsx","components/earn/styled.tsx","hooks/useNetworkSupportsV2.ts","hooks/useTotalSupply.ts","hooks/useV2Pairs.ts","utils/unwrappedToken.ts"],"sourcesContent":["import { CurrencyAmount, Percent, Token } from '@uniswap/sdk-core'\r\nimport { Pair } from '@uniswap/v2-sdk'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Trans } from 'i18n'\r\nimport JSBI from 'jsbi'\r\nimport { transparentize } from 'polished'\r\nimport { useState } from 'react'\r\nimport { ChevronDown, ChevronUp } from 'react-feather'\r\nimport { Link } from 'react-router-dom'\r\nimport { Text } from 'rebass'\r\nimport styled from 'styled-components'\r\nimport { ExternalLink, ThemedText } from 'theme/components'\r\n\r\nimport { DoubleCurrencyLogo } from 'components/DoubleLogo'\r\nimport { BIG_INT_ZERO } from '../../constants/misc'\r\nimport { useColor } from '../../hooks/useColor'\r\nimport { useTotalSupply } from '../../hooks/useTotalSupply'\r\nimport { useTokenBalance } from '../../state/connection/hooks'\r\nimport { currencyId } from '../../utils/currencyId'\r\nimport { unwrappedToken } from '../../utils/unwrappedToken'\r\nimport { ButtonEmpty, ButtonPrimary, ButtonSecondary } from '../Button'\r\nimport { GrayCard, LightCard } from '../Card'\r\nimport { AutoColumn } from '../Column'\r\nimport CurrencyLogo from '../Logo/CurrencyLogo'\r\nimport { AutoRow, RowBetween, RowFixed } from '../Row'\r\nimport { CardNoise } from '../earn/styled'\r\nimport { Dots } from '../swap/styled'\r\n\r\nexport const FixedHeightRow = styled(RowBetween)`\r\n  height: 24px;\r\n`\r\n\r\nconst StyledPositionCard = styled(LightCard)<{ bgColor: any }>`\r\n  border: none;\r\n  background: ${({ theme, bgColor }) =>\r\n    `radial-gradient(91.85% 100% at 1.84% 0%, ${transparentize(0.8, bgColor)} 0%, ${theme.surface2} 100%) `};\r\n  position: relative;\r\n  overflow: hidden;\r\n`\r\n\r\ninterface PositionCardProps {\r\n  pair: Pair\r\n  showUnwrapped?: boolean\r\n  border?: string\r\n  stakedBalance?: CurrencyAmount<Token> // optional balance to indicate that liquidity is deposited in mining pool\r\n}\r\n\r\nexport function MinimalPositionCard({ pair, showUnwrapped = false, border }: PositionCardProps) {\r\n  const { account } = useWeb3React()\r\n\r\n  const currency0 = showUnwrapped ? pair.token0 : unwrappedToken(pair.token0)\r\n  const currency1 = showUnwrapped ? pair.token1 : unwrappedToken(pair.token1)\r\n\r\n  const [showMore, setShowMore] = useState(false)\r\n\r\n  const userPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\r\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\r\n\r\n  const poolTokenPercentage =\r\n    !!userPoolBalance &&\r\n    !!totalPoolTokens &&\r\n    JSBI.greaterThanOrEqual(totalPoolTokens.quotient, userPoolBalance.quotient)\r\n      ? new Percent(userPoolBalance.quotient, totalPoolTokens.quotient)\r\n      : undefined\r\n\r\n  const [token0Deposited, token1Deposited] =\r\n    !!pair &&\r\n    !!totalPoolTokens &&\r\n    !!userPoolBalance &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalPoolTokens.quotient, userPoolBalance.quotient)\r\n      ? [\r\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\r\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\r\n        ]\r\n      : [undefined, undefined]\r\n\r\n  return (\r\n    <>\r\n      {userPoolBalance && JSBI.greaterThan(userPoolBalance.quotient, JSBI.BigInt(0)) ? (\r\n        <GrayCard border={border}>\r\n          <AutoColumn gap=\"md\">\r\n            <FixedHeightRow>\r\n              <RowFixed>\r\n                <Text fontWeight={535} fontSize={16}>\r\n                  <Trans>Your position</Trans>\r\n                </Text>\r\n              </RowFixed>\r\n            </FixedHeightRow>\r\n            <FixedHeightRow onClick={() => setShowMore(!showMore)}>\r\n              <RowFixed>\r\n                <DoubleCurrencyLogo currencies={[currency0, currency1]} size={20} />\r\n                <Text fontWeight={535} fontSize={20}>\r\n                  {currency0.symbol}/{currency1.symbol}\r\n                </Text>\r\n              </RowFixed>\r\n              <RowFixed>\r\n                <Text fontWeight={535} fontSize={20}>\r\n                  {userPoolBalance ? userPoolBalance.toSignificant(4) : '-'}\r\n                </Text>\r\n              </RowFixed>\r\n            </FixedHeightRow>\r\n            <AutoColumn gap=\"4px\">\r\n              <FixedHeightRow>\r\n                <Text fontSize={16} fontWeight={535}>\r\n                  <Trans>Your pool share:</Trans>\r\n                </Text>\r\n                <Text fontSize={16} fontWeight={535}>\r\n                  {poolTokenPercentage ? poolTokenPercentage.toFixed(6) + '%' : '-'}\r\n                </Text>\r\n              </FixedHeightRow>\r\n              <FixedHeightRow>\r\n                <Text fontSize={16} fontWeight={535}>\r\n                  {currency0.symbol}:\r\n                </Text>\r\n                {token0Deposited ? (\r\n                  <RowFixed>\r\n                    <Text fontSize={16} fontWeight={535} marginLeft=\"6px\">\r\n                      {token0Deposited?.toSignificant(6)}\r\n                    </Text>\r\n                  </RowFixed>\r\n                ) : (\r\n                  '-'\r\n                )}\r\n              </FixedHeightRow>\r\n              <FixedHeightRow>\r\n                <Text fontSize={16} fontWeight={535}>\r\n                  {currency1.symbol}:\r\n                </Text>\r\n                {token1Deposited ? (\r\n                  <RowFixed>\r\n                    <Text fontSize={16} fontWeight={535} marginLeft=\"6px\">\r\n                      {token1Deposited?.toSignificant(6)}\r\n                    </Text>\r\n                  </RowFixed>\r\n                ) : (\r\n                  '-'\r\n                )}\r\n              </FixedHeightRow>\r\n            </AutoColumn>\r\n          </AutoColumn>\r\n        </GrayCard>\r\n      ) : (\r\n        <LightCard>\r\n          <ThemedText.DeprecatedSubHeader style={{ textAlign: 'center' }}>\r\n            <span role=\"img\" aria-label=\"wizard-icon\">\r\n              ⭐️\r\n            </span>{' '}\r\n            <Trans>\r\n              By adding liquidity you&apos;ll earn 0.3% of all trades on this pair proportional to your share of the\r\n              pool. Fees are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.\r\n            </Trans>{' '}\r\n          </ThemedText.DeprecatedSubHeader>\r\n        </LightCard>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default function FullPositionCard({ pair, border, stakedBalance }: PositionCardProps) {\r\n  const { account } = useWeb3React()\r\n\r\n  const currency0 = unwrappedToken(pair.token0)\r\n  const currency1 = unwrappedToken(pair.token1)\r\n\r\n  const [showMore, setShowMore] = useState(false)\r\n\r\n  const userDefaultPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\r\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\r\n\r\n  // if staked balance balance provided, add to standard liquidity amount\r\n  const userPoolBalance = stakedBalance ? userDefaultPoolBalance?.add(stakedBalance) : userDefaultPoolBalance\r\n\r\n  const poolTokenPercentage =\r\n    !!userPoolBalance &&\r\n    !!totalPoolTokens &&\r\n    JSBI.greaterThanOrEqual(totalPoolTokens.quotient, userPoolBalance.quotient)\r\n      ? new Percent(userPoolBalance.quotient, totalPoolTokens.quotient)\r\n      : undefined\r\n\r\n  const [token0Deposited, token1Deposited] =\r\n    !!pair &&\r\n    !!totalPoolTokens &&\r\n    !!userPoolBalance &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalPoolTokens.quotient, userPoolBalance.quotient)\r\n      ? [\r\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\r\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\r\n        ]\r\n      : [undefined, undefined]\r\n\r\n  const backgroundColor = useColor(pair?.token0)\r\n\r\n  return (\r\n    <StyledPositionCard border={border} bgColor={backgroundColor}>\r\n      <CardNoise />\r\n      <AutoColumn gap=\"md\">\r\n        <FixedHeightRow>\r\n          <AutoRow gap=\"8px\" style={{ marginLeft: '8px' }}>\r\n            <DoubleCurrencyLogo currencies={[currency0, currency1]} size={20} />\r\n            <Text fontWeight={535} fontSize={20}>\r\n              {!currency0 || !currency1 ? (\r\n                <Dots>\r\n                  <Trans>Loading</Trans>\r\n                </Dots>\r\n              ) : (\r\n                `${currency0.symbol}/${currency1.symbol}`\r\n              )}\r\n            </Text>\r\n          </AutoRow>\r\n          <RowFixed gap=\"8px\" style={{ marginRight: '4px' }}>\r\n            <ButtonEmpty padding=\"6px 8px\" $borderRadius=\"12px\" width=\"100%\" onClick={() => setShowMore(!showMore)}>\r\n              {showMore ? (\r\n                <>\r\n                  <Trans>Manage</Trans>\r\n                  <ChevronUp size=\"20\" style={{ marginLeft: '8px', height: '20px', minWidth: '20px' }} />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Trans>Manage</Trans>\r\n                  <ChevronDown size=\"20\" style={{ marginLeft: '8px', height: '20px', minWidth: '20px' }} />\r\n                </>\r\n              )}\r\n            </ButtonEmpty>\r\n          </RowFixed>\r\n        </FixedHeightRow>\r\n\r\n        {showMore && (\r\n          <AutoColumn gap=\"sm\">\r\n            <FixedHeightRow>\r\n              <Text fontSize={16} fontWeight={535}>\r\n                <Trans>Your total pool tokens:</Trans>\r\n              </Text>\r\n              <Text fontSize={16} fontWeight={535}>\r\n                {userPoolBalance ? userPoolBalance.toSignificant(4) : '-'}\r\n              </Text>\r\n            </FixedHeightRow>\r\n            {stakedBalance && (\r\n              <FixedHeightRow>\r\n                <Text fontSize={16} fontWeight={535}>\r\n                  <Trans>Pool tokens in rewards pool:</Trans>\r\n                </Text>\r\n                <Text fontSize={16} fontWeight={535}>\r\n                  {stakedBalance.toSignificant(4)}\r\n                </Text>\r\n              </FixedHeightRow>\r\n            )}\r\n            <FixedHeightRow>\r\n              <RowFixed>\r\n                <Text fontSize={16} fontWeight={535}>\r\n                  <Trans>Pooled {{ sym: currency0.symbol }}:</Trans>\r\n                </Text>\r\n              </RowFixed>\r\n              {token0Deposited ? (\r\n                <RowFixed>\r\n                  <Text fontSize={16} fontWeight={535} marginLeft=\"6px\">\r\n                    {token0Deposited?.toSignificant(6)}\r\n                  </Text>\r\n                  <CurrencyLogo size={20} style={{ marginLeft: '8px' }} currency={currency0} />\r\n                </RowFixed>\r\n              ) : (\r\n                '-'\r\n              )}\r\n            </FixedHeightRow>\r\n\r\n            <FixedHeightRow>\r\n              <RowFixed>\r\n                <Text fontSize={16} fontWeight={535}>\r\n                  <Trans>Pooled {{ sym: currency1.symbol }}:</Trans>\r\n                </Text>\r\n              </RowFixed>\r\n              {token1Deposited ? (\r\n                <RowFixed>\r\n                  <Text fontSize={16} fontWeight={535} marginLeft=\"6px\">\r\n                    {token1Deposited?.toSignificant(6)}\r\n                  </Text>\r\n                  <CurrencyLogo size={20} style={{ marginLeft: '8px' }} currency={currency1} />\r\n                </RowFixed>\r\n              ) : (\r\n                '-'\r\n              )}\r\n            </FixedHeightRow>\r\n\r\n            <FixedHeightRow>\r\n              <Text fontSize={16} fontWeight={535}>\r\n                <Trans>Your pool share:</Trans>\r\n              </Text>\r\n              <Text fontSize={16} fontWeight={535}>\r\n                {poolTokenPercentage ? (\r\n                  <Trans>\r\n                    {{ amt: poolTokenPercentage.toFixed(2) === '0.00' ? '<0.01' : poolTokenPercentage.toFixed(2) }}%\r\n                  </Trans>\r\n                ) : (\r\n                  '-'\r\n                )}\r\n              </Text>\r\n            </FixedHeightRow>\r\n\r\n            <ButtonSecondary padding=\"8px\" $borderRadius=\"8px\">\r\n              <ExternalLink\r\n                style={{ width: '100%', textAlign: 'center' }}\r\n                href={`https://v2.info.uniswap.org/account/${account}`}\r\n              >\r\n                <Trans>\r\n                  View accrued fees and analytics<span style={{ fontSize: '11px' }}>↗</span>\r\n                </Trans>\r\n              </ExternalLink>\r\n            </ButtonSecondary>\r\n            {userDefaultPoolBalance && JSBI.greaterThan(userDefaultPoolBalance.quotient, BIG_INT_ZERO) && (\r\n              <RowBetween marginTop=\"10px\">\r\n                <ButtonPrimary\r\n                  padding=\"8px\"\r\n                  $borderRadius=\"8px\"\r\n                  as={Link}\r\n                  to={`/migrate/v2/${pair.liquidityToken.address}`}\r\n                  width=\"32%\"\r\n                >\r\n                  <Trans>Migrate</Trans>\r\n                </ButtonPrimary>\r\n                <ButtonPrimary\r\n                  padding=\"8px\"\r\n                  $borderRadius=\"8px\"\r\n                  as={Link}\r\n                  to={`/add/v2/${currencyId(currency0)}/${currencyId(currency1)}`}\r\n                  width=\"32%\"\r\n                >\r\n                  <Trans>Add</Trans>\r\n                </ButtonPrimary>\r\n                <ButtonPrimary\r\n                  padding=\"8px\"\r\n                  $borderRadius=\"8px\"\r\n                  as={Link}\r\n                  width=\"32%\"\r\n                  to={`/remove/v2/${currencyId(currency0)}/${currencyId(currency1)}`}\r\n                >\r\n                  <Trans>Remove</Trans>\r\n                </ButtonPrimary>\r\n              </RowBetween>\r\n            )}\r\n            {stakedBalance && JSBI.greaterThan(stakedBalance.quotient, BIG_INT_ZERO) && (\r\n              <ButtonPrimary\r\n                padding=\"8px\"\r\n                $borderRadius=\"8px\"\r\n                as={Link}\r\n                to={`/uni/${currencyId(currency0)}/${currencyId(currency1)}`}\r\n                width=\"100%\"\r\n              >\r\n                <Trans>Manage liquidity in rewards pool</Trans>\r\n              </ButtonPrimary>\r\n            )}\r\n          </AutoColumn>\r\n        )}\r\n      </AutoColumn>\r\n    </StyledPositionCard>\r\n  )\r\n}\r\n","import { AutoColumn } from 'components/Column'\r\nimport { Trans } from 'i18n'\r\nimport styled from 'styled-components'\r\nimport { ThemedText } from 'theme/components'\r\n\r\nconst TextWrapper = styled.div`\r\n  border: 1px solid ${({ theme }) => theme.neutral3};\r\n  padding: 16px 12px;\r\n  border-radius: 12px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nexport function V2Unsupported() {\r\n  return (\r\n    <AutoColumn gap=\"lg\" justify=\"center\">\r\n      <AutoColumn gap=\"md\" style={{ width: '100%' }}>\r\n        <TextWrapper>\r\n          <ThemedText.BodySecondary color=\"neutral2\" textAlign=\"center\">\r\n            <Trans>Uniswap V2 is not available on this network.</Trans>\r\n          </ThemedText.BodySecondary>\r\n        </TextWrapper>\r\n      </AutoColumn>\r\n    </AutoColumn>\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\n\r\nimport uImage from '../../assets/images/big_unicorn.png'\r\nimport noise from '../../assets/images/noise.png'\r\nimport xlUnicorn from '../../assets/images/xl_uni.png'\r\nimport { AutoColumn } from '../Column'\r\n\r\nexport const DataCard = styled(AutoColumn)<{ disabled?: boolean }>`\r\n  background: radial-gradient(76.02% 75.41% at 1.84% 0%, #ff007a 0%, #2172e5 100%);\r\n  border-radius: 12px;\r\n  width: 100%;\r\n  position: relative;\r\n  overflow: hidden;\r\n`\r\n\r\nexport const CardBGImage = styled.span<{ desaturate?: boolean }>`\r\n  background: url(${uImage});\r\n  width: 1000px;\r\n  height: 600px;\r\n  position: absolute;\r\n  border-radius: 12px;\r\n  opacity: 0.4;\r\n  top: -100px;\r\n  left: -100px;\r\n  transform: rotate(-15deg);\r\n  user-select: none;\r\n  ${({ desaturate }) => desaturate && `filter: saturate(0)`}\r\n`\r\n\r\nexport const CardBGImageSmaller = styled.span<{ desaturate?: boolean }>`\r\n  background: url(${xlUnicorn});\r\n  width: 1200px;\r\n  height: 1200px;\r\n  position: absolute;\r\n  border-radius: 12px;\r\n  top: -300px;\r\n  left: -300px;\r\n  opacity: 0.4;\r\n  user-select: none;\r\n\r\n  ${({ desaturate }) => desaturate && `filter: saturate(0)`}\r\n`\r\n\r\nexport const CardNoise = styled.span`\r\n  background: url(${noise});\r\n  background-size: cover;\r\n  mix-blend-mode: overlay;\r\n  border-radius: 12px;\r\n  width: 100%;\r\n  height: 100%;\r\n  opacity: 0.15;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  user-select: none;\r\n`\r\n\r\nexport const CardSection = styled(AutoColumn)<{ disabled?: boolean }>`\r\n  padding: 1rem;\r\n  z-index: 1;\r\n  opacity: ${({ disabled }) => disabled && '0.4'};\r\n`\r\n\r\nexport const Break = styled.div`\r\n  width: 100%;\r\n  background-color: rgba(255, 255, 255, 0.2);\r\n  height: 1px;\r\n`\r\n","import { SUPPORTED_V2POOL_CHAIN_IDS, SUPPORTED_V2POOL_CHAIN_IDS_DEPRECATED } from 'constants/chains'\r\nimport { FeatureFlags } from 'uniswap/src/features/gating/flags'\r\nimport { useFeatureFlag } from 'uniswap/src/features/gating/hooks'\r\nimport { useAccount } from 'wagmi'\r\n\r\nexport function useNetworkSupportsV2() {\r\n  const { chainId } = useAccount()\r\n  const isV2EverywhereEnabled = useFeatureFlag(FeatureFlags.V2Everywhere)\r\n\r\n  return (\r\n    chainId &&\r\n    ((isV2EverywhereEnabled && SUPPORTED_V2POOL_CHAIN_IDS.includes(chainId)) ||\r\n      SUPPORTED_V2POOL_CHAIN_IDS_DEPRECATED.includes(chainId))\r\n  )\r\n}\r\n","import { Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'\r\nimport { useSingleCallResult } from 'lib/hooks/multicall'\r\nimport { useMemo } from 'react'\r\n\r\nimport { useTokenContract } from './useContract'\r\n\r\n// returns undefined if input token is undefined, or fails to get token contract,\r\n// or contract total supply cannot be fetched\r\nexport function useTotalSupply(token?: Currency): CurrencyAmount<Token> | undefined {\r\n  const contract = useTokenContract(token?.isToken ? token.address : undefined, false)\r\n    //@ts-ignore\r\n  const totalSupplyStr: string | undefined = useSingleCallResult(contract, 'totalSupply')?.result?.[0]?.toString()\r\n\r\n  return useMemo(\r\n    () => (token?.isToken && totalSupplyStr ? CurrencyAmount.fromRawAmount(token, totalSupplyStr) : undefined),\r\n    [token, totalSupplyStr]\r\n  )\r\n}\r\n","import { Interface } from '@ethersproject/abi'\r\nimport { Currency, CurrencyAmount, V2_FACTORY_ADDRESSES } from '@uniswap/sdk-core'\r\nimport IUniswapV2PairJSON from '@uniswap/v2-core/build/IUniswapV2Pair.json'\r\nimport { Pair, computePairAddress } from '@uniswap/v2-sdk'\r\nimport { useMultipleContractSingleData } from 'lib/hooks/multicall'\r\nimport { useMemo } from 'react'\r\n\r\nconst PAIR_INTERFACE = new Interface(IUniswapV2PairJSON.abi)\r\n\r\nexport enum PairState {\r\n  LOADING,\r\n  NOT_EXISTS,\r\n  EXISTS,\r\n  INVALID,\r\n}\r\n\r\nexport function useV2Pairs(currencies: [Currency | undefined, Currency | undefined][]): [PairState, Pair | null][] {\r\n  const tokens = useMemo(\r\n    () => currencies.map(([currencyA, currencyB]) => [currencyA?.wrapped, currencyB?.wrapped]),\r\n    [currencies]\r\n  )\r\n\r\n  const pairAddresses = useMemo(\r\n    () =>\r\n      tokens.map(([tokenA, tokenB]) => {\r\n        return tokenA &&\r\n          tokenB &&\r\n          tokenA.chainId === tokenB.chainId &&\r\n          !tokenA.equals(tokenB) &&\r\n          V2_FACTORY_ADDRESSES[tokenA.chainId]\r\n          ? computePairAddress({ factoryAddress: V2_FACTORY_ADDRESSES[tokenA.chainId], tokenA, tokenB })\r\n          : undefined\r\n      }),\r\n    [tokens]\r\n  )\r\n\r\n  const results = useMultipleContractSingleData(pairAddresses, PAIR_INTERFACE, 'getReserves')\r\n\r\n  return useMemo(() => {\r\n    return results.map((result, i) => {\r\n      const { result: reserves, loading } = result\r\n      const tokenA = tokens[i][0]\r\n      const tokenB = tokens[i][1]\r\n\r\n      if (loading) return [PairState.LOADING, null]\r\n      if (!tokenA || !tokenB || tokenA.equals(tokenB)) return [PairState.INVALID, null]\r\n      if (!reserves) return [PairState.NOT_EXISTS, null]\r\n      const { reserve0, reserve1 } = reserves\r\n      const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\r\n      return [\r\n        PairState.EXISTS,\r\n        new Pair(\r\n          CurrencyAmount.fromRawAmount(token0, reserve0.toString()),\r\n          CurrencyAmount.fromRawAmount(token1, reserve1.toString())\r\n        ),\r\n      ]\r\n    })\r\n  }, [results, tokens])\r\n}\r\n\r\nexport function useV2Pair(tokenA?: Currency, tokenB?: Currency): [PairState, Pair | null] {\r\n  const inputs: [[Currency | undefined, Currency | undefined]] = useMemo(() => [[tokenA, tokenB]], [tokenA, tokenB])\r\n  return useV2Pairs(inputs)[0]\r\n}\r\n","import { Currency } from '@uniswap/sdk-core'\r\n\r\nimport { nativeOnChain, WRAPPED_NATIVE_CURRENCY } from '../constants/tokens'\r\n\r\nexport function unwrappedToken(currency: Currency): Currency {\r\n  if (currency.isNative) return currency\r\n  if (WRAPPED_NATIVE_CURRENCY[currency.chainId]?.equals(currency)) return nativeOnChain(currency.chainId)\r\n  return currency\r\n}\r\n"],"names":["FixedHeightRow","styled","RowBetween","StyledPositionCard","LightCard","theme","bgColor","transparentize","surface2","MinimalPositionCard","pair","showUnwrapped","border","token0Deposited","token1Deposited","account","useWeb3React","currency0","token0","unwrappedToken","currency1","token1","showMore","setShowMore","useState","userPoolBalance","useTokenBalance","undefined","liquidityToken","totalPoolTokens","useTotalSupply","poolTokenPercentage","JSBI","quotient","Percent","getLiquidityValue","GrayCard","AutoColumn","gap","RowFixed","Text","fontWeight","fontSize","Trans","onClick","DoubleCurrencyLogo","currencies","size","symbol","toSignificant","toFixed","marginLeft","ThemedText","DeprecatedSubHeader","style","textAlign","span","role","aria-label","FullPositionCard","stakedBalance","userDefaultPoolBalance","add","backgroundColor","useColor","CardNoise","AutoRow","Dots","marginRight","ButtonEmpty","padding","$borderRadius","width","ChevronUp","height","minWidth","ChevronDown","sym","CurrencyLogo","currency","amt","ButtonSecondary","ExternalLink","href","BIG_INT_ZERO","marginTop","ButtonPrimary","as","Link","to","address","currencyId","TextWrapper","div","neutral3","V2Unsupported","justify","BodySecondary","color","DataCard","CardBGImage","uImage","desaturate","CardBGImageSmaller","xlUnicorn","noise","CardSection","disabled","Break","useNetworkSupportsV2","chainId","useAccount","isV2EverywhereEnabled","useFeatureFlag","FeatureFlags","V2Everywhere","SUPPORTED_V2POOL_CHAIN_IDS","includes","SUPPORTED_V2POOL_CHAIN_IDS_DEPRECATED","token","useSingleCallResult","contract","useTokenContract","isToken","totalSupplyStr","result","toString","useMemo","CurrencyAmount","fromRawAmount","PAIR_INTERFACE","Interface","IUniswapV2PairJSON","useV2Pairs","tokens","map","currencyA","currencyB","wrapped","pairAddresses","tokenA","tokenB","equals","V2_FACTORY_ADDRESSES","computePairAddress","factoryAddress","results","useMultipleContractSingleData","i","reserves","loading","PairState","LOADING","INVALID","NOT_EXISTS","reserve0","reserve1","sortsBefore","EXISTS","Pair","useV2Pair","WRAPPED_NATIVE_CURRENCY","isNative","nativeOnChain"],"sourceRoot":""}