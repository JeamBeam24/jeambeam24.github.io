{"version":3,"file":"static/js/1787.1bfe62f3.chunk.js","mappings":"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","sources":["assets/images/menu.svg","components/Menu/index.tsx","components/Icons/Pool.tsx","pages/Pool/shared.tsx","state/stake/hooks.tsx","pages/Pool/v2.tsx"],"sourcesContent":["var _path, _path2, _path3;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgMenu(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 13C12.5523 13 13 12.5523 13 12C13 11.4477 12.5523 11 12 11C11.4477 11 11 11.4477 11 12C11 12.5523 11.4477 13 12 13Z\",\n    stroke: \"black\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19 13C19.5523 13 20 12.5523 20 12C20 11.4477 19.5523 11 19 11C18.4477 11 18 11.4477 18 12C18 12.5523 18.4477 13 19 13Z\",\n    stroke: \"black\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M5 13C5.55228 13 6 12.5523 6 12C6 11.4477 5.55228 11 5 11C4.44772 11 4 11.4477 4 12C4 12.5523 4.44772 13 5 13Z\",\n    stroke: \"black\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgMenu);\nexport default __webpack_public_path__ + \"static/media/menu.f7a8c0ea957f3755da460a415c62b7d0.svg\";\nexport { ForwardRef as ReactComponent };","import { FunctionComponent, PropsWithChildren, useRef } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport styled, { css } from 'styled-components'\r\nimport { ExternalLink } from 'theme/components'\r\n\r\nimport { ReactComponent as MenuIcon } from '../../assets/images/menu.svg'\r\nimport { useOnClickOutside } from '../../hooks/useOnClickOutside'\r\nimport { useModalIsOpen, useToggleModal } from '../../state/application/hooks'\r\nimport { ApplicationModal } from '../../state/application/reducer'\r\n\r\nexport enum FlyoutAlignment {\r\n  LEFT = 'LEFT',\r\n  RIGHT = 'RIGHT',\r\n}\r\n\r\nconst StyledMenuIcon = styled(MenuIcon)`\r\n  path {\r\n    stroke: ${({ theme }) => theme.neutral1};\r\n  }\r\n`\r\n\r\nconst StyledMenu = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: relative;\r\n  border: none;\r\n  text-align: left;\r\n`\r\n\r\nconst MenuFlyout = styled.span<{ flyoutAlignment?: FlyoutAlignment }>`\r\n  min-width: 196px;\r\n  max-height: 350px;\r\n  overflow: auto;\r\n  background-color: ${({ theme }) => theme.surface1};\r\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.01), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04),\r\n    0px 24px 32px rgba(0, 0, 0, 0.01);\r\n  border: 1px solid ${({ theme }) => theme.surface3};\r\n  border-radius: 12px;\r\n  padding: 0.5rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-size: 16px;\r\n  position: absolute;\r\n  top: 3rem;\r\n  z-index: 100;\r\n\r\n  ${({ flyoutAlignment = FlyoutAlignment.RIGHT }) =>\r\n    flyoutAlignment === FlyoutAlignment.RIGHT\r\n      ? css`\r\n          right: 0rem;\r\n        `\r\n      : css`\r\n          left: 0rem;\r\n        `};\r\n`\r\n\r\nconst MenuItem = styled(ExternalLink)`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding: 0.5rem 0.5rem;\r\n  justify-content: space-between;\r\n  color: ${({ theme }) => theme.neutral2};\r\n  :hover {\r\n    color: ${({ theme }) => theme.neutral1};\r\n    cursor: pointer;\r\n    text-decoration: none;\r\n  }\r\n`\r\n\r\nconst InternalMenuItem = styled(Link)`\r\n  flex: 1;\r\n  padding: 0.5rem 0.5rem;\r\n  color: ${({ theme }) => theme.neutral2};\r\n  width: max-content;\r\n  text-decoration: none;\r\n  :hover {\r\n    color: ${({ theme }) => theme.neutral1};\r\n    cursor: pointer;\r\n    text-decoration: none;\r\n  }\r\n  > svg {\r\n    margin-right: 8px;\r\n  }\r\n`\r\n\r\ninterface MenuProps {\r\n  modal: ApplicationModal\r\n  flyoutAlignment?: FlyoutAlignment\r\n  ToggleUI?: FunctionComponent<PropsWithChildren<unknown>>\r\n  menuItems: {\r\n    content: any\r\n    link: string\r\n    external: boolean\r\n  }[]\r\n}\r\n\r\nconst ExternalMenuItem = styled(MenuItem)`\r\n  width: max-content;\r\n  text-decoration: none;\r\n`\r\n\r\nexport const Menu = ({ modal, flyoutAlignment = FlyoutAlignment.RIGHT, ToggleUI, menuItems, ...rest }: MenuProps) => {\r\n  const node = useRef<HTMLDivElement>()\r\n  const open = useModalIsOpen(modal)\r\n  const toggle = useToggleModal(modal)\r\n  useOnClickOutside(node, open ? toggle : undefined)\r\n  const ToggleElement = ToggleUI || StyledMenuIcon\r\n\r\n  return (\r\n    <StyledMenu ref={node as any} {...rest}>\r\n      <ToggleElement onClick={toggle} />\r\n      {open && (\r\n        <MenuFlyout flyoutAlignment={flyoutAlignment} onClick={toggle}>\r\n          {menuItems.map(({ content, link, external }, i) =>\r\n            external ? (\r\n              <ExternalMenuItem href={link} key={i}>\r\n                {content}\r\n              </ExternalMenuItem>\r\n            ) : (\r\n              <InternalMenuItem to={link} key={i}>\r\n                {content}\r\n              </InternalMenuItem>\r\n            )\r\n          )}\r\n        </MenuFlyout>\r\n      )}\r\n    </StyledMenu>\r\n  )\r\n}\r\n","import { ComponentProps } from 'react'\r\n\r\nexport const Pool = (props: ComponentProps<'svg'>) => (\r\n  <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\r\n    <path\r\n      d=\"M5.2971 7.20007H12.4971V3.19995C12.4971 1.43263 13.9298 0 15.6971 0C17.4644 0 18.8972 1.43263 18.8972 3.19995H17.2971C17.2971 2.31631 16.5807 1.60005 15.6971 1.60005C14.8134 1.60005 14.0972 2.31631 14.0972 3.19995V12.0001H12.4971V8.80012H5.2971V10.4001H3.69705V3.20002C3.69705 1.4327 5.12982 6.80089e-05 6.89715 6.80089e-05C8.66447 6.80089e-05 10.0971 1.4327 10.0971 3.20002H8.49705C8.49705 2.31638 7.78079 1.60011 6.89715 1.60011C6.0135 1.60011 5.2971 2.31638 5.2971 3.20002V7.20007ZM1.59424 14.3428L1 12.8573C3.85069 11.717 6.97772 11.717 10.3501 12.8411C13.3778 13.8503 16.1173 13.8503 18.5999 12.8573L19.1942 14.3428C16.3435 15.4831 13.2164 15.4831 9.84407 14.3589C6.81633 13.3497 4.07687 13.3497 1.59424 14.3428ZM1.59424 18.3426L1 16.8571C3.85069 15.7168 6.97772 15.7168 10.3501 16.841C13.3778 17.8502 16.1173 17.8502 18.5999 16.8571L19.1942 18.3426C16.3435 19.4829 13.2164 19.4829 9.84407 18.3588C6.81633 17.3497 4.07687 17.3497 1.59424 18.3426Z\"\r\n      fill={props.fill || 'currentColor'}\r\n    />\r\n  </svg>\r\n)\r\n","import { ButtonGray } from 'components/Button'\r\nimport { Pool } from 'components/Icons/Pool'\r\nimport { FlyoutAlignment, Menu } from 'components/Menu'\r\nimport { Trans, t } from 'i18n'\r\nimport { ChevronDown } from 'react-feather'\r\nimport { useModalIsOpen } from 'state/application/hooks'\r\nimport { ApplicationModal } from 'state/application/reducer'\r\nimport styled, { css } from 'styled-components'\r\nimport { ThemedText } from 'theme/components'\r\nimport { ProtocolVersion } from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\r\n\r\nconst PoolVersionItem = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n  gap: 12px;\r\n`\r\n\r\nconst PoolOptionsButton = styled(ButtonGray)<{ $isOpen: boolean }>`\r\n  flex: 1 1 auto;\r\n  padding: 6px 8px 6px 12px;\r\n  width: 100%;\r\n  background-color: ${({ theme }) => theme.surface3};\r\n  border: none;\r\n  border-radius: 8px;\r\n  gap: 6px;\r\n\r\n  &:hover {\r\n    background-color: ${({ theme, $isOpen }) => ($isOpen ? theme.surface1 : theme.surface3)};\r\n    opacity: 0.9;\r\n  }\r\n\r\n  ${({ $isOpen }) =>\r\n    $isOpen &&\r\n    css`\r\n      background-color: ${({ theme }) => theme.surface1};\r\n      border: ${({ theme }) => `1.5px solid ${theme.neutral3}`};\r\n    `}\r\n`\r\n\r\nconst StyledChevron = styled(ChevronDown)<{ $isOpen: boolean }>`\r\n  transform: ${({ $isOpen }) => ($isOpen ? 'rotate(180deg)' : 'rotate(0deg)')};\r\n  transition: ${({\r\n    theme: {\r\n      transition: { duration, timing },\r\n    },\r\n  }) => `transform ${duration.fast} ${timing.ease}`};\r\n`\r\n\r\nconst menuItems = {\r\n  [ProtocolVersion.V3]: {\r\n    content: (\r\n      <PoolVersionItem>\r\n        <Pool width=\"20px\" height=\"20px\" />\r\n        <ThemedText.BodyPrimary lineHeight=\"24px\" color=\"currentColor\">\r\n          <Trans>v3 pools</Trans>\r\n        </ThemedText.BodyPrimary>\r\n      </PoolVersionItem>\r\n    ),\r\n    link: '/pool',\r\n    external: false,\r\n  },\r\n  [ProtocolVersion.V2]: {\r\n    content: (\r\n      <PoolVersionItem>\r\n        <Pool width=\"20px\" height=\"20px\" />\r\n        <ThemedText.BodyPrimary lineHeight=\"24px\" color=\"currentColor\">\r\n          <Trans>v2 pools</Trans>\r\n        </ThemedText.BodyPrimary>\r\n      </PoolVersionItem>\r\n    ),\r\n    link: '/pools/v2',\r\n    external: false,\r\n  },\r\n}\r\n\r\nconst titles = {\r\n  [ProtocolVersion.V3]: t`v3`,\r\n  [ProtocolVersion.V2]: t`v2`,\r\n}\r\n\r\nexport function PoolVersionMenu({ protocolVersion }: { protocolVersion: ProtocolVersion }) {\r\n  const isOpen = useModalIsOpen(ApplicationModal.POOL_VERSION)\r\n\r\n  return (\r\n    <Menu\r\n      modal={ApplicationModal.POOL_VERSION}\r\n      menuItems={[menuItems[protocolVersion === ProtocolVersion.V3 ? ProtocolVersion.V2 : ProtocolVersion.V3]]}\r\n      flyoutAlignment={FlyoutAlignment.LEFT}\r\n      ToggleUI={(props: any) => (\r\n        <PoolOptionsButton {...props} $isOpen={isOpen}>\r\n          <ThemedText.BodyPrimary color=\"neutral2\">{titles[protocolVersion]}</ThemedText.BodyPrimary>\r\n          <StyledChevron $isOpen={isOpen} />\r\n        </PoolOptionsButton>\r\n      )}\r\n    />\r\n  )\r\n}\r\n","import { Interface } from '@ethersproject/abi'\r\nimport StakingRewardsJSON from '@uniswap/liquidity-staker/build/StakingRewards.json'\r\nimport { ChainId, CurrencyAmount, Token } from '@uniswap/sdk-core'\r\nimport { Pair } from '@uniswap/v2-sdk'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useCurrentBlockTimestamp from 'hooks/useCurrentBlockTimestamp'\r\nimport JSBI from 'jsbi'\r\nimport { NEVER_RELOAD, useMultipleContractSingleData } from 'lib/hooks/multicall'\r\nimport { useMemo } from 'react'\r\n\r\nimport { DAI, UNI, USDC_MAINNET, USDT, WBTC, WRAPPED_NATIVE_CURRENCY } from '../../constants/tokens'\r\n\r\nconst STAKING_REWARDS_INTERFACE = new Interface(StakingRewardsJSON.abi)\r\n\r\nexport const STAKING_GENESIS = 1600387200\r\n\r\nconst STAKING_REWARDS_INFO: {\r\n  [chainId: number]: {\r\n    tokens: [Token, Token]\r\n    stakingRewardAddress: string\r\n  }[]\r\n} = {\r\n  1: [\r\n    {\r\n      tokens: [WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET] as Token, DAI],\r\n      stakingRewardAddress: '0xa1484C3aa22a66C62b77E0AE78E15258bd0cB711',\r\n    },\r\n    {\r\n      tokens: [WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET] as Token, USDC_MAINNET],\r\n      stakingRewardAddress: '0x7FBa4B8Dc5E7616e59622806932DBea72537A56b',\r\n    },\r\n    {\r\n      tokens: [WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET] as Token, USDT],\r\n      stakingRewardAddress: '0x6C3e4cb2E96B01F4b866965A91ed4437839A121a',\r\n    },\r\n    {\r\n      tokens: [WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET] as Token, WBTC],\r\n      stakingRewardAddress: '0xCA35e32e7926b96A9988f61d510E038108d8068e',\r\n    },\r\n  ],\r\n}\r\n\r\ninterface StakingInfo {\r\n  // the address of the reward contract\r\n  stakingRewardAddress: string\r\n  // the tokens involved in this pair\r\n  tokens: [Token, Token]\r\n  // the amount of token currently staked, or undefined if no account\r\n  stakedAmount: CurrencyAmount<Token>\r\n  // the amount of reward token earned by the active account, or undefined if no account\r\n  earnedAmount: CurrencyAmount<Token>\r\n  // the total amount of token staked in the contract\r\n  totalStakedAmount: CurrencyAmount<Token>\r\n  // the amount of token distributed per second to all LPs, constant\r\n  totalRewardRate: CurrencyAmount<Token>\r\n  // the current amount of token distributed to the active account per second.\r\n  // equivalent to percent of total supply * reward rate\r\n  rewardRate: CurrencyAmount<Token>\r\n  // when the period ends\r\n  periodFinish?: Date\r\n  // if pool is active\r\n  active: boolean\r\n  // calculates a hypothetical amount of token distributed to the active account per second.\r\n  getHypotheticalRewardRate: (\r\n    stakedAmount: CurrencyAmount<Token>,\r\n    totalStakedAmount: CurrencyAmount<Token>,\r\n    totalRewardRate: CurrencyAmount<Token>\r\n  ) => CurrencyAmount<Token>\r\n}\r\n\r\n// gets the staking info from the network for the active chain id\r\nexport function useStakingInfo(pairToFilterBy?: Pair | null): StakingInfo[] {\r\n  const { chainId, account } = useWeb3React()\r\n\r\n  // detect if staking is ended\r\n  const currentBlockTimestamp = useCurrentBlockTimestamp(NEVER_RELOAD)\r\n\r\n  const info = useMemo(\r\n    () =>\r\n      chainId\r\n        ? STAKING_REWARDS_INFO[chainId]?.filter((stakingRewardInfo) =>\r\n            pairToFilterBy === undefined\r\n              ? true\r\n              : pairToFilterBy === null\r\n              ? false\r\n              : pairToFilterBy.involvesToken(stakingRewardInfo.tokens[0]) &&\r\n                pairToFilterBy.involvesToken(stakingRewardInfo.tokens[1])\r\n          ) ?? []\r\n        : [],\r\n    [chainId, pairToFilterBy]\r\n  )\r\n\r\n  const uni = chainId ? UNI[chainId] : undefined\r\n\r\n  const rewardsAddresses = useMemo(() => info.map(({ stakingRewardAddress }) => stakingRewardAddress), [info])\r\n\r\n  const accountArg = useMemo(() => [account ?? undefined], [account])\r\n\r\n  // get all the info from the staking rewards contracts\r\n  const balances = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'balanceOf', accountArg)\r\n  const earnedAmounts = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'earned', accountArg)\r\n  const totalSupplies = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'totalSupply')\r\n\r\n  // tokens per second, constants\r\n  const rewardRates = useMultipleContractSingleData(\r\n    rewardsAddresses,\r\n    STAKING_REWARDS_INTERFACE,\r\n    'rewardRate',\r\n    undefined,\r\n    NEVER_RELOAD\r\n  )\r\n  const periodFinishes = useMultipleContractSingleData(\r\n    rewardsAddresses,\r\n    STAKING_REWARDS_INTERFACE,\r\n    'periodFinish',\r\n    undefined,\r\n    NEVER_RELOAD\r\n  )\r\n\r\n  return useMemo(() => {\r\n    if (!chainId || !uni) return []\r\n\r\n    return rewardsAddresses.reduce<StakingInfo[]>((memo, rewardsAddress, index) => {\r\n      // these two are dependent on account\r\n      const balanceState = balances[index]\r\n      const earnedAmountState = earnedAmounts[index]\r\n\r\n      // these get fetched regardless of account\r\n      const totalSupplyState = totalSupplies[index]\r\n      const rewardRateState = rewardRates[index]\r\n      const periodFinishState = periodFinishes[index]\r\n\r\n      if (\r\n        // these may be undefined if not logged in\r\n        !balanceState?.loading &&\r\n        !earnedAmountState?.loading &&\r\n        // always need these\r\n        totalSupplyState &&\r\n        !totalSupplyState.loading &&\r\n        rewardRateState &&\r\n        !rewardRateState.loading &&\r\n        periodFinishState &&\r\n        !periodFinishState.loading\r\n      ) {\r\n        if (\r\n          balanceState?.error ||\r\n          earnedAmountState?.error ||\r\n          totalSupplyState.error ||\r\n          rewardRateState.error ||\r\n          periodFinishState.error\r\n        ) {\r\n          console.error('Failed to load staking rewards info')\r\n          return memo\r\n        }\r\n\r\n        // get the LP token\r\n        const tokens = info[index].tokens\r\n        const dummyPair = new Pair(\r\n          CurrencyAmount.fromRawAmount(tokens[0], '0'),\r\n          CurrencyAmount.fromRawAmount(tokens[1], '0')\r\n        )\r\n\r\n        // check for account, if no account set to 0\r\n\r\n        const stakedAmount = CurrencyAmount.fromRawAmount(\r\n          dummyPair.liquidityToken,\r\n          JSBI.BigInt(balanceState?.result?.[0] ?? 0)\r\n        )\r\n        const totalStakedAmount = CurrencyAmount.fromRawAmount(\r\n          dummyPair.liquidityToken,\r\n          JSBI.BigInt(totalSupplyState.result?.[0])\r\n        )\r\n        const totalRewardRate = CurrencyAmount.fromRawAmount(uni, JSBI.BigInt(rewardRateState.result?.[0]))\r\n\r\n        const getHypotheticalRewardRate = (\r\n          stakedAmount: CurrencyAmount<Token>,\r\n          totalStakedAmount: CurrencyAmount<Token>,\r\n          totalRewardRate: CurrencyAmount<Token>\r\n        ): CurrencyAmount<Token> => {\r\n          return CurrencyAmount.fromRawAmount(\r\n            uni,\r\n            JSBI.greaterThan(totalStakedAmount.quotient, JSBI.BigInt(0))\r\n              ? JSBI.divide(JSBI.multiply(totalRewardRate.quotient, stakedAmount.quotient), totalStakedAmount.quotient)\r\n              : JSBI.BigInt(0)\r\n          )\r\n        }\r\n\r\n        const individualRewardRate = getHypotheticalRewardRate(stakedAmount, totalStakedAmount, totalRewardRate)\r\n\r\n        const periodFinishSeconds = periodFinishState.result?.[0]?.toNumber()\r\n        const periodFinishMs = periodFinishSeconds * 1000\r\n\r\n        // compare period end timestamp vs current block timestamp (in seconds)\r\n        const active =\r\n          periodFinishSeconds && currentBlockTimestamp ? periodFinishSeconds > currentBlockTimestamp.toNumber() : true\r\n\r\n        memo.push({\r\n          stakingRewardAddress: rewardsAddress,\r\n          tokens: info[index].tokens,\r\n          periodFinish: periodFinishMs > 0 ? new Date(periodFinishMs) : undefined,\r\n          earnedAmount: CurrencyAmount.fromRawAmount(uni, JSBI.BigInt(earnedAmountState?.result?.[0] ?? 0)),\r\n          rewardRate: individualRewardRate,\r\n          totalRewardRate,\r\n          stakedAmount,\r\n          totalStakedAmount,\r\n          getHypotheticalRewardRate,\r\n          active,\r\n        })\r\n      }\r\n      return memo\r\n    }, [])\r\n  }, [\r\n    balances,\r\n    chainId,\r\n    currentBlockTimestamp,\r\n    earnedAmounts,\r\n    info,\r\n    periodFinishes,\r\n    rewardRates,\r\n    rewardsAddresses,\r\n    totalSupplies,\r\n    uni,\r\n  ])\r\n}\r\n","import { InterfacePageName } from '@uniswap/analytics-events'\r\nimport { Pair } from '@uniswap/v2-sdk'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Trace } from 'analytics'\r\nimport { V2Unsupported } from 'components/V2Unsupported'\r\nimport { useNetworkSupportsV2 } from 'hooks/useNetworkSupportsV2'\r\nimport { Trans } from 'i18n'\r\nimport JSBI from 'jsbi'\r\nimport { PoolVersionMenu } from 'pages/Pool/shared'\r\nimport { useMemo } from 'react'\r\nimport { ChevronsRight } from 'react-feather'\r\nimport { Link } from 'react-router-dom'\r\nimport { Text } from 'rebass'\r\nimport styled, { useTheme } from 'styled-components'\r\nimport { ExternalLink, HideSmall, ThemedText } from 'theme/components'\r\nimport { ProtocolVersion } from 'uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks'\r\nimport { ButtonOutlined, ButtonPrimary, ButtonSecondary } from '../../components/Button'\r\nimport Card from '../../components/Card'\r\nimport { AutoColumn } from '../../components/Column'\r\nimport FullPositionCard from '../../components/PositionCard'\r\nimport Row, { RowBetween, RowFixed } from '../../components/Row'\r\nimport { SwitchLocaleLink } from '../../components/SwitchLocaleLink'\r\nimport { CardBGImage, CardNoise, CardSection, DataCard } from '../../components/earn/styled'\r\nimport { Dots } from '../../components/swap/styled'\r\nimport { BIG_INT_ZERO } from '../../constants/misc'\r\nimport { useV2Pairs } from '../../hooks/useV2Pairs'\r\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/connection/hooks'\r\nimport { useStakingInfo } from '../../state/stake/hooks'\r\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks'\r\n\r\nconst PageWrapper = styled(AutoColumn)`\r\n  max-width: 640px;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\r\n    padding: 0px 8px;\r\n  `};\r\n`\r\n\r\nconst LPFeeExplainer = styled(DataCard)`\r\n  background: radial-gradient(76.02% 75.41% at 1.84% 0%, #27ae60 0%, #000000 100%);\r\n  margin: 0 0 16px 0;\r\n  overflow: hidden;\r\n`\r\n\r\nconst ButtonRow = styled(RowFixed)`\r\n  gap: 8px;\r\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\r\n    width: 100%;\r\n    flex-direction: row-reverse;\r\n    justify-content: space-between;\r\n  `};\r\n`\r\n\r\nconst ResponsiveButtonPrimary = styled(ButtonPrimary)`\r\n  height: 40px;\r\n  width: fit-content;\r\n  border-radius: 12px;\r\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\r\n    width: 48%;\r\n  `};\r\n`\r\n\r\nconst ResponsiveButtonSecondary = styled(ButtonSecondary)`\r\n  height: 40px;\r\n  width: fit-content;\r\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\r\n    width: 48%;\r\n  `};\r\n`\r\n\r\nconst EmptyProposals = styled.div`\r\n  border: 1px solid ${({ theme }) => theme.neutral2};\r\n  padding: 16px 12px;\r\n  border-radius: 12px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst Header = styled(ThemedText.H1Small)`\r\n  margin-top: 8px;\r\n  justify-self: flex-start;\r\n  font-weight: 535;\r\n`\r\n\r\nexport default function Pool() {\r\n  const theme = useTheme()\r\n  const { account } = useWeb3React()\r\n  const networkSupportsV2 = useNetworkSupportsV2()\r\n\r\n  // fetch the user's balances of all tracked V2 LP tokens\r\n  let trackedTokenPairs = useTrackedTokenPairs()\r\n  if (!networkSupportsV2) trackedTokenPairs = []\r\n  const tokenPairsWithLiquidityTokens = useMemo(\r\n    () => trackedTokenPairs.map((tokens) => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\r\n    [trackedTokenPairs]\r\n  )\r\n  const liquidityTokens = useMemo(\r\n    () => tokenPairsWithLiquidityTokens.map((tpwlt) => tpwlt.liquidityToken),\r\n    [tokenPairsWithLiquidityTokens]\r\n  )\r\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\r\n    account ?? undefined,\r\n    liquidityTokens\r\n  )\r\n\r\n  // fetch the reserves for all V2 pools in which the user has a balance\r\n  const liquidityTokensWithBalances = useMemo(\r\n    () =>\r\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\r\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0')\r\n      ),\r\n    [tokenPairsWithLiquidityTokens, v2PairsBalances]\r\n  )\r\n\r\n  const v2Pairs = useV2Pairs(liquidityTokensWithBalances.map(({ tokens }) => tokens))\r\n  const v2IsLoading =\r\n    fetchingV2PairBalances || v2Pairs?.length < liquidityTokensWithBalances.length || v2Pairs?.some((V2Pair) => !V2Pair)\r\n\r\n  const allV2PairsWithLiquidity = v2Pairs.map(([, pair]) => pair).filter((v2Pair): v2Pair is Pair => Boolean(v2Pair))\r\n\r\n  // show liquidity even if its deposited in rewards contract\r\n  const stakingInfo = useStakingInfo()\r\n  const stakingInfosWithBalance = stakingInfo?.filter((pool) =>\r\n    JSBI.greaterThan(pool.stakedAmount.quotient, BIG_INT_ZERO)\r\n  )\r\n  const stakingPairs = useV2Pairs(stakingInfosWithBalance?.map((stakingInfo) => stakingInfo.tokens))\r\n\r\n  // remove any pairs that also are included in pairs with stake in mining pool\r\n  const v2PairsWithoutStakedAmount = allV2PairsWithLiquidity.filter((v2Pair) => {\r\n    return (\r\n      stakingPairs\r\n        ?.map((stakingPair) => stakingPair[1])\r\n        .filter((stakingPair) => stakingPair?.liquidityToken.address === v2Pair.liquidityToken.address).length === 0\r\n    )\r\n  })\r\n\r\n  return (\r\n    <Trace page={InterfacePageName.POOL_PAGE} shouldLogImpression>\r\n      <>\r\n        <PageWrapper>\r\n          <LPFeeExplainer>\r\n            <CardBGImage />\r\n            <CardNoise />\r\n            <CardSection>\r\n              <AutoColumn gap=\"md\">\r\n                <RowBetween>\r\n                  <ThemedText.DeprecatedWhite fontWeight={535}>\r\n                    <Trans>Liquidity provider rewards</Trans>\r\n                  </ThemedText.DeprecatedWhite>\r\n                </RowBetween>\r\n                <RowBetween>\r\n                  <ThemedText.DeprecatedWhite fontSize={14}>\r\n                    <Trans>\r\n                      Liquidity providers earn a 0.3% fee on all trades proportional to their share of the pool. Fees\r\n                      are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.\r\n                    </Trans>\r\n                  </ThemedText.DeprecatedWhite>\r\n                </RowBetween>\r\n                <ExternalLink\r\n                  style={{ color: theme.white, textDecoration: 'underline' }}\r\n                  target=\"_blank\"\r\n                  href=\"https://docs.uniswap.org/contracts/v2/concepts/core-concepts/pools\"\r\n                >\r\n                  <ThemedText.DeprecatedWhite fontSize={14}>\r\n                    <Trans>Read more about providing liquidity</Trans>\r\n                  </ThemedText.DeprecatedWhite>\r\n                </ExternalLink>\r\n              </AutoColumn>\r\n            </CardSection>\r\n            <CardBGImage />\r\n            <CardNoise />\r\n          </LPFeeExplainer>\r\n\r\n          {!networkSupportsV2 ? (\r\n            <V2Unsupported />\r\n          ) : (\r\n            <AutoColumn gap=\"lg\" justify=\"center\">\r\n              <AutoColumn gap=\"md\" style={{ width: '100%' }}>\r\n                <Row gap=\"md\" justify=\"space-between\" style={{ marginTop: '1rem' }} padding=\"0\">\r\n                  <Row gap=\"md\" width=\"content\">\r\n                    <HideSmall>\r\n                      <Header>\r\n                        <Trans>Your V2 liquidity</Trans>\r\n                      </Header>\r\n                    </HideSmall>\r\n                    <PoolVersionMenu protocolVersion={ProtocolVersion.V2} />\r\n                  </Row>\r\n                  <ButtonRow>\r\n                    <ResponsiveButtonSecondary as={Link} padding=\"6px 8px\" to=\"/add/v2/ETH\">\r\n                      <Trans>Create a pair</Trans>\r\n                    </ResponsiveButtonSecondary>\r\n                    <ResponsiveButtonPrimary id=\"find-pool-button\" as={Link} to=\"/pools/v2/find\" padding=\"6px 8px\">\r\n                      <Text fontWeight={535} fontSize={16}>\r\n                        <Trans>Import pool</Trans>\r\n                      </Text>\r\n                    </ResponsiveButtonPrimary>\r\n                    <ResponsiveButtonPrimary id=\"join-pool-button\" as={Link} to=\"/add/v2/ETH\" padding=\"6px 8px\">\r\n                      <Text fontWeight={535} fontSize={16}>\r\n                        <Trans>Add V2 liquidity</Trans>\r\n                      </Text>\r\n                    </ResponsiveButtonPrimary>\r\n                  </ButtonRow>\r\n                </Row>\r\n\r\n                {!account ? (\r\n                  <Card padding=\"40px\">\r\n                    <ThemedText.DeprecatedBody color={theme.neutral3} textAlign=\"center\">\r\n                      <Trans>Connect to a wallet to view your liquidity.</Trans>\r\n                    </ThemedText.DeprecatedBody>\r\n                  </Card>\r\n                ) : v2IsLoading ? (\r\n                  <EmptyProposals>\r\n                    <ThemedText.DeprecatedBody color={theme.neutral3} textAlign=\"center\">\r\n                      <Dots>\r\n                        <Trans>Loading</Trans>\r\n                      </Dots>\r\n                    </ThemedText.DeprecatedBody>\r\n                  </EmptyProposals>\r\n                ) : allV2PairsWithLiquidity?.length > 0 || stakingPairs?.length > 0 ? (\r\n                  <>\r\n                    <ButtonSecondary>\r\n                      <RowBetween>\r\n                        <Trans>\r\n                          <ExternalLink href={'https://v2.info.uniswap.org/account/' + account}>\r\n                            Account analytics and accrued fees\r\n                          </ExternalLink>\r\n                          <span> ↗ </span>\r\n                        </Trans>\r\n                      </RowBetween>\r\n                    </ButtonSecondary>\r\n                    {v2PairsWithoutStakedAmount.map((v2Pair) => (\r\n                      <FullPositionCard key={v2Pair.liquidityToken.address} pair={v2Pair} />\r\n                    ))}\r\n                    {stakingPairs.map(\r\n                      (stakingPair, i) =>\r\n                        stakingPair[1] && ( // skip pairs that arent loaded\r\n                          <FullPositionCard\r\n                            key={stakingInfosWithBalance[i].stakingRewardAddress}\r\n                            pair={stakingPair[1]}\r\n                            stakedBalance={stakingInfosWithBalance[i].stakedAmount}\r\n                          />\r\n                        )\r\n                    )}\r\n                    <RowFixed justify=\"center\" style={{ width: '100%' }}>\r\n                      <ButtonOutlined\r\n                        as={Link}\r\n                        to=\"/migrate/v2\"\r\n                        id=\"import-pool-link\"\r\n                        style={{\r\n                          padding: '8px 16px',\r\n                          margin: '0 4px',\r\n                          borderRadius: '12px',\r\n                          width: 'fit-content',\r\n                          fontSize: '14px',\r\n                        }}\r\n                      >\r\n                        <ChevronsRight size={16} style={{ marginRight: '8px' }} />\r\n                        <Trans>Migrate liquidity to V3</Trans>\r\n                      </ButtonOutlined>\r\n                    </RowFixed>\r\n                  </>\r\n                ) : (\r\n                  <EmptyProposals>\r\n                    <ThemedText.DeprecatedBody color={theme.neutral3} textAlign=\"center\">\r\n                      <Trans>No liquidity found.</Trans>\r\n                    </ThemedText.DeprecatedBody>\r\n                  </EmptyProposals>\r\n                )}\r\n              </AutoColumn>\r\n            </AutoColumn>\r\n          )}\r\n        </PageWrapper>\r\n        <SwitchLocaleLink />\r\n      </>\r\n    </Trace>\r\n  )\r\n}\r\n"],"names":["_path","_path2","_path3","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","SvgMenu","_ref","svgRef","title","titleId","props","width","height","viewBox","fill","xmlns","ref","id","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","ForwardRef","FlyoutAlignment","LEFT","RIGHT","StyledMenuIcon","styled","MenuIcon","theme","neutral1","StyledMenu","div","MenuFlyout","span","surface1","surface3","flyoutAlignment","css","MenuItem","ExternalLink","neutral2","InternalMenuItem","Link","ExternalMenuItem","Menu","modal","ToggleUI","menuItems","rest","node","useRef","open","useModalIsOpen","toggle","useToggleModal","useOnClickOutside","undefined","ToggleElement","onClick","map","content","link","external","href","to","Pool","svg","path","PoolVersionItem","PoolOptionsButton","ButtonGray","$isOpen","neutral3","StyledChevron","ChevronDown","transition","duration","timing","fast","ease","ProtocolVersion","V3","ThemedText","BodyPrimary","lineHeight","color","Trans","V2","titles","t","PoolVersionMenu","protocolVersion","isOpen","ApplicationModal","POOL_VERSION","STAKING_REWARDS_INTERFACE","Interface","StakingRewardsJSON","STAKING_REWARDS_INFO","tokens","WRAPPED_NATIVE_CURRENCY","ChainId","MAINNET","DAI","stakingRewardAddress","USDC_MAINNET","USDT","WBTC","PageWrapper","AutoColumn","deprecated_mediaWidth","deprecated_upToSmall","LPFeeExplainer","DataCard","ButtonRow","RowFixed","ResponsiveButtonPrimary","ButtonPrimary","ResponsiveButtonSecondary","ButtonSecondary","EmptyProposals","Header","H1Small","v2Pairs","stakingInfo","stakingInfosWithBalance","allV2PairsWithLiquidity","stakingPairs","useTheme","account","useWeb3React","networkSupportsV2","useNetworkSupportsV2","trackedTokenPairs","useTrackedTokenPairs","tokenPairsWithLiquidityTokens","useMemo","liquidityToken","toV2LiquidityToken","liquidityTokens","tpwlt","v2PairsBalances","fetchingV2PairBalances","useTokenBalancesWithLoadingIndicator","liquidityTokensWithBalances","filter","address","greaterThan","useV2Pairs","v2IsLoading","some","V2Pair","pair","v2Pair","Boolean","pairToFilterBy","chainId","currentBlockTimestamp","useCurrentBlockTimestamp","NEVER_RELOAD","info","stakingRewardInfo","involvesToken","uni","UNI","rewardsAddresses","accountArg","balances","useMultipleContractSingleData","earnedAmounts","totalSupplies","rewardRates","periodFinishes","reduce","memo","rewardsAddress","index","balanceState","earnedAmountState","totalSupplyState","rewardRateState","periodFinishState","loading","error","console","dummyPair","Pair","CurrencyAmount","fromRawAmount","stakedAmount","JSBI","result","totalStakedAmount","totalRewardRate","getHypotheticalRewardRate","quotient","individualRewardRate","periodFinishSeconds","toNumber","periodFinishMs","active","push","periodFinish","Date","earnedAmount","rewardRate","useStakingInfo","pool","BIG_INT_ZERO","v2PairsWithoutStakedAmount","stakingPair","Trace","page","InterfacePageName","POOL_PAGE","shouldLogImpression","CardBGImage","CardNoise","CardSection","gap","RowBetween","DeprecatedWhite","fontWeight","fontSize","style","white","textDecoration","justify","Row","marginTop","padding","HideSmall","as","Text","DeprecatedBody","textAlign","Dots","FullPositionCard","stakedBalance","ButtonOutlined","margin","borderRadius","ChevronsRight","size","marginRight","Card","V2Unsupported","SwitchLocaleLink"],"sourceRoot":""}